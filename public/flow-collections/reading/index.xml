<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading :: C# Web Development</title>
    <link>http://localhost:1313/flow-collections/reading/index.html</link>
    <description>Content Links Conditionals Loops Collections List Array Dictionary </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Feb 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/flow-collections/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Conditionals</title>
      <link>http://localhost:1313/flow-collections/reading/conditionals/index.html</link>
      <pubDate>Wed, 25 Jan 2023 13:44:27 -0600</pubDate>
      <guid>http://localhost:1313/flow-collections/reading/conditionals/index.html</guid>
      <description>Before you start this chapter, fork and clone the csharp-web-dev-examples repository. This repository contains the example projects in the reading section.&#xA;For the Conditionals section, be sure to explore the Conditionals project in the repo.&#xA;Operators Before we review the syntax for conditionals, let’s go over the comparison and logical operators that we need to use in control flow statements.&#xA;Comparison Operators Operator Description == Checks if two items are equal !</description>
    </item>
    <item>
      <title>Loops</title>
      <link>http://localhost:1313/flow-collections/reading/loops/index.html</link>
      <pubDate>Wed, 25 Jan 2023 13:44:27 -0600</pubDate>
      <guid>http://localhost:1313/flow-collections/reading/loops/index.html</guid>
      <description>You can practice loop syntax in the LoopsExamples project in csharp-web-dev-examples repo .&#xA;for Loop In C#, we write a definite loop (aka a for loop) as:&#xA;for (int i = 0; i &lt; 10; i++ ) { Console.WriteLine(i); }Output:&#xA;0 1 2 3 4 5 6 7 8 9The C# for loop gives you explicit control over the starting, stopping, and stepping of the loop variable inside the parentheses. You can think of it this way:</description>
    </item>
    <item>
      <title>Collections</title>
      <link>http://localhost:1313/flow-collections/reading/collections/index.html</link>
      <pubDate>Wed, 25 Jan 2023 13:44:27 -0600</pubDate>
      <guid>http://localhost:1313/flow-collections/reading/collections/index.html</guid>
      <description>Data Structures A data structure lets us hold on to lots of data in a single place. It is a programming construct to aggregate many values into one value. Many types of data structures exist in various languages. A few examples are lists, dictionaries, arrays, tuples, etc.&#xA;C# Collections Namespace C# provides powerful and flexible structures to store data, known as collections. The C# collections namespace refers to the various interfaces the language provides for implementing collection types.</description>
    </item>
    <item>
      <title>List</title>
      <link>http://localhost:1313/flow-collections/reading/list/index.html</link>
      <pubDate>Wed, 25 Jan 2023 13:44:27 -0600</pubDate>
      <guid>http://localhost:1313/flow-collections/reading/list/index.html</guid>
      <description>To write a List version of the program, we will have to introduce several new C# concepts, including the class List. We will also review different kinds of for loops used in C#.&#xA;You will find the ListGradebook project in csharp-web-dev-examples repo . Run the program, explore the code, and enter some grades.&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 List&lt;string&gt; students = new List&lt;string&gt;(); List&lt;double&gt; grades = new List&lt;double&gt;(); string newStudent; string input; Console.</description>
    </item>
    <item>
      <title>Array</title>
      <link>http://localhost:1313/flow-collections/reading/array/index.html</link>
      <pubDate>Wed, 25 Jan 2023 13:44:27 -0600</pubDate>
      <guid>http://localhost:1313/flow-collections/reading/array/index.html</guid>
      <description>We learned about arrays in C# in a previous lesson , so let’s spend a moment comparing them to Lists. Lists are generally easier to use than C#’s Array. Let’s see why this is.&#xA;Why does C# have both Arrays and Lists? The answer is historical, at least in part. C# is a C-style language, and arrays are the most basic data structure in C. Using an Array over a List might be preferred in some circumstances, primarily for performance reasons (array operations are generally faster than List operations).</description>
    </item>
    <item>
      <title>Dictionary</title>
      <link>http://localhost:1313/flow-collections/reading/dictionary/index.html</link>
      <pubDate>Wed, 25 Jan 2023 13:44:27 -0600</pubDate>
      <guid>http://localhost:1313/flow-collections/reading/dictionary/index.html</guid>
      <description>C# also provides us a structure to store data as key/value pairs. C# calls these objects dictionaries, and they are provided by the Dictionary class.&#xA;Considering the gradebook example, we can improve our program using a dictionary. We’ll store the students’ grades along with their names in the same data structure. The names will be the keys, and the grades will be the values.&#xA;As with the other collection structures, in C# we must specify the types of the objects we’ll be storing when we declare a variable or parameter to be a dictionary.</description>
    </item>
  </channel>
</rss>