<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading :: C# Web Development</title>
    <link>http://localhost:1313/razor-views/reading/index.html</link>
    <description>Content Links Templates Creating a Template Using a Template Iterating in a Template Conditionals in a Template Walkthrough: Wrapping up HelloASPDotNET Razor Forms The Shared Directory Static Resources Bootstrap Walkthrough: Begin CodingEvents </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Feb 2023 12:48:24 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/razor-views/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Templates</title>
      <link>http://localhost:1313/razor-views/reading/templates/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/reading/templates/index.html</guid>
      <description>Take a look at the homepage for WebElements . The content includes text, images, a navigation bar, a search box, linked menu options at the bottom of the page, and 118 carefully colored boxes with links—one for each element on the periodic table. All of this content is very deliberately arranged and styled.&#xA;Imagine your boss tasks you with creating this website. Setting up the HTML tags for the navigation bar would be straightforward, but what about the element boxes?</description>
    </item>
    <item>
      <title>Creating a Template</title>
      <link>http://localhost:1313/razor-views/reading/creating-templates/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/reading/creating-templates/index.html</guid>
      <description>Using templates is a useful way to reduce the effort required to create and maintain a web-based project. Before you can dive into using templates, however, you need to take care of a little groundwork first.&#xA;Razor Razor is a templating syntax included in the application framework for our MVC project. It allows us to write C# code directly into an HTML tree.&#xA;More information on Razor can be found in this reference page .</description>
    </item>
    <item>
      <title>Using a Template</title>
      <link>http://localhost:1313/razor-views/reading/using-templates/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/reading/using-templates/index.html</guid>
      <description>Now that we know a little bit about views, we can start talking about how to pass data between MVC elements. Models are a key component of this, but for now, we will focus on how to pass data between the view and the controller.&#xA;Passing Data to a Template The controller class contains methods that send data to different templates. These methods have a structure similar to:&#xA;Example </description>
    </item>
    <item>
      <title>Iterating in a Template</title>
      <link>http://localhost:1313/razor-views/reading/iterating-templates/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/reading/iterating-templates/index.html</guid>
      <description>Let’s revisit part of the non-efficient HTML from the introduction, where we hard-coded coffee options in a list.&#xA;1 2 3 4 5 6 &lt;ol&gt; &lt;li&gt;French Roast&lt;/li&gt; &lt;li&gt;Espresso&lt;/li&gt; &lt;li&gt;Kopi Luwak&lt;/li&gt; &lt;li&gt;Instant&lt;/li&gt; &lt;/ol&gt; If we want to add, remove, or edit the list items, we need to go in and change the individual tags, which is a poor use of our time. Fortunately, there is a way to streamline the process.</description>
    </item>
    <item>
      <title>Conditionals in a Template</title>
      <link>http://localhost:1313/razor-views/reading/conditionals-templates/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/reading/conditionals-templates/index.html</guid>
      <description>In addition to iteration, Razor can also add or remove content on a webpage based on certain conditions. Going back to the coffee example, we could generate the ordered list ONLY IF coffeeOptions contains data. If the list of coffee types is empty, then there is no need to include the &lt;ol&gt; element. Instead, the template could include a &lt;p&gt; element with text stating that there are no options to select.</description>
    </item>
    <item>
      <title>Walkthrough: Wrapping up HelloASPDotNET</title>
      <link>http://localhost:1313/razor-views/reading/views-walkthrough/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/reading/views-walkthrough/index.html</guid>
      <description>Welcome to the Walkthrough for creating and using templates in your HelloASPDotNET project.&#xA;Video Walkthrough This walkthrough starts with the code from the controllers and routes video . Starting code repo is using the controllers-and-routing branch.&#xA;The final code in the walkthrough can be found on the views branch.&#xA;Note Congrats! You have completed the HelloASPNET project.&#xA;If you would like to continue this project, checkout out the Next Steps section for some coding challenges.</description>
    </item>
    <item>
      <title>Razor Forms</title>
      <link>http://localhost:1313/razor-views/reading/razor-forms/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/reading/razor-forms/index.html</guid>
      <description>Already we have seen that templates allow us to build generic forms. Using templates, you can reuse the structure by rendering the same form, but with different labels and data. Thus, a single form can serve different purposes, saving you extra effort.&#xA;Whenever possible, reuse existing templates!&#xA;Starting a New Project: Coding Events You will build a new project so you can practice with templates and forms. If you have not done so, commit and push any unsaved work from your HelloASPDotNET project.</description>
    </item>
    <item>
      <title>The Shared Directory</title>
      <link>http://localhost:1313/razor-views/reading/shared-directory/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/reading/shared-directory/index.html</guid>
      <description>Earlier in the lesson , we touched upon the role of _Layout.cshtml. When we set Layout to null, the header, footer, and Bootstrap disappear from our site and we are left with static HTML. _Layout is in the Shared directory of the Views directory. Files inside this Shared directory are used sitewide and can be accessed by the templates we create when we are working with our controllers. These files help us DRY our code.</description>
    </item>
    <item>
      <title>Static Resources</title>
      <link>http://localhost:1313/razor-views/reading/static-resources/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/reading/static-resources/index.html</guid>
      <description>Previously, we briefly saw that when adding a view, we inherited some CSS from the _Layout.cshtml file in the Shared directory. While every view we add for our action methods in the controllers inherits from this template, we can also add additional static resources, such as images, scripts, and styles.&#xA;Adding Custom Styles In large applications, we may find more CSS files than just site.css. To add styles that only apply to the view we are currently working on, we can use the same &lt;link&gt; tag we normally do for a static HTML page.</description>
    </item>
    <item>
      <title>Bootstrap</title>
      <link>http://localhost:1313/razor-views/reading/bootstrap/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/reading/bootstrap/index.html</guid>
      <description>Bootstrap is a commonly-used style library. It allows users to quickly apply its CSS style rules with class selectors. Style updates can add features or improve the usability of an application. For example, Bootstrap, and other styling libraries for that matter, use a standardized color scheme for items like clickable buttons. As the user of the helper library, you can apply the btn btn-primary classes to a button on your page and Bootstrap works behind the CSS scenes to render a blue button with white text in a legible font.</description>
    </item>
    <item>
      <title>Walkthrough: Begin CodingEvents</title>
      <link>http://localhost:1313/razor-views/reading/view-form-walkthrough/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/reading/view-form-walkthrough/index.html</guid>
      <description>Welcome to the Walkthrough for creating and using templates in your CodingEvents project.&#xA;Video Walkthrough Starting code repo can be found on the main branch. This is an empty MVC project.&#xA;Final code repo can be found on the views branch.&#xA;Note This is the beginning of this project. You will continue adding to this project for the rest of the course.</description>
    </item>
  </channel>
</rss>