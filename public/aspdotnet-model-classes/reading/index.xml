<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading :: C# Web Development</title>
    <link>http://localhost:1313/aspdotnet-model-classes/reading/index.html</link>
    <description> Models in MVC Create a Model Class Models and Data Model Binding Video Walkthrough </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Feb 2023 17:39:54 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/aspdotnet-model-classes/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Models in MVC</title>
      <link>http://localhost:1313/aspdotnet-model-classes/reading/model-intro/index.html</link>
      <pubDate>Mon, 20 Feb 2023 17:39:54 -0600</pubDate>
      <guid>http://localhost:1313/aspdotnet-model-classes/reading/model-intro/index.html</guid>
      <description>In the previous chapter, you learned about Razor, which displays data and an interface for a user. Before that, you learned about controllers . Remember that controllers determine what data to send to the the views. This data needs to come from some source and take some shape. Cue the models.&#xA;What is a Model? A model represents the logic for accessing and storing the data used in an application. Properly constructed, models do not depend on any controllers or views.</description>
    </item>
    <item>
      <title>Create a Model Class</title>
      <link>http://localhost:1313/aspdotnet-model-classes/reading/model-class/index.html</link>
      <pubDate>Mon, 20 Feb 2023 17:39:54 -0600</pubDate>
      <guid>http://localhost:1313/aspdotnet-model-classes/reading/model-class/index.html</guid>
      <description>In this book section, we will continue to make incremental changes to CodingEvents. The next set of changes show model creation, how models relate to data, and the practice of model binding. First, we replace the dictionary in EventsController with a list of Event models. We’ll then update our action methods to take advantage of the new model and its properties. Lastly, we refactor the view template to reflect the changes in the controller.</description>
    </item>
    <item>
      <title>Models and Data</title>
      <link>http://localhost:1313/aspdotnet-model-classes/reading/data-layer/index.html</link>
      <pubDate>Mon, 20 Feb 2023 17:39:54 -0600</pubDate>
      <guid>http://localhost:1313/aspdotnet-model-classes/reading/data-layer/index.html</guid>
      <description>To effectively work with data, we need to add another element to our MVC application. Say for example, we want to remove an event from our list. If two events both have the same name, we can’t yet identify which of the events to delete.&#xA;In CodingEvents, we add a unique identifier field to Events to better handle and track distinct Event instances. Next, we’ll also create another model class called EventData.</description>
    </item>
    <item>
      <title>Model Binding</title>
      <link>http://localhost:1313/aspdotnet-model-classes/reading/model-binding/index.html</link>
      <pubDate>Mon, 20 Feb 2023 17:39:54 -0600</pubDate>
      <guid>http://localhost:1313/aspdotnet-model-classes/reading/model-binding/index.html</guid>
      <description>We now introduce a useful technique to auto-create model instances, called model binding. Model binding takes place when a whole model object is created by the ASP.NET framework on form submission. This saves us the effort, and the code, needed to pass in each form field to a controller.&#xA;Model binding reduces the amount of code we need to write to create an object and helps with validation (which we’ll explore further in the next section).</description>
    </item>
    <item>
      <title>Video Walkthrough</title>
      <link>http://localhost:1313/aspdotnet-model-classes/reading/video-walkthrough/index.html</link>
      <pubDate>Mon, 20 Feb 2023 17:39:54 -0600</pubDate>
      <guid>http://localhost:1313/aspdotnet-model-classes/reading/video-walkthrough/index.html</guid>
      <description>This is a video walkthrough of all the steps taken during the chapter. To follow along, make sure to fork and clone CodingEvents . The video starts on the models-start branch and ends on the models branch. The video includes timestamps that correspond to each page in the reading in case you want to revisit a specific task or technique.&#xA;Note If you completed the exercises from the chapter on Views, then your version of CodingEvents will look a lot like the models-start branch.</description>
    </item>
  </channel>
</rss>