<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chapter 14: Models and Model Binding :: C# Web Development</title>
    <link>http://localhost:1313/aspdotnet-model-classes/index.html</link>
    <description>Learning Objectives After completing everything in this chapter, you should be able to do the following:&#xA;Understand the role of models in MVC applications Use model binding to efficiently create objects during form processing Key Terminology On each page of the reading, make note of the following key terms and their definitions.&#xA;Models in MVC model business logic Creating a Model Class POCO Models and Data uid unique identifier get-only auto-implemented property readonly data layer Model-Binding model binding [FromForm] Content Links Reading Exercises: Edit Model Classes Studio: Spa User Signup Next Steps </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Feb 2023 17:39:54 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/aspdotnet-model-classes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reading</title>
      <link>http://localhost:1313/aspdotnet-model-classes/reading/index.html</link>
      <pubDate>Mon, 20 Feb 2023 17:39:54 -0600</pubDate>
      <guid>http://localhost:1313/aspdotnet-model-classes/reading/index.html</guid>
      <description> Models in MVC Create a Model Class Models and Data Model Binding Video Walkthrough </description>
    </item>
    <item>
      <title>Exercises: Edit Model Classes</title>
      <link>http://localhost:1313/aspdotnet-model-classes/exercises/index.html</link>
      <pubDate>Mon, 20 Feb 2023 17:39:54 -0600</pubDate>
      <guid>http://localhost:1313/aspdotnet-model-classes/exercises/index.html</guid>
      <description>Add functionality to edit event objects in your CodingEvents application. These exercises assume that you have added all of the code from this section of the book and your application resembles the models branch .&#xA;The edit form will resemble the form used to create an event.&#xA;Tip As you work through these steps, test your code along the way! With each change you apply to your code, ask yourself what you expect to see when the application is run.</description>
    </item>
    <item>
      <title>Studio: Spa User Signup</title>
      <link>http://localhost:1313/aspdotnet-model-classes/studio/index.html</link>
      <pubDate>Mon, 20 Feb 2023 17:39:54 -0600</pubDate>
      <guid>http://localhost:1313/aspdotnet-model-classes/studio/index.html</guid>
      <description>For this studio you will add functionality to allow users to sign up for your SpaDay app.&#xA;The starter code has been modified from where you left off last class. Grab the refactored code on the user-signup-starter branch .&#xA;You’ll notice in this branch that the name has been removed from the service selection form. Once we implement user-signup functionality, we can use a given user’s name to identify the spa client.</description>
    </item>
    <item>
      <title>Next Steps</title>
      <link>http://localhost:1313/aspdotnet-model-classes/next-steps/index.html</link>
      <pubDate>Mon, 20 Feb 2023 17:39:54 -0600</pubDate>
      <guid>http://localhost:1313/aspdotnet-model-classes/next-steps/index.html</guid>
      <description>Next Steps The next chapter covers ViewModels. Before you continue your learning, if you need any additional resources on models and model binding, here are a few of our favorites:&#xA;Overview of ASP.NET Core MVC Add a Model to an ASP.NET Core MVC app </description>
    </item>
  </channel>
</rss>