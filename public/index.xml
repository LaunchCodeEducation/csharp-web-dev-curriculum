<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# Web Development</title>
    <link>http://localhost:1313/index.html</link>
    <description>C# Web Development Course Summary This course is an introduction to C# and the .NET framework. C# is a programming language developed by Microsoft and used in almost all of its products.&#xA;This course is designed for learners who are already familiar with at least one programming language. Thus, we’ll move quickly through the syntax rules and procedural basics of the language, i.e., how does one write a for loop in C# or a conditional statement?</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Mar 2023 09:16:07 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chapter 1: Introduction and Setup</title>
      <link>http://localhost:1313/introduction-and-setup/index.html</link>
      <pubDate>Thu, 15 Dec 2022 09:16:07 -0600</pubDate>
      <guid>http://localhost:1313/introduction-and-setup/index.html</guid>
      <description>Major Concepts &amp; Key Terminology The learning objectives for this chapter are:&#xA;Install and configure Visual Studio and the .NET SDK Create and run a “Hello World!” console app within Visual Studio Import a C# project from GitHub into Visual Studio Content Links Setup for C# Next Steps </description>
    </item>
    <item>
      <title>Chapter 2: Data Types</title>
      <link>http://localhost:1313/data-types-and-variables/index.html</link>
      <pubDate>Tue, 17 Jan 2023 16:28:22 -0600</pubDate>
      <guid>http://localhost:1313/data-types-and-variables/index.html</guid>
      <description>Learning Objectives After completing this chapter, you should be able to do the following:&#xA;Explain the difference between static and dynamic typing Write comments in C# Name the numeric types in C# Declare variables in C# Distinguish between value and reference types Parse data types Follow proper C# naming conventions Key Terminology Throughout this lesson, you will see lots of new vocabulary. Here is everything that you should make note of on the pages the term first appears:</description>
    </item>
    <item>
      <title>Chapter 3: Control Flow &amp; Collections</title>
      <link>http://localhost:1313/flow-collections/index.html</link>
      <pubDate>Wed, 25 Jan 2023 13:44:27 -0600</pubDate>
      <guid>http://localhost:1313/flow-collections/index.html</guid>
      <description>Learning Objectives After completing this chapter, you should be able to do the following:&#xA;Become familiar with C# Operators ==, !=, &lt;, &gt;, &lt;=, and &gt;= Write conditionals using: if, else, if/else statements switch, break, and continue statements Create loops and know when to use them for, foreach, while, and do...while Know how and when to use list, array, and dictionary collections. Key Terminology Throughout this lesson, you will see lots of new vocabulary.</description>
    </item>
    <item>
      <title>Chapter 4: Classes</title>
      <link>http://localhost:1313/classes/index.html</link>
      <pubDate>Mon, 23 Jan 2023 13:36:52 -0600</pubDate>
      <guid>http://localhost:1313/classes/index.html</guid>
      <description>Learning Objectives After completing this chapter, you should be able to do the following:&#xA;Use access modifiers to customize fields and methods. Override built-in methods such as ToString and Equals. Understand equality and sameness in C#. Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page:&#xA;Classes for C# class object fields methods members instance this keyword shadowing Modifiers in C# access level access modifier public private default access assembly world-level Encapsulation encapsulation accessor getter setter auto-implemented property backing field Constructors default constructor Methods instance method Content Links Reading Exercises Studio: Restaurant Menu Next Steps </description>
    </item>
    <item>
      <title>Chapter 5: Classes Part 2</title>
      <link>http://localhost:1313/classes-part-2/index.html</link>
      <pubDate>Mon, 30 Jan 2023 09:32:46 -0600</pubDate>
      <guid>http://localhost:1313/classes-part-2/index.html</guid>
      <description>Learning Objectives By the end of this chapter, you should understand:&#xA;How to customize fields with the keywords readonly and static. How to add methods to a class and call those methods. The difference between instance methods and static methods. How to override the default ToString and Equals methods for a class. How to auto-generate an Equals method in Visual Studio. Key Terminology Customizing Fields readonly field static field const Customizing Methods static method Class method Special Methods override ToString method Overriding Cast Equality Identity Equals method Content Links Reading: Classes Part 2 Exercises: Objects and Classes, Part 2 Studio: Restaurant Menu Continued Next Steps </description>
    </item>
    <item>
      <title>Chapter 6: Unit Testing</title>
      <link>http://localhost:1313/unit-testing/index.html</link>
      <pubDate>Wed, 25 Jan 2023 13:23:58 -0600</pubDate>
      <guid>http://localhost:1313/unit-testing/index.html</guid>
      <description>Learning Objectives After completing this chapter, you should be able to do the following:&#xA;Write unit tests to verify the behavior of methods. Identify proper behaviors for which a test should be written. Know the importance of testing in creating well-functioning code. Use test-driven development to define the behavior of code before writing it, and to ensure that code is properly tested. Using MSTest to create unit tests. Key Terminology As you work through this chapter, you should make note of the terms on the following pages:</description>
    </item>
    <item>
      <title>Chapter 7: Inheritance</title>
      <link>http://localhost:1313/inheritance/index.html</link>
      <pubDate>Tue, 31 Jan 2023 15:39:38 -0600</pubDate>
      <guid>http://localhost:1313/inheritance/index.html</guid>
      <description>Major Concepts After completing this chapter, you should be able to do the following:&#xA;Understand what inheritance is and how programmers can use it. Understand what abstract classes and methods are. Learn how to formally diagram classes and the relationships between classes. Key Terminology As you read through this chapter, look for the following key words.&#xA;Inheritance Inheritance Subclassing Inheritance in C# Extends Subclass Derived class Child class Superclass Base class Parent class A Tale of Two Cats base no-argument constructor no-arg constructor override method overriding Inheriting from Abstraction Abstraction abstract Abstract class Abstract method Casting Runtime exception Polymorphism Class Diagrams Class diagrams One-to-One Relationship One-to-Many Relationship Table of Contents Reading Exercises: Inheritance Studio: Fun With Quizzes Next Steps </description>
    </item>
    <item>
      <title>Chapter 8: Interfaces and Polymorphism</title>
      <link>http://localhost:1313/interfaces-and-polymorphism/index.html</link>
      <pubDate>Wed, 01 Feb 2023 13:10:40 -0600</pubDate>
      <guid>http://localhost:1313/interfaces-and-polymorphism/index.html</guid>
      <description>Learning Objectives After completing this chapter, you should be able to do the following:&#xA;Understand how polymorphism is enabled by interfaces and inheritance. Understand and use interfaces to create more flexible code. Key Terminology As you read through this chapter, you should make note of the following terms in the each section.&#xA;Introduction polymorphism Interfaces interfaces method signature default methods Content Links Reading Exercises Studio: Spinning Discs Next Steps </description>
    </item>
    <item>
      <title>Chapter 9: Introduction to ASP.NET</title>
      <link>http://localhost:1313/asp-net-intro/index.html</link>
      <pubDate>Mon, 06 Feb 2023 14:44:12 -0600</pubDate>
      <guid>http://localhost:1313/asp-net-intro/index.html</guid>
      <description>Major Concepts Learn about the Model-View-Controller (MVC) design pattern. Understand what ASP.NET Core is. How to initialize an MVC project using Visual Studio and ASP.NET Core. How to handle routing and write controllers in ASP.NET Core. Key Terminology Design Patterns, MVC, and ASP.NET, Oh My! Design patterns Model-View-Controller (MVC) Model View Controller ASP.NET ASP.NET Core Content Links Reading Next Steps </description>
    </item>
    <item>
      <title>Chapter 10: Controllers and Routing</title>
      <link>http://localhost:1313/aspdotnet-controllers-and-routes/index.html</link>
      <pubDate>Mon, 06 Feb 2023 14:09:15 -0600</pubDate>
      <guid>http://localhost:1313/aspdotnet-controllers-and-routes/index.html</guid>
      <description>Learning Objectives Understand the basic architecture of an MVC web application Build an ASP.NET application that can handle various types of requests Key Terminology Simple Controllers route Controllers endpoint routing conventional routing attribute routing action method attribute [HttpGet] [HttpPost] [Route(&#34;path&#34;)] IActionResult Controllers with Parameters query string Cleaning Up Your Controllers attribute routing attributes Content Links Reading Exercises Studio Next Steps </description>
    </item>
    <item>
      <title>Chapter 11: Exceptions</title>
      <link>http://localhost:1313/exceptions/index.html</link>
      <pubDate>Wed, 08 Feb 2023 10:27:25 -0600</pubDate>
      <guid>http://localhost:1313/exceptions/index.html</guid>
      <description>Learning Objectives After completing this chapter, you should understand:&#xA;How to handle an exception in C# Common exceptions in C# Key Terminology Introduction to Exceptions Exceptions, Null pointer Handling Exceptions Exception swallowing Handling Exceptions Checked exceptions, Unchecked exceptions, try/catch/finally Content Links Reading Exercises: Exceptions Next Steps </description>
    </item>
    <item>
      <title>Chapter 12: Tools in Visual Studio</title>
      <link>http://localhost:1313/vstools/index.html</link>
      <pubDate>Tue, 14 Feb 2023 19:56:25 -0600</pubDate>
      <guid>http://localhost:1313/vstools/index.html</guid>
      <description>Learning Objectives Understand the role of Visual Studio build tools in C#/.NET projects&#xA;Key Terminology MSBuild MSBuild Automated build tool XML Extensible Markup Language MSBuild tasks MSBuild targets MSBuild properties MSBuild items NuGet NuGet Content Links Reading Studio: If It Ain&#39;t Broke, Add a Breakpoint! Next Steps </description>
    </item>
    <item>
      <title>Chapter 13: Razor Views</title>
      <link>http://localhost:1313/razor-views/index.html</link>
      <pubDate>Thu, 09 Feb 2023 12:48:24 -0600</pubDate>
      <guid>http://localhost:1313/razor-views/index.html</guid>
      <description>Learning Objectives By the end of this chapter, you should understand:&#xA;The benefits of using templates How to create a template using a Razor View in an MVC application How to add iteration, conditionals, and forms to a template How to link a template to static resources like CSS stylesheets, scripts, images, etc. How to render a template using ASP.NET controllers Key Terminology Creating a Template Razor templates @ View() method Using a Template ViewBag The Shared Directory Partial View Content Links Reading Exercises: Razor Views Studio: Spa Day!</description>
    </item>
    <item>
      <title>Chapter 14: Models and Model Binding</title>
      <link>http://localhost:1313/aspdotnet-model-classes/index.html</link>
      <pubDate>Mon, 20 Feb 2023 17:39:54 -0600</pubDate>
      <guid>http://localhost:1313/aspdotnet-model-classes/index.html</guid>
      <description>Learning Objectives After completing everything in this chapter, you should be able to do the following:&#xA;Understand the role of models in MVC applications Use model binding to efficiently create objects during form processing Key Terminology On each page of the reading, make note of the following key terms and their definitions.&#xA;Models in MVC model business logic Creating a Model Class POCO Models and Data uid unique identifier get-only auto-implemented property readonly data layer Model-Binding model binding [FromForm] Content Links Reading Exercises: Edit Model Classes Studio: Spa User Signup Next Steps </description>
    </item>
    <item>
      <title>Chapter 15: Viewmodels and Model Validation</title>
      <link>http://localhost:1313/viewmodels/index.html</link>
      <pubDate>Fri, 24 Feb 2023 08:57:18 -0600</pubDate>
      <guid>http://localhost:1313/viewmodels/index.html</guid>
      <description>Major Concepts By the end of this chapter, you should understand:&#xA;What ViewModels are and why we should use them. How and why to validate model data in ASP.NET. How to use C# validation attributes. How to employ good error handling when bad data is entered. Key Terminology ViewModels and Passing Data Between Views ViewModel Server-Side Validation Validation Client-Side Validation Server-Side Validation Validation and Views Unobtrusive Validation Content Links Reading Exercises Studio: Spa User Validation Next Steps </description>
    </item>
    <item>
      <title>Chapter 16: Enums</title>
      <link>http://localhost:1313/enums/index.html</link>
      <pubDate>Mon, 27 Feb 2023 14:58:53 -0600</pubDate>
      <guid>http://localhost:1313/enums/index.html</guid>
      <description>Learning Objectives Once you have completed everything in the chapter, you should be able to do the following:&#xA;Use enum types to represent categories of related objects Key Terminology As you read through this chapter, make note of the following key terms and their definitions:&#xA;Intro enumeration types enums select log level Content Links Reading Next Steps </description>
    </item>
    <item>
      <title>Chapter 17: Introduction to Object-Relational Mapping</title>
      <link>http://localhost:1313/orm-part-1/index.html</link>
      <pubDate>Fri, 10 Mar 2023 09:01:27 -0600</pubDate>
      <guid>http://localhost:1313/orm-part-1/index.html</guid>
      <description>Major Concepts By the end of this chapter, you should understand:&#xA;What object-relational mapping is and why developers use it. How to connect an ASP.NET Core MVC application to a MySQL database. How to create a new migration and update the database. How to create a DbContext and why developer use it. Key Terminology Object-Relational Mapping Object-Relational Mapping (ORM) object-relational mapper Entity Framework Core Data Layers Environment Variables Accessing Data Data Store In-Memory Data Store Persistent Data Store DbContext Database Migration Working With Data Stores Dependency Injection Transient Objects Content Links Reading Exercises: OMG the ORM!</description>
    </item>
    <item>
      <title>Chapter 18: Relationships in Object-Relational Mapping</title>
      <link>http://localhost:1313/relationships-or-mapping/index.html</link>
      <pubDate>Thu, 16 Mar 2023 09:16:07 -0600</pubDate>
      <guid>http://localhost:1313/relationships-or-mapping/index.html</guid>
      <description>Major Concepts The learning objectives for this chapter are:&#xA;This chapter introduces the tools needed to create meaningful relationships using ORM. Let’s consider the different types of relationships at a conceptual level. In later sections, we will learn how to implement these relationships using EntityFrameworkCore.&#xA;Key Terminology One-to-Many Many-to-Many Lambda Expressions Join Tables Composite Primary Key Join Class Lazy Loading Eager Loading Content Links Reading Exercises Next Steps </description>
    </item>
    <item>
      <title>Chapter 19: Authentication</title>
      <link>http://localhost:1313/authentication/index.html</link>
      <pubDate>Thu, 15 Dec 2022 09:16:07 -0600</pubDate>
      <guid>http://localhost:1313/authentication/index.html</guid>
      <description>Learning Objectives After completing this chapter, you should be able to do the following:&#xA;Scaffold Identity into an existing project Authenticate users that visit your application Attach permissions to users of your application Major Concepts &amp; Key Terminology Authentication Authorization Sessions Cookies Identity Hashing Content Links Reading Studio: TechJobs Authentication Next Steps </description>
    </item>
    <item>
      <title>Chapter 20: Introduction to Web APIs &amp; REST</title>
      <link>http://localhost:1313/web-api-rest/index.html</link>
      <pubDate>Thu, 15 Dec 2022 09:16:07 -0600</pubDate>
      <guid>http://localhost:1313/web-api-rest/index.html</guid>
      <description>Learning Objectives After completing this chapter, you should be able to do the following:&#xA;Submit HTTP requests using Postman to an API and receive the expected response GET POST DELETE Submit a bad HTTP request, understand the response and how to fix it You should also have an understanding of the following:&#xA;HTTP methods Endpoints Status Codes Headers API design Major Concepts &amp; Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page:</description>
    </item>
    <item>
      <title>Appendices</title>
      <link>http://localhost:1313/appendices/index.html</link>
      <pubDate>Fri, 20 Jan 2023 08:49:09 -0600</pubDate>
      <guid>http://localhost:1313/appendices/index.html</guid>
      <description>Content Links Installing Postman </description>
    </item>
    <item>
      <title>Assignments</title>
      <link>http://localhost:1313/assignments/index.html</link>
      <pubDate>Wed, 11 Jan 2023 13:14:59 -0600</pubDate>
      <guid>http://localhost:1313/assignments/index.html</guid>
      <description>What is a Graded Assignment? Graded Assignments will count towards your final grade in the course. Each assignment is graded pass-fail. While Assignment 0 is more of a tutorial to get you used to autograding in C#, you have to get a passing grade on the four TechJobs assignments in order for you to continue on to the next unit. Each assignment builds on concepts introduced over multiple lessons, so we encourage you to begin reviewing the assignment and working on the different tasks as soon as the assignment becomes available in Canvas.</description>
    </item>
  </channel>
</rss>