<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading :: C# Web Development</title>
    <link>http://localhost:1313/classes/reading/index.html</link>
    <description>Content Links Classes for C# Modifiers in C# Encapsulation Constructors Methods Single Responsibility Principle </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Jan 2023 13:36:52 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/classes/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Classes for C#</title>
      <link>http://localhost:1313/classes/reading/background/index.html</link>
      <pubDate>Mon, 23 Jan 2023 13:36:52 -0600</pubDate>
      <guid>http://localhost:1313/classes/reading/background/index.html</guid>
      <description>In previous programming studies, we have come across classes and objects. Classes and objects in C# are similar to classes and objects in other languages.&#xA;A Minimal Class and Object Classes may contain fields and methods. Fields contain the data of a class and methods define actions a class can take. We say that fields and methods are members of a class.&#xA;Example Let’s create a class called HelloWorld with one field, message, and one method, SayHello().</description>
    </item>
    <item>
      <title>Modifiers in C#</title>
      <link>http://localhost:1313/classes/reading/modifiers/index.html</link>
      <pubDate>Mon, 23 Jan 2023 13:36:52 -0600</pubDate>
      <guid>http://localhost:1313/classes/reading/modifiers/index.html</guid>
      <description>Access Modifiers For fields in classes, the access level determines who can get or set the value of the field. For methods, the access level determines who can call the method. The access level of a class member is determined by an access modifier.&#xA;We’ve encountered access modifiers so far in our code. In our examples, you frequently see the keyword, public. public makes the field or method to be accessible by anyone working with our code.</description>
    </item>
    <item>
      <title>Encapsulation</title>
      <link>http://localhost:1313/classes/reading/encapsulation/index.html</link>
      <pubDate>Mon, 23 Jan 2023 13:36:52 -0600</pubDate>
      <guid>http://localhost:1313/classes/reading/encapsulation/index.html</guid>
      <description>Our discussion of classes and objects is integral to us using object-oriented programming. Object-oriented programming stands on four pillars: abstraction, encapsulation, inheritance, and polymorphism.&#xA;Encapsulation Encapsulation is the bundling of related data and behaviors that operate on that data, usually with restricted access to internal, non-public data and behaviors. In object-oriented programming, classes and objects allow us to encapsulate, or isolate, data and behavior to only the parts of our program to which they are relevant.</description>
    </item>
    <item>
      <title>Constructors</title>
      <link>http://localhost:1313/classes/reading/constructors/index.html</link>
      <pubDate>Mon, 23 Jan 2023 13:36:52 -0600</pubDate>
      <guid>http://localhost:1313/classes/reading/constructors/index.html</guid>
      <description>We’ll often want to initialize, or set the initial value of, some of our fields when creating a new object from a class. Constructors allow us to do so.&#xA;In C#, constructors have the same name as the class and are most often declared public (though they can have any other valid access modifier). They are declared without a return type. Any function that is named the same as the class and has no return type is a constructor.</description>
    </item>
    <item>
      <title>Methods</title>
      <link>http://localhost:1313/classes/reading/methods/index.html</link>
      <pubDate>Mon, 23 Jan 2023 13:36:52 -0600</pubDate>
      <guid>http://localhost:1313/classes/reading/methods/index.html</guid>
      <description>Calling Methods on Objects A method is a function that belongs to a class. In C#, all procedures must be part of a class. Let’s revisit our HelloWorld class.&#xA;1 2 3 4 5 6 7 8 9 10 11 public class HelloWorld { private string message = &#34;Hello World&#34;; public void SayHello() { Console.WriteLine(message); } } There is one method in this class, SayHello(). In order to call this method, we must have an object created from the HelloWorld class template.</description>
    </item>
    <item>
      <title>Single Responsibility Principle</title>
      <link>http://localhost:1313/classes/reading/srp/index.html</link>
      <pubDate>Mon, 23 Jan 2023 13:36:52 -0600</pubDate>
      <guid>http://localhost:1313/classes/reading/srp/index.html</guid>
      <description>As we wrap up our whirlwind tour of classes, we want you think a bit about how to go about building good classes. Doing so is more of an art than a science, and it will take you lots of practice and time. However, there are a few rules that we’ve pointed out to help guide you. Here’s one more.&#xA;From Wikipedia :&#xA;The single responsibility principle states that every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.</description>
    </item>
  </channel>
</rss>