<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chapter 4: Classes :: C# Web Development</title>
    <link>http://localhost:1313/classes/index.html</link>
    <description>Learning Objectives After completing this chapter, you should be able to do the following:&#xA;Use access modifiers to customize fields and methods. Override built-in methods such as ToString and Equals. Understand equality and sameness in C#. Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page:&#xA;Classes for C# class object fields methods members instance this keyword shadowing Modifiers in C# access level access modifier public private default access assembly world-level Encapsulation encapsulation accessor getter setter auto-implemented property backing field Constructors default constructor Methods instance method Content Links Reading Exercises Studio: Restaurant Menu Next Steps </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Jan 2023 13:36:52 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/classes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reading</title>
      <link>http://localhost:1313/classes/reading/index.html</link>
      <pubDate>Mon, 23 Jan 2023 13:36:52 -0600</pubDate>
      <guid>http://localhost:1313/classes/reading/index.html</guid>
      <description>Content Links Classes for C# Modifiers in C# Encapsulation Constructors Methods Single Responsibility Principle </description>
    </item>
    <item>
      <title>Exercises</title>
      <link>http://localhost:1313/classes/exercises/index.html</link>
      <pubDate>Mon, 23 Jan 2023 13:36:52 -0600</pubDate>
      <guid>http://localhost:1313/classes/exercises/index.html</guid>
      <description>Before you get started, make sure you have forked and cloned the starter code repository for the exercises. We will be focusing on the project named Classes.&#xA;Open up the file, Student.cs, and update the starter code to make use of auto-implemented properties.&#xA;Check Your Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class Student { private static int nextStudentId = 1; public string Name { get; set; } public int StudentId { get; set; } public int NumberOfCredits { get; set; } = 0; public double Gpa { get; set; } = 0.</description>
    </item>
    <item>
      <title>Studio: Restaurant Menu</title>
      <link>http://localhost:1313/classes/studio/index.html</link>
      <pubDate>Mon, 23 Jan 2023 13:36:52 -0600</pubDate>
      <guid>http://localhost:1313/classes/studio/index.html</guid>
      <description>Let’s practice designing classes using the following scenario. You’ve been hired to create a web application for a local restaurant. They want to both display their current menu and edit it through an admin panel.&#xA;You’re not going to build an actual application in this studio. Instead, you will focus on the design of a portion of this application. Object-oriented programming in C# requires intentional, up-front planning. While this may seem tedious, outlining your ideas before you code helps reduce the errors you need to fix later.</description>
    </item>
    <item>
      <title>Next Steps</title>
      <link>http://localhost:1313/classes/next-steps/index.html</link>
      <pubDate>Mon, 23 Jan 2023 13:36:52 -0600</pubDate>
      <guid>http://localhost:1313/classes/next-steps/index.html</guid>
      <description>Next Steps This was just an introduction to classes in C#. We will continue to learn more in the next chapter. If you would like an additional review on this topic before starting the next chapter, check out the following articles.&#xA;W3Schools Microsoft Documentation tutlane </description>
    </item>
  </channel>
</rss>