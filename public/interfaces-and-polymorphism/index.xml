<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chapter 8: Interfaces and Polymorphism :: C# Web Development</title>
    <link>http://localhost:1313/interfaces-and-polymorphism/index.html</link>
    <description>Learning Objectives After completing this chapter, you should be able to do the following:&#xA;Understand how polymorphism is enabled by interfaces and inheritance. Understand and use interfaces to create more flexible code. Key Terminology As you read through this chapter, you should make note of the following terms in the each section.&#xA;Introduction polymorphism Interfaces interfaces method signature default methods Content Links Reading Exercises Studio: Spinning Discs Next Steps </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Feb 2023 13:10:40 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/interfaces-and-polymorphism/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reading</title>
      <link>http://localhost:1313/interfaces-and-polymorphism/reading/index.html</link>
      <pubDate>Wed, 01 Feb 2023 13:10:40 -0600</pubDate>
      <guid>http://localhost:1313/interfaces-and-polymorphism/reading/index.html</guid>
      <description> Introduction Interfaces Interfaces and Abstract Classes Interfaces in the Wild Unit Testing and Interfaces </description>
    </item>
    <item>
      <title>Exercises</title>
      <link>http://localhost:1313/interfaces-and-polymorphism/exercises/index.html</link>
      <pubDate>Wed, 01 Feb 2023 13:10:40 -0600</pubDate>
      <guid>http://localhost:1313/interfaces-and-polymorphism/exercises/index.html</guid>
      <description>As a new C# coder, it might take you some time to recognize when to use interfaces.&#xA;To help overcome this, let’s consider a common occurrence — sorting a List of objects.&#xA;If the list contains string or numerical entries, then sorting the list is trivial:&#xA;listName.Sort(); However, if the elements are custom objects (like Cat), then sorting the list becomes more complicated. This is because the objects may contain multiple fields, any of which could be used as a sorting option.</description>
    </item>
    <item>
      <title>Studio: Spinning Discs</title>
      <link>http://localhost:1313/interfaces-and-polymorphism/studio/index.html</link>
      <pubDate>Wed, 01 Feb 2023 13:10:40 -0600</pubDate>
      <guid>http://localhost:1313/interfaces-and-polymorphism/studio/index.html</guid>
      <description>Although they look the same, the old optical discs—CDs and DVDs—are quite different from each other. Let’s use them as the focus for creating a new interface.&#xA;Getting Ready Set up a local copy of the project:&#xA;Visit the repository page for this project and fork it to create a copy under your own GitHub account. Open up the solution in Visual Studio to get started. Disc Project Overview In this activity, you will pair up to design a new custom interface and an abstract class.</description>
    </item>
    <item>
      <title>Next Steps</title>
      <link>http://localhost:1313/interfaces-and-polymorphism/next-steps/index.html</link>
      <pubDate>Wed, 01 Feb 2023 13:10:40 -0600</pubDate>
      <guid>http://localhost:1313/interfaces-and-polymorphism/next-steps/index.html</guid>
      <description>Now that you have learned all about interfaces, you are ready to tackle controllers and ASP.NET Core MVC! Large web application frameworks like ASP.NET Core MVC use interfaces so it is important to make sure you have a handle on them now. If you would like some additional resources on the topic, here are some of our favorites:&#xA;Microsoft Documentation C# Corner Tutorials Teacher </description>
    </item>
  </channel>
</rss>