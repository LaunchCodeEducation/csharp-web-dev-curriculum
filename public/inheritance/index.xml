<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chapter 7: Inheritance :: C# Web Development</title>
    <link>http://localhost:1313/inheritance/index.html</link>
    <description>Major Concepts After completing this chapter, you should be able to do the following:&#xA;Understand what inheritance is and how programmers can use it. Understand what abstract classes and methods are. Learn how to formally diagram classes and the relationships between classes. Key Terminology As you read through this chapter, look for the following key words.&#xA;Inheritance Inheritance Subclassing Inheritance in C# Extends Subclass Derived class Child class Superclass Base class Parent class A Tale of Two Cats base no-argument constructor no-arg constructor override method overriding Inheriting from Abstraction Abstraction abstract Abstract class Abstract method Casting Runtime exception Polymorphism Class Diagrams Class diagrams One-to-One Relationship One-to-Many Relationship Table of Contents Reading Exercises: Inheritance Studio: Fun With Quizzes Next Steps </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Jan 2023 15:39:38 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/inheritance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reading</title>
      <link>http://localhost:1313/inheritance/reading/index.html</link>
      <pubDate>Tue, 31 Jan 2023 15:39:38 -0600</pubDate>
      <guid>http://localhost:1313/inheritance/reading/index.html</guid>
      <description>Content Links Inheritance Inheritance in C# A Tale of Two Cats Inheriting from Abstraction Casting Testing Inheritance Class Diagrams </description>
    </item>
    <item>
      <title>Exercises: Inheritance</title>
      <link>http://localhost:1313/inheritance/exercises/index.html</link>
      <pubDate>Tue, 31 Jan 2023 15:39:38 -0600</pubDate>
      <guid>http://localhost:1313/inheritance/exercises/index.html</guid>
      <description>Work on these exercises in a new Visual Studio .NET Core console app. Name your solution Technology and make a project inside of it with the same name.&#xA;Class Design Create three classes inside your solution: Computer, Laptop, and SmartPhone&#xA;Before you start coding anything inside these classes, diagram how the three classes are going to be related to each other. You can start with the diagram below. Be sure to show how the base class extends each subclass.</description>
    </item>
    <item>
      <title>Studio: Fun With Quizzes</title>
      <link>http://localhost:1313/inheritance/studio/index.html</link>
      <pubDate>Tue, 31 Jan 2023 15:39:38 -0600</pubDate>
      <guid>http://localhost:1313/inheritance/studio/index.html</guid>
      <description>For this studio, you will design and build a console program that allows the user to take a quiz. This means you will have to create some questions and get some input from the user.&#xA;First, the questions. We want to be able to handle multiple types of questions:&#xA;Multiple choice: A question with a fixed set of possible answers. A user can only select one answer and only one answer is correct.</description>
    </item>
    <item>
      <title>Next Steps</title>
      <link>http://localhost:1313/inheritance/next-steps/index.html</link>
      <pubDate>Tue, 31 Jan 2023 15:39:38 -0600</pubDate>
      <guid>http://localhost:1313/inheritance/next-steps/index.html</guid>
      <description>Next Steps This was just an introduction to inheritance in C#. If you would like an additional review on this topic before starting the next chapter, check out the following articles.&#xA;C# Inheritance Inheritance in C# and .NET How Inheritance Works in C# â€“ with Code Examples </description>
    </item>
  </channel>
</rss>