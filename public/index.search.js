var relearn_search_index = [
  {
    "breadcrumb": "C# Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping",
    "content": "Content Links Types of Relationships A Primer on Lambda Expressions Creating a One-to-Many Relationship Walkthrough: One-to-Many Some Setup Creating a Many-to-Many Relationship Walkthrough: Many-to-Many ",
    "description": "Content Links Types of Relationships A Primer on Lambda Expressions Creating a One-to-Many Relationship Walkthrough: One-to-Many Some Setup Creating a Many-to-Many Relationship Walkthrough: Many-to-Many ",
    "tags": [],
    "title": "Reading",
    "uri": "/relationships-or-mapping/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "Types of Relationships Just as database tables can relate to each other, so can classes and objects. In fact, ORM translates relationships between objects into relationships between database rows.\nThis chapter introduces the tools needed to create meaningful relationships using ORM. Let’s consider the different types of relationships at a conceptual level. In later sections, we will learn how to implement these relationships using EntityFrameworkCore.\nFor the examples below, we use four classes:\nEvent - A class representing a coding event. EventCategory - A class representing categories of coding events. EventDetails - A class that encapsulates details about a single event, such as description, contact email, location, and so on. Tag - A piece of metadata labeling an event. You can think of these as topics that an event might include, such as C#, ASP.NET, or JavaScript. An event can cover many topics, so it can have many tags. The first two of these are familiar to you from our CodingEvents app. The EventDetails and Tag classes are new.\nOne-to-One The simplest type of relationship is the one-to-one relationship.\nThis occurs when each instance of type A may be related to only one instance of type B, and vice versa.\nNote In the following examples, arrows point in the direction of the relationship. If A points to B, then you can say that A knows about B.\nWhile relationships in SQL are bidirectional, relationships in programming languages are unidirectional. In other words, if A knows about B, then B doesn’t necessarily know about A.\nA one-to-one relationship between an Event object and an EventDetails object\nAn Event object should only have one collection of details, so it should only be related to one EventDetails object.\nSimilarly, details about an event are specific to that event, so an EventDetails object should only be related to one Event object.\nExamples The following pairs of things generally have one-to-one relationships:\nPeople / driver's licenses States / capital cities iPhones / serial numbers It is not required that each instance of type A be related to an instance of type B. For example, a person may not have a driver’s license.\nOne-to-Many and Many-to-One A one-to-many relationship occurs when each instance of type A may be related to more than one instance of type B, but each instance of B can only be related to a single instance of type A.\nA one-to-many relationship between EventCategory and Event objects\nIn this case, we say that A has a one-to-many relationship to B. A category can contain multiple items, therefore an EventCategory object may be related to multiple Event objects. But an event may only be in one category.\nExamples The following pairs of things generally have one-to-many relationships:\nBirth dates / people States / U.S. Representatives Model numbers / iPhones When discussing the inverse relationship, we say that B has a many-to-one relationship to A.\nA many-to-one relationship between Event and EventCategory objects\nA many-to-one relationship operates in the opposite direction of a one-to-many relationship.\nThe difference between the two is which side of the relationship knows about the objects on the other side.\nIn C# terms, this will translate into a property on one class that references the other.\nExamples Many-to-one relationships are simply the opposite direction of one-to-many. Therefore, each of the following pairs has a many-to-one relationship.\nPeople / birth dates U.S. Representatives / states iPhones / model numbers Many-to-Many Many-to-many relationships occur when each instance of type A can be related to multiple instances of type B, and vice versa.\nA many-to-many relationship between Event and Tag objects\nAn event can have multiple tags, and a tag may be associated with multiple events. Thus, we have a many-to-many relationship.\nExamples The following pairs of things generally have many-to-many relationships:\nBooks / authors Recipes / ingredients Actors / movies Check Your Understanding Question Match the following pairs with the appropriate relationship type:\na. car / manufacturer\nb. car / title\nc. car / driver\nd. car / tire\nQuestion True/False: Suppose two C# classes, A and B, are in a one-to-many relationship. Then class A must contain a property for instances of B and B must have a property for instances of A.\na. True\nb. False",
    "description": "Types of Relationships Just as database tables can relate to each other, so can classes and objects. In fact, ORM translates relationships between objects into relationships between database rows.\nThis chapter introduces the tools needed to create meaningful relationships using ORM. Let’s consider the different types of relationships at a conceptual level. In later sections, we will learn how to implement these relationships using EntityFrameworkCore.\nFor the examples below, we use four classes:",
    "tags": [],
    "title": "Types of Relationships",
    "uri": "/relationships-or-mapping/reading/types-of-relationships/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping \u003e Reading",
    "content": "Currently our app only saves data while it is running. Once you end the session and close the program, all of the data you provided disappears. We can make that data persistent by connecting your application to a database. This will retain the data even if the application is not running, and allow you to access it when you open a new session.\nLet’s connect our MVC application to a relational database and add persistent data storage to our apps. To do so, we need to use object-relational mapping.\nObject-Relational Mapping or ORM is a technique for converting data between C# objects and relational databases. ORM converts data between two incompatible type systems (C# and MySQL), such that each model class becomes a table in our database and each instance a row of the table.\nTo make ORM work in our C# applications, we need an object-relational mapper to convert between C# and MySQL. When we create and configure a new model class to be stored in a database, a mapper creates a MySQL query to make the corresponding table.\nExample Let’s think about this in CodingEvents.\nIn CodingEvents, we have the Events class that contains the following properties:\nId Name Description ContactEmail Now we want to store this information in a MySQL database. We can use ORM so that the database of our application has a table to contain all objects instantiated from the Events class.\nThe table called Events has four columns:\ninteger Id varchar Name varchar Description varchar ContactEmail. Now, let’s instantiate a C# Events object:\n1 public Events codeWithPride = new Events(\"Code With Pride\", \"Creating community for LGBTQIA+ technologists and allies\", \"info@launchcode.org\") Recall, the Id is set by the constructor at this time. We will learn more about this soon.\nHaving set up our application, we can add info about the Code with Pride event to our Events table. While we will write the code to add Code With Pride’s info to our database in C#, the frameworks and APIs that make ORM happen will run the following MySQL query for us:\n1 2 INSERT INTO Events (Name, Description, ContactEmail) VALUES (\"Code With Pride\",Creating community for LGBTQIA+ technologists and allies\", \"info@launchcode.org\"); Now Code with Pride and all the information we provided is stored in our MySQL database in the Events table!\nORM in ASP.NET One of the most widely used object-relational mappers available for C# and ASP.NET Core is Entity Framework Core. This framework makes use of data layers. When we learned about models , we learned that data layers add abstraction between models and the data we want to store. With Entity FrameworkCore, data layers take the form of classes that extend DbContext.\nBefore we add persistence to our data, it’s important to remember that: Models are NOT persistent data stores, and relational databases do NOT shape the C# objects we will be using. We want to make sure that the two remain separate.\nNote We’ll often shorten Entity Framework Core to EF. The “Core” in the name indicates that we’re talking about the version of EF that is compatible with ASP.NET Core.\nAdding ORM to CodingEvents To work with EF Core, we need to add it to the project.\nCurrently, Visual Studio 2022 (Windows and Mac) is typically installed with EF 6.0.X.\nVerify EF Core Tools are Present If you downloaded Visual Studio 2022 or later, let’s verify EF Core’s presence and version.\nYou can test that it has been installed in Visual Studio by running the following in your terminal.\ncd your way down into the project folders. Verify your location by running the ls command. You should see all the folders within your project.\nstudent-computer:CodingEvents student$ ls CodingEvents.csproj ViewModels Controllers Views Data appsettings.Development.json Models appsettings.json Program.cs bin Properties obj Startup.cs wwwroot When you are this level run the following command:\ndotnet efYou should see the followng output:\nstudent-computer:CodingEventsDemo student$ dotnet ef _/\\__ ---==/ \\\\ ___ ___ |. \\|\\ | __|| __| | ) \\\\\\ | _| | _| \\_/ | //|\\\\ |___||_| / \\\\\\/\\\\ Entity Framework Core .NET Command-line Tools 6.0.X //code continues ... Note We recommend using or installing EF Core version 6.0.11 or higher.\nTroubleshooting EF Core Tools If you are not able to see the Entity Framework Core logo, then try the following steps to troubleshoot the issue.\nOpen a terminal window using your terminal app outside of Visual Studio.\nOpen a terminal and run:\ndotnet tool install -g dotnet-efThis command installs a set of command-line tools for working with EF globally, which means it will be available for any ASP.NET project we use in the future. We will use the tools provided by this package to update our database schema after adding or changing model classes.\nOnce you have taken these steps, you are ready to set up the appropriate models and controllers for the application. We’ll do that in the next section.\nTo test that this install worked, run dotnet ef. The output should be a message displaying basic EF tool commands and options\nNote Note for Mac users only\nFor these tools to be accessible from the command line, they must be within your user path. We create or update your bash profile. Your bash profile is a text file that you can add any paths needed. You may add to this as you continue on your programming journey.\nOpen your ~/.bash_profile with this command:\nopen ~/.bash_profileThe ~ symbol is shorthand for your home directory, which is the directory you are in when you open a new terminal window.\nAdd the following line to the very bottom of your profile:\nexport PATH=\"$PATH:$HOME/.dotnet/tools/\" Save and close the file. Then close your terminal window and open a new one, so that the changes can take effect.\nTo test that this install worked, run dotnet ef. The output should be a message displaying basic EF tool commands and options.\nOnce you have taken these steps, you are ready to set up the appropriate models and controllers for the application. We’ll do that in the next section.\nCheck Your Understanding Question True/False: An ORM converts data between C# objects and relational databases.",
    "description": "Currently our app only saves data while it is running. Once you end the session and close the program, all of the data you provided disappears. We can make that data persistent by connecting your application to a database. This will retain the data even if the application is not running, and allow you to access it when you open a new session.\nLet’s connect our MVC application to a relational database and add persistent data storage to our apps.",
    "tags": [],
    "title": "Introduction to Object-Relational Mapping",
    "uri": "/orm-part-1/reading/orm-intro/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping",
    "content": "Content Links Introduction to Object-Relational Mapping Setting Up a Persistent Database Accessing Data Working with Data Stores Walkthrough: Connecting to the Database ",
    "description": "Content Links Introduction to Object-Relational Mapping Setting Up a Persistent Database Accessing Data Working with Data Stores Walkthrough: Connecting to the Database ",
    "tags": [],
    "title": "Reading",
    "uri": "/orm-part-1/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 16: Enums \u003e Reading",
    "content": "Many statically-typed programming languages provide a feature called enumeration types, or enum types for short. Enum types are special classes that can have only one of a set of fixed values, such as days of the week.\nImagine that we wanted to add a property to Event to specify which day of the week an event takes place. You might start by creating a new field:\n[Required] public string DayOfWeek { get; set; }As defined here, a user could submit any of the following values representing Wednesday:\n\"Wednesday\" \"wednesday\" \"Wed\" \"WED\" \"W\" Accepting data like this leads to many complications. For example, searching for all events taking place on Wednesday would need to account for all of these variations. And what happens if a user misspells “Wednesday”?\nWhen filling out forms on the web, you are used to seeing dropdown menus with prefilled values restricting the possible inputs. For example, in the United States, when filling out a shipping address form, a select element may be used to create a list of the states to insure that users select the correct abbreviation for their state of residence.\nLimiting the values that the user can select drastically reduces complexity and ensures that our application data remains clean and standardized. Enum types are one way to model fields like this.\nCreating an Enum Type Let’s see how we can create an enum type, or enum class.\nNote Recall that a class defines a new data type. Thus, the term “data type” can be used in place of “class”. We’ll typically call enum classes “enum types” since this is what most C# developers do.\nThe simplest enum type that we can define to represent days of the week looks like this:\n1 2 3 4 5 6 7 8 9 10 enum Day { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday } Using the enum keyword specifies that this class should be an enum type. In other words, it should only be able to take on one of a fixed set of values. Within the body of the class, we list the valid names (Sunday, Monday, etc.). Unless otherwise specified, each name refers to a value.By default, the values of an enum type will be integers beginning with 0. In fact, the enum above is very similar to this class:\n1 2 3 4 5 6 7 8 9 10 public class DayConst { public const int Sunday = 0; public const int Monday = 1; public const int Tuesday = 2; public const int Wednesday = 3; public const int Thursday = 4; public const int Friday = 5; public const int Saturday = 6; } To refer to Thursday, you can use the value DayConst.Thursday. Recall our switch example from earlier .\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 Console.WriteLine(\"Enter an integer: \"); string dayString = Console.ReadLine(); int dayNum = int.Parse(dayString); string day; switch (dayNum) { case 0: day = \"Sunday\"; break; case 1: day = \"Monday\"; break; case 2: day = \"Tuesday\"; break; case 3: day = \"Wednesday\"; break; case 4: day = \"Thursday\"; break; case 5: day = \"Friday\"; break; case 6: day = \"Saturday\"; break; default: // in this example, this block runs if none of the above blocks match day = \"Int does not correspond to a day of the week\"; break; } Console.WriteLine(day); This code can be refactored using DayConst:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 Console.WriteLine(\"Enter an integer: \"); string dayString = Console.ReadLine(); int dayNum = int.Parse(dayString); string day; switch (dayNum) { case DayConst.Sunday: day = \"Sunday\"; break; case DayConst.Monday: day = \"Monday\"; break; case DayConst.Tuesday: day = \"Tuesday\"; break; case DayConst.Wednesday: day = \"Wednesday\"; break; case DayConst.Thursday: day = \"Thursday\"; break; case DayConst.Friday: day = \"Friday\"; break; case DayConst.Saturday: day = \"Saturday\"; break; default: // in this example, this block runs if none of the above blocks match day = \"Int does not correspond to a day of the week\"; break; } Console.WriteLine(day); In essence, this code represents days of the week as fixed integer values, one for each day. Enum types are essentially a more robust version of this approach.\nLet’s revisit our Day enum type:\n1 2 3 4 5 6 7 8 9 10 enum Day { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday } We can declare a variable of type Day and it will only be allowed to take on one of the 7 defined values.\n1 2 3 4 5 // This works Day workWeekStart = Day.Monday; // This does not, throwing a compiler error Day workWeekEnd = \"TGIF\"; Enums are important because they provide type safety in situations where we want to restrict possible values. In other words, they eliminate the possibility of bad, or dirty, values.\nEnum Examples The world is filled with examples ripe for representation by enums. Here are a few from both the real world and the world of programming.\nExample Months of the year.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 enum Month { January, February, March, April, May, June, July, August, September, October, November, December } Example Given a model type like our Event class, enums can represent categories that model objects can fall into.\n1 2 3 4 5 6 7 enum EventCategory { Conference, Meetup, Workshop, Social } Example A common use of enums in programming is to set the log level of an application. The log level represents the types of log messages that should be displayed as the application runs.\nYou might only want to see critical error messages when running an application on a production server, but you may want to see many more messages, such as warnings and informational messages, when developing the application locally.\n1 2 3 4 5 6 7 enum LogLevel { Debug, Info, Warning, Error } An application can change the way it logs messages by changing the log level.\nCheck Your Understanding Question We mentioned above that all classes define a data type. Is the inverse of this statement true? In other words, do all data types correspond to a class? (Hint: Try to think of a data type that is NOT a class.)\nYes, everything in C# is a class. No, there are data types that do not correspond to a class. (Be sure to provide an example.) Question Which of the following would NOT be a good choice for an enum type?\nStates in the US Shoe sizes (using the American scale) Price of a gallon of milk Sections in a bookstore ",
    "description": "Many statically-typed programming languages provide a feature called enumeration types, or enum types for short. Enum types are special classes that can have only one of a set of fixed values, such as days of the week.\nImagine that we wanted to add a property to Event to specify which day of the week an event takes place. You might start by creating a new field:\n[Required] public string DayOfWeek { get; set; }As defined here, a user could submit any of the following values representing Wednesday:",
    "tags": [],
    "title": "Introduction to Enums",
    "uri": "/enums/reading/intro/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 16: Enums",
    "content": " Introduction to Enums Enums in Model Classes ",
    "description": " Introduction to Enums Enums in Model Classes ",
    "tags": [],
    "title": "Reading",
    "uri": "/enums/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 15: Viewmodels and Model Validation \u003e Reading",
    "content": "Now that we have an understanding for what a model is, we can focus on how to effectively pass information between the three elements of MVC applications. With our current MVC application, we can add new events and remove events. However, our application is also susceptible to run-time errors. Our view can accept any type of input and if we mistype something in our view, we can run into issues later down the line.\nA ViewModel is a model class designed specifically to be used in a view. By utilizing ViewModels in our application, we can make our views strongly-typed and add validation to forms to prevent bad user input. Also, if we have information we want to collect as part of a form, but not save as part of a model, we can store that data as a property of a ViewModel. An example of this would be if we have a form for users to create an account on our site. The form includes two fields: one for the password and one for confirming the new user’s password. While we only want to save the password and may only have a Password property in our model, we can add a ConfirmPassword property to the ViewModel so we can check that the two match before saving the user’s info. These benefits of ViewModels will help reduce potential errors in our application.\nRefactoring the Project To start with understanding why we may want to use a ViewModel, let’s refactor our code to use a model directly in our view. This will require some updates to our controllers and views.\nWe need to do the following steps:\nCreate our new ViewModel Update the Model Update our Index Action Method Update the Index View Update the Add and New Event Action Methods Update the Add View Model Let’s get started!\nCreating a ViewModel Add a ViewModels directory at the top level of the project.\nAdd a new class to the ViewModels directory and name it AddEventViewModel.\nAdd Name and Description properties to the new class. We can remove the constructor. We do not need it at this time.\nWe will need to declare the Name and Description as nullable. You do this by using the nullable value type ? after the modifiers. To see these in action, look at lines 7 and 8 in the code block below.\nCheck Your Code ",
    "description": "Now that we have an understanding for what a model is, we can focus on how to effectively pass information between the three elements of MVC applications. With our current MVC application, we can add new events and remove events. However, our application is also susceptible to run-time errors. Our view can accept any type of input and if we mistype something in our view, we can run into issues later down the line.",
    "tags": [],
    "title": "ViewModels and Passing Data Between Views",
    "uri": "/viewmodels/reading/viewmodels-intro/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 14: Models and Model Binding \u003e Reading",
    "content": "In the previous chapter, you learned about Razor, which displays data and an interface for a user. Before that, you learned about controllers . Remember that controllers determine what data to send to the the views. This data needs to come from some source and take some shape. Cue the models.\nWhat is a Model? A model represents the logic for accessing and storing the data used in an application. Properly constructed, models do not depend on any controllers or views. Models should be classes that are easy to reuse without modification.\nModels are not the data itself, but rather the logic that molds the data for a particular purpose. They dictate how we want to handle the data in an application-specific way. The data used in an application is often sourced from a database or an external data service. Data is typically application-agnostic. It is the work of the models we write to shape raw data into useful application information. This shaping of data to for the needs of a program is part of what is referred to as the business logic.\nConsider a physical address book (a model). The pages contain blank lines for names and addresses. Anyone (a controller) can pick up the book, retrieve the information, and write to the contact. The address book model does not depend on who picks it up and enters their contacts. The book just provides organization and storage logic. On the flip side, the same person can input the same contact data into a different book. So a model transforms raw information into something useful for a particular application.\nMVC: Putting it Together Model Shapes data to fit the needs of an application.\nView Displays data to the user. Via events, the user interacts with the view and updates the program data. The view communicates with the controller but not the model.\nController Directs the flow of information between the view and the model. It does not store the data or determine how to display it for the user. It passes information retrieved from the view to update the model. And it passes information retrieved from the model to update the view.\nTip Need further review? Check out MVC for Noobs .\nModel vs. Controller At this point, it might be tough to decide what code belongs in the model and what belongs in the controller. Here are some general guidelines. Any code that transfers data or responds to user actions belongs in the controller. Code that retrieves data from a database or organizes that data belongs with the model.\nSo far, CodingEvents handles all data inside of controller classes. However, most data manipulation should occur in model classes. So we need to make a distinction between these actions. For any manipulations that must occur regardless of a user’s actions, that code belongs in the model. For changes that vary depending on a user’s input, that code belongs in the controller.\nModel code defines the logic for processes that the user never needs to see. These include:\nThe mechanics for storing data. The mechanics for retrieving data. The mechanics for organizing data. Updating or manipulating the data independent of any controller or view actions. Controller code handles requests made by the user. These include:\n“Please retrieve this information from the model.”, “Please store this according to the rules of the model.”, “Please delete this item.”, “Please change this item.”, “Please display this.”, “Please modify this data in a novel way”. Remember, the controllers are the traffic cops. These classes direct information from one place to another. Like a model, a controller does not permanently store data. Instead, it either sends the information to the model for shaping or to the view for display.\nCheck Your Understanding Question If we use baking as an analogy for an MVC project, which of the following items best represents a model?\nThe bread ingredients: flour, water, yeast, salt Mixing and shaping the ingredients together Baking the loaves into the final product Eating the bread Question If we use a library as an analogy for an MVC project, which of the following items best represents a model?\nThe books on the shelves The Dewey Decimal storage system The librarians The book readers ",
    "description": "In the previous chapter, you learned about Razor, which displays data and an interface for a user. Before that, you learned about controllers . Remember that controllers determine what data to send to the the views. This data needs to come from some source and take some shape. Cue the models.\nWhat is a Model? A model represents the logic for accessing and storing the data used in an application. Properly constructed, models do not depend on any controllers or views.",
    "tags": [],
    "title": "Models in MVC",
    "uri": "/aspdotnet-model-classes/reading/model-intro/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 14: Models and Model Binding",
    "content": " Models in MVC Create a Model Class Models and Data Model Binding Video Walkthrough ",
    "description": " Models in MVC Create a Model Class Models and Data Model Binding Video Walkthrough ",
    "tags": [],
    "title": "Reading",
    "uri": "/aspdotnet-model-classes/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 12: Tools in Visual Studio \u003e Reading",
    "content": "By now, you may have noticed a .csproj file in your C# project folders. This is a C# Project file type. It contains instructions on how to build the project. Visual Studio includes another Microsoft program called MSBuild. MSBuild creates the code to build your application so that it can be run.\nAn automated build tool, such as MSBuild, is responsible for tasks like:\nCompiling the source code Managing dependencies Testing protocol Packaging the executable program for deployment MSBuild is included in the Visual Studio IDE and has so far been doing its work under the radar. Other build tools are available for us to use in C# projects. However, like in the unit testing chapter, we will stick to the tools provided to us with the Visual Studio IDE.\nFor more on MSBuild, check out the documentation .\nThe Project File The .csproj file is dynamically generated by MSBuild when the application is built. The file is written in XML (Extensible Markup Language). XML is another member of the markup language family, like HTML. It is most often used for transferring data.\nThe four principal elements of a project file are:\nTasks: Units of executable code. Any build action that needs to take place will be done via tasks. The other elements pass information into tasks. Targets: Group and order related tasks for execution. Properties: Key/value pairs used for build configuration information. Items: Used to input resources, such as files, into the build system. So far, in our simple projects, there is not much complexity in what MSBuild and the .csproj file need to do. Our C# code is designed to be tested and executed within the IDE with very few dependencies. When you are working as a C# developer on the job, things will start to get more complicated. You will likely need at least three target environments for your application:\ndebugging in the IDE. a development server for testing your deployed program before it is released to the user. the final production environment. The .csproj file is where any project dependencies are stored and also organized.\nThese will have different responsibilities in those different environments. So while we don’t do much with the project file yet, we will later on.\nThe four elements summarized above provide the details needed to manage larger projects.\nTo view a project file, right click on the project’s name in the Visual Studio file menu. From the dropdown menu, select Edit Project File.",
    "description": "By now, you may have noticed a .csproj file in your C# project folders. This is a C# Project file type. It contains instructions on how to build the project. Visual Studio includes another Microsoft program called MSBuild. MSBuild creates the code to build your application so that it can be run.\nAn automated build tool, such as MSBuild, is responsible for tasks like:\nCompiling the source code Managing dependencies Testing protocol Packaging the executable program for deployment MSBuild is included in the Visual Studio IDE and has so far been doing its work under the radar.",
    "tags": [],
    "title": "MSBuild",
    "uri": "/vstools/reading/msbuild/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 12: Tools in Visual Studio",
    "content": " MSBuild NuGet Debugger ",
    "description": " MSBuild NuGet Debugger ",
    "tags": [],
    "title": "Reading",
    "uri": "/vstools/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views",
    "content": "Content Links Templates Creating a Template Using a Template Iterating in a Template Conditionals in a Template Walkthrough: Wrapping up HelloASPDotNET Razor Forms The Shared Directory Static Resources Bootstrap Walkthrough: Begin CodingEvents ",
    "description": "Content Links Templates Creating a Template Using a Template Iterating in a Template Conditionals in a Template Walkthrough: Wrapping up HelloASPDotNET Razor Forms The Shared Directory Static Resources Bootstrap Walkthrough: Begin CodingEvents ",
    "tags": [],
    "title": "Reading",
    "uri": "/razor-views/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views \u003e Reading",
    "content": "Take a look at the homepage for WebElements . The content includes text, images, a navigation bar, a search box, linked menu options at the bottom of the page, and 118 carefully colored boxes with links—one for each element on the periodic table. All of this content is very deliberately arranged and styled.\nImagine your boss tasks you with creating this website. Setting up the HTML tags for the navigation bar would be straightforward, but what about the element boxes? You would need to make 118 similar structures, but with different text, links, and colors. Trying to make the table structure work would be tedious at best, and excruciatingly difficult at worst.\nAlso, what if a new element gets discovered, or some of the data for the elements changes? Updating the text, colors, layout, etc. means adjusting those items in the HTML. Also, if that information appears in other areas of the website, then you need to modify that code as well.\nWhew! Changing the website rapidly becomes problematic, especially since it contains lots of data and consists of multiple pages. This is where templates come in to play. They help automate the tasks required to build and maintain a website.\nTemplates are Frameworks A template provides the general structure for a web page. Templates outline for us where different elements get placed on the page. Any page made with a template includes its elements and follows its rules. If we add content to the template or modify it in some way, all pages made from that template will reflect the changes.\nLet’s see how using a template makes our lives easier.\nNo Template Example The code below displays a simple list. It defines the location for the heading and each \u003cli\u003e element, in addition to a couple of fun links. The CSS file (not shown) specifies the font, text size, colors, etc.\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u003cbody\u003e \u003ch1\u003eJava Types\u003c/h1\u003e \u003cdiv class=\"coffeeList\"\u003e \u003col\u003e \u003cli\u003eFrench Roast\u003c/li\u003e \u003cli\u003eEspresso\u003c/li\u003e \u003cli\u003eKopi Luwak\u003c/li\u003e \u003cli\u003eInstant\u003c/li\u003e \u003c/ol\u003e \u003c/div\u003e \u003chr\u003e \u003cdiv class=\"links\"\u003e \u003ch2\u003eLinks\u003c/h2\u003e \u003ca href=\"https://www.launchcode.org/\"\u003eLaunchCode\u003c/a\u003e \u003cbr\u003e \u003ca href=\"https://en.wikipedia.org/wiki/Coffee\"\u003eCoffee\u003c/a\u003e \u003c/div\u003e \u003c/body\u003e We could drastically improve the appearance and content of the page by playing around with the tags, classes, styles and text. However, any change we want to make needs to be coded directly into the HTML and CSS files, and this quickly becomes inefficient.\nA Better Way: Template Example Recall that a template represents a view in the MVC world. It sets up a structure to display the data delivered by the controller, and the template guides where that information goes. This provides much more flexibility than hard-coding, since data can change based on a user’s actions.\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 \u003cbody\u003e \u003ch1\u003e{templateInstructions}\u003c/h1\u003e \u003cdiv class=\"coffeeList\"\u003e \u003cul\u003e \u003cli {templateInstructions}\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003chr\u003e \u003cdiv class=\"links\"\u003e \u003ch2\u003eLinks\u003c/h2\u003e \u003ca href={templateInstructions}\u003e\u003c/a\u003e \u003c/div\u003e \u003c/body\u003e This HTML looks similar to the previous example, but it replaces some of the code with instructions.\n{templateInstructions} refers to instructions and data passed into the template by the controller. The curly brackets, {}, do not indicate real template syntax here. We will address how to write Razor template syntax in the following pages. Razor is the templating language used in this book. The brackets are used here to indicate that the instructions come from another source and are not plain HTML. Template instructions like these will automatically create HTML tags in order to display or update the information.\nBy using a template to build the website, changing the list or coffee types above involves altering something as simple as a C# List or object. After changing that data, the template does the tedious work of modifying the HTML.\nTemplates Support Dynamic Content Besides making it easier to organize and display content, templates also allow us to create a dynamic page. This means that its appearance changes to fit new information. For example, we can define a grid for displaying photos in rows of 4 across the page. Whether the images are of giraffes, tractors, or balloons does not matter. The template sets the layout, and the code feeds in the data. If more photos are found, extra rows are produced on the page, but each row shows 4 images.\nIn the last lesson, you built a simple website that displayed a welcome message and responded to changing values for a user’s name. You did NOT apply a template for this page, and it is possible to create an interactive site without one. However, as your projects grow in size, templates make it MUCH easier to maintain your work.\nTemplates Provide Structure, Not Content Templates allow us to decide how to display data in the view, even if we do not know exactly what that data will be. Information pulled from forms, APIs, or user input will be formatted to fit within our design.\nIn the figure, the black outlines represent different areas defined by the template—spaces for lists, images, links, etc. As the controller feeds data into the template, the appearance of the page changes.\nNote If the template expects data for a list, but the controller does not provide the information, that part of the screen remains empty.\nCheck Your Understanding Question True/False: Templates make your life easier as a programmer.\nQuestion What is the name of the templating syntax we will use in this book?\nHTML templateInstructions Razor Blazor ",
    "description": "Take a look at the homepage for WebElements . The content includes text, images, a navigation bar, a search box, linked menu options at the bottom of the page, and 118 carefully colored boxes with links—one for each element on the periodic table. All of this content is very deliberately arranged and styled.\nImagine your boss tasks you with creating this website. Setting up the HTML tags for the navigation bar would be straightforward, but what about the element boxes?",
    "tags": [],
    "title": "Templates",
    "uri": "/razor-views/reading/templates/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 11: Exceptions \u003e Reading",
    "content": "Like most programming languages, C# includes exceptions and exception handling tooling. Some exception objects are provided by .NET itself. Other exception objects we may get from external C# libraries. We may even write these objects ourselves.\nExceptions in C# are objects derived from the System.Exception class. You see exception objects at runtime when some event takes place outside of the expected flow of our code. When you want to explicitly call an exception in your code, you do so with the throw keyword. We’ve actually done this before in this book and will return to that example shortly.\nMaybe you see the term “exception” and instinctively groan or roll your eyes? Isn’t programming only enjoyable when it works? While it would be nice if our code ran perfectly every time, exceptions are a key component of a healthy codebase. When an exception arises, we, as programmers, can use the info to debug our code. For our fellow programmers, the exceptions we provide give them necessary intel on how our app runs and is meant to be used.\nWhen Exceptions Arise You may have seen exceptions in C# or another programming language already, perhaps in one of these scenarios:\nFailure to connect to services external to your application, such as a database or API. Failure to read or write to or from a file. Failure to convert data, such as trying to convert something like “dog” to an int type. Failure to reach an actual object. Note This last scenario is a null pointer. This is an object reference that doesn’t actually contain an object.\nIndeed, we have even used exceptions in this book already. Recall the temperature example where we throw a built-in exception when a provided argument falls outside of an acceptable range. Later, we refine our temperature app and throw the more targeted ArgumentOutOfRangeException.\nThe example below is found in the TemperatureExceptions project in the example code repo .\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class Temperature { private double fahrenheit; public static double AbsoluteZeroFahrenheit { get; } = -459.67; public Temperature(double fahrenheit) { Fahrenheit = fahrenheit; } public double Fahrenheit { get { return fahrenheit; } set { if (value \u003c AbsoluteZeroFahrenheit) { throw new ArgumentOutOfRangeException(\"Value is below absolute zero\"); } fahrenheit = value; } } } The program provides a plan for what to do in the event that bad data is passed into a class’s field. Imagine that a user or fellow programmer unintentionally sets a Fahrenheit value outside of the appropriate range.\nTry this yourself to witness the breaking exception:\nExample Input:\nTemperature insideTemp = new Temperature(73); Console.WriteLine(insideTemp.Fahrenheit); Temperature outsideTemp = new Temperature(-8200); Console.WriteLine(outsideTemp.Fahrenheit);Output:\nUnhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Parameter 'Value is below absolute zero') at TemperatureExceptions.Temperature.set_Fahrenheit(Double value) in /...file location.../Temperature.cs:line 25 at TemperatureExceptions.Temperature..ctor(Double fahrenheit) in /...file location.../Temperature.cs:line 11 at Program.\u003cMain\u003e$(String[] args) in /...file location.../Program.cs:line 6 Above, the Temperature constructor predictably sets the Fahrenheit value of insideTemp and throws an exception when provided a Fahrenheit value outside of the appropriate range. We don’t see any results of the print statement on the input’s line 5 since the exception has caused the program to stop running.\nWhen we throw an exception like in the example above, we flag the anomalous circumstance. If we choose to do nothing when the exception is thrown, the program will stop and a record of the exception can be found in the stack trace. Alternatively, we can handle an exception and offer an alternative action, bypassing the need to stop the program. We’ll cover how to handle exceptions on the next page.\nThis is a common reason to include exception handling in your code. User input opens the door to a variety of erroneous figures and good programs account for this uncertainty. Without exceptions in these circumstances, a small typo could lead to any number of errors down the stack trace.\nWhen to Use Exceptions It is wise to use an exception if you find that there is some level of chance involved in your program. This could be a situation where a variable is dependent on user input or a connection to another service.\nYou may want to address those uncertainties in a different fashion. With our temperature app for example, rather than throwing an exception, we can add a conditional statement to tell the user not to set the Fahrenheit value to an unacceptable level. This is perfectly acceptable if the app in production allows for such a message. As you will see on the next page, exception handling works very similarly to conditional statements like this.\nThere are many places where user-directed error messages simply won’t be appropriate. For example, what if the value being set doesn’t come from a user but from a different method in the program? In a situation like this, where the anomaly is not visible to the user, an exception conveys the issue to fellow programmers who are using our codebase.\nOr another hypothetical. What if managing the variety of errors that may arise is outside the scope of the project? In these cases where we do not, or cannot, make up for the edge cases with coded solutions, we can throw an exception. Exceptions are an informed way to convey the constraints of your program.\nCheck Your Understanding Question What is the action of invoking an exception called?\nexcepting catching throwing handling Question True/False: Encountering an exception will always result in terminating a running program.",
    "description": "Like most programming languages, C# includes exceptions and exception handling tooling. Some exception objects are provided by .NET itself. Other exception objects we may get from external C# libraries. We may even write these objects ourselves.\nExceptions in C# are objects derived from the System.Exception class. You see exception objects at runtime when some event takes place outside of the expected flow of our code. When you want to explicitly call an exception in your code, you do so with the throw keyword.",
    "tags": [],
    "title": "Introduction to Exceptions",
    "uri": "/exceptions/reading/exceptions-intro/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 11: Exceptions",
    "content": "Content Links Introduction to Exceptions Handling Exceptions Common Exception Objects ",
    "description": "Content Links Introduction to Exceptions Handling Exceptions Common Exception Objects ",
    "tags": [],
    "title": "Reading",
    "uri": "/exceptions/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 9: Introduction to ASP.NET \u003e Reading",
    "content": "So far, we have been designing our applications by diagramming classes, drawing connections, and abstracting via interfaces. This practice benefits us because we can start seeing issues before we start coding. Many software developers start their applications with this process. Before we start diagramming our Cat class and our HouseCat class, we decide on the template for our design that we want to use. These design templates that are abstract solutions to common software architecture problems are called design patterns. Design patterns provide a set of conventions that we follow to build an application.\nModel-View-Controller (MVC) is a design pattern where the programming logic behind the application is broken down into 3 components: models, views, and controllers. A model handles the data and business logic of the application. A view handles the user interface elements. A controller passes information from the models to the views. Controllers are the traffic cops of the application, capable of passing data back and forth to the browser in MVC web applications. This process will be covered in depth later on in this chapter.\nBecause MVC breaks down all of the programming logic of an application into three digestable components, we can use this particular design pattern to make extensible applications. We also use MVC because it separates the components of the programs that the user interacts with from the underlying business logic.\nASP.NET ASP.NET Core is an extension of .NET Core and is used to build web applications. ASP.NET Core MVC is the framework that allows us to build web applications in a way that uses the MVC design pattern. Visual Studio has an embedded server so it is easy for us to run our applications and get started. This server picks the port number to run the app.\nWarning In this book, the port number we use is 5001. If your port number is different from any of the walkthrough materials, that will not affect the output of your project. Visual Studio uses the first available port on your computer to run your project which is why your port number may vary.\nNote Throughout this book, we will refer to ASP.NET Core MVC as ASP.NET or ASP.NET MVC. This is purely for the sake of brevity. When you see “ASP.NET” or “ASP.NET MVC”, we are talking about ASP.NET Core MVC.\nHow We Teach ASP.NET The following video is the first in a series designed to help you code your first ASP.NET application. We will be building this app over the next several chapters, finishing in Views chapter . The video below provides an overview of simple application routing via the use of controllers along with a walkthrough of what the finished app will look like. In subsequent videos in this series, we ask you to code along for maximum absorption of the topics introduced. A summary of the content introduced will follow each of these videos.\nIntro to ASP.NET - Video Note This video is demonstrating the final output of the HelloASPDotNET project. Use the instructions on the next page to initialize your own HelloASPDotNET MVC project. As you work through the next few chapters, you will create the routes seen in the video.",
    "description": "So far, we have been designing our applications by diagramming classes, drawing connections, and abstracting via interfaces. This practice benefits us because we can start seeing issues before we start coding. Many software developers start their applications with this process. Before we start diagramming our Cat class and our HouseCat class, we decide on the template for our design that we want to use. These design templates that are abstract solutions to common software architecture problems are called design patterns.",
    "tags": [],
    "title": "Design Patterns, MVC, and ASP.NET, Oh My!",
    "uri": "/asp-net-intro/reading/asp-dotnet-intro/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 9: Introduction to ASP.NET",
    "content": "Content Links Design Patterns, MVC, and ASP.NET, Oh My! Create a New ASP.NET Project ",
    "description": "Content Links Design Patterns, MVC, and ASP.NET, Oh My! Create a New ASP.NET Project ",
    "tags": [],
    "title": "Reading",
    "uri": "/asp-net-intro/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 10: Controllers and Routing",
    "content": " Simple Controllers Controllers with Parameters Controllers with Forms Cleaning Up Your Controllers Video Walkthrough ",
    "description": " Simple Controllers Controllers with Parameters Controllers with Forms Cleaning Up Your Controllers Video Walkthrough ",
    "tags": [],
    "title": "Reading",
    "uri": "/aspdotnet-controllers-and-routes/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 10: Controllers and Routing \u003e Reading",
    "content": "The first of the MVC elements we’ll work on implementing are the controllers. Recall that controllers are like the traffic cops of our application. They handle the requests made from users interacting with the application’s view and update model data accordingly. Conversely, changes to model data are sent to the view via controller methods. When the client issues an HTTP request via a URL, we want to make sure that the URL leads to the correct controller so we get an appropriate response. A route is the mechanism by which a request path gets assigned to a controller within our application.\nNote Do HTTP requests and responses feel unfamiliar? If you’re feeling rusty on these topics, it’s a good idea to brush up now, as routing requires a foundational understanding of HTTP data transfer.\nHere’s our introduction to HTTP for reviewing the concepts.\nControllers and Static Responses Controller In ASP.NET, we’ll organize controller code into the provided Controllers directory. Some tools may depend on us following the convention of the MVC design pattern, so it is important to put our controller code in this directory. If you want to change something about the provided structure, be sure to double check the documentation to make sure a tool does not depend on you following it!\nTo designate a given class as a controller within the ASP.NET framework, we extend the Controller class. The Controller class provides us with the necessary members and methods to manage traffic between the three components in our MVC application.\npublic class HelloController : Controller { // class code here ... }Controllers Map to Requests Controllers need to handle HTTP requests coming in and routes are a key component of that process. ASP.NET MVC has two different ways to map these routes: conventional routing and attribute routing. Conventional routing establishes the routes as endpoints in one of the application’s configuration files. Attribute routing establishes the routes using C# attributes that are placed in the controller file.\nRoutes in conventional routing are setup via endpoints in a configuration file called Program.cs. When an HTTP request comes in, routing matches the request with an endpoint. Endpoints designate the controller action that executes when the appropriate HTTP request comes into the application.\nWhen we created a new ASP.NET application, without adding any code, we were immediately able to run it. This is because the MVC application we start out with already has the routing and endpoints set up. When we open the application, we see in the Controllers directory that Microsoft has a preconfigured HomeController. Straight out of the box, ASP.NET is set up to use conventional routing with a configured default route that maps to the HomeController. While the default route maps to localhost:5001, when we are using conventional routing, our routes follow the same general pattern:\nlocalhost:5001/\u003ccontroller\u003e/\u003caction\u003e This pattern is key in conventional routing and something to commit to memory. To see the result of any given action method in a controller, we can count on this pattern. Navigating to localhost:5001/home/index, we see the result of the Index() method, a view. If we added a new method, Hello(), to the HomeController, we would see the result of that method at localhost:5001/home/hello.\nNote Throughout this book, we will be using attribute routing to break the pattern established by conventional routing. However, if you want to investigate further on how to use an endpoint for a rule-breaking route in conventional routing, Microsoft has a great article on the subject. For example, endpoints preconfigured in Program.cs is how we can navigate to localhost:5001 and localhost:5001/Home/Index to see the same page.\nRemember: Program.cs contain the endpoints in an ASP.NET 6.0 application.\nWhen adding a new controller, such as HelloController, we need to make sure that routing is properly configured whether we use conventional routing or attribute routing. We want to start by adding a new action method to HelloController. Action methods are the public methods in a controller class. Action methods respond at a specific route and that response can be an update to a view, sending new data to a model, returning some simple HTML, and so on. When we are creating a new action method, we want to think about what route the method needs to respond at, what request type the action method should respond to, and what that response entails. Let’s start by adding the following Index() method:\n1 2 3 4 5 6 // GET: /\u003ccontroller\u003e/ public IActionResult Index() { string html = \"\u003ch1\u003e\" + \"Hello World!\" + \"\u003ch1\u003e\"; return Content(html, \"text/html\"); } Every time you add a new action method, you should write a comment above it to make note of the route that you want the method to respond to and the type of request that it should respond to at that route. With conventional routing, the action methods can respond to different types of requests at the given route. So even though we made a note that we want the Index() method to respond to GET requests at the route, localhost:5001/hello, the Index() method could also respond to a POST, PUT, or DELETE request at that route. Attribute routing is a way for us to specify which request type the method can respond to. But for now, let’s run the app and navigate to localhost:5001/hello to check our work.\nWarning Conventional routing makes use of the controller’s name and action method’s name. If you mistype either in the URL when testing out your application, you will run into an error.\nWe also want to make use of attribute routing in our new HelloController. To do so, we can add attributes to our Index() method. As you may recall from the chapter on unit testing , attributes in C# lie somewhere between code and comments. While an attribute cannot change the code inside the method or class, an attribute in attribute routing does supply critical information about routes and request types. Attribute routing is powerful because it does not depend on any endpoint mapping info in Program.cs, can defy the pattern established by conventional routing, and specify one request type for a method to respond to.\nASP.NET has many different attributes that we can use in our controllers. For a more in-depth catalog of different attributes, check out the documentation .\nAs we noted above, we want the Index() method to respond to a GET request at a specified route. Every time we write an action method, we should be thinking about what type of request the action method should respond to. Once we have noted our decision about the request type in a comment, we could add an HTTP verb attribute above the action method. While we know that our Index() method can respond to GET requests at localhost:5001/hello, we should always be adding HTTP verb attributes to action methods for practice. As our controllers grow in complexity, HTTP verb attributes grow in importance! We are going to focus on action methods that respond to GET and POST requests for now. An [HttpGet] attribute is used for action methods responding to GET requests and an [HttpPost] attribute is used for action methods responding to POST requests.\nThe route we now want to go to see the result of the Index() method is localhost:5001/helloworld. We will use an [HttpGet] attribute to specify that the method will respond to a GET request. We also want to use a [Route(\"path\")] attribute. [Route(\"path\")] is used above the action method to establish the route that maps to that method.\nLet’s see how we can use these attributes in our HelloController class.\n1 2 3 4 5 6 7 8 9 10 class HelloController : Controller { [HttpGet] [Route(\"/helloworld/\")] public IActionResult Index() { string html = \"\u003ch1\u003e\" + \"Hello World!\" + \"\u003ch1\u003e\"; return Content(html, \"text/html\"); } } On line 4, you may have noted that we did not include localhost:5001 in the path we used in our [Route(\"path\")] attribute. The path portion of a URL is a specific section that comes after the host and port. If you want a quick refresher on the structure of a web address, check out this section from our introduction to HTTP.\nNow when we run our application, we can head over to localhost:5001/helloworld to see the result. If we head over to the route that was mapped through conventional routing, localhost:5001/hello, we will find a broken page. The result is a simple web page with one heading that says “Hello World!”.\nNote While the book focuses on attribute routing, in this chapter, we will map our routes with both approaches. Many applications contain a combination of both conventional and attribute routing. We encourage you to try out both approaches to make sure that you can recognize and understand both approaches to routing.\nNow that our new controller and action method are working, we can take a closer look at the Index() method. Index() above returns an unfamiliar type, IActionResult. We will be using IActionResult quite a bit in our applications and it is an important interface for us to be aware of.\nIActionResult IActionResult is an interface in the ASP.NET framework and often times the return type of action methods. When we specify the return type as IActionResult, the returned value dictates what the client will display after the action is complete. We can use IActionResult to get the client to display plain text or other data types. In a later section on views, we will use IActionResult to return HTML templates. We will only scratch the surface of what IActionResult can do so for now, let’s focus on Content. Content is a class that implements the IActionResult interface.\nIn our Index() method, we want to return a simple string of HTML to be displayed on the webpage. We use Content() to specify which string we want to use for our content and we specify the content type with \"text/html\". When using Content(), we need to specify the content type in order the page to render how we want it to!\nNote For more info on the different types of results we could specify as return types, check out this article !\nCheck Your Understanding Question True/False: The Controller class does not have to be extended to classify a class as a controller.\nQuestion Which of the following is true about controllers?\nControllers handle the data storage of an MVC app. Controllers manage what the user of an MVC application sees. Controllers relay the messages between data and views in an MVC application. Controllers determine what information can be submitted in an online form. ",
    "description": "The first of the MVC elements we’ll work on implementing are the controllers. Recall that controllers are like the traffic cops of our application. They handle the requests made from users interacting with the application’s view and update model data accordingly. Conversely, changes to model data are sent to the view via controller methods. When the client issues an HTTP request via a URL, we want to make sure that the URL leads to the correct controller so we get an appropriate response.",
    "tags": [],
    "title": "Simple Controllers",
    "uri": "/aspdotnet-controllers-and-routes/reading/controllers-simple/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 8: Interfaces and Polymorphism \u003e Reading",
    "content": "The final pillar of object-oriented programming that we’ll explore is polymorphism.\nPolymorphism Polymorphism is an object-oriented mechanism that allows for objects of different types to be used in the same way.\nWe’ve already encountered polymorphism made possible by inheritance when talking about casting with our Cat and HouseCat classes. In that case, we stored an object of type HouseCat in its compatible type, Cat.\nLet’s take a closer look at how polymorphism might work in our cat-centric application.\nExample Suppose we had a CatSitter class like the one below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class CatSitter { public Cat Pet { get; set; } public CatSitter(Cat pet) { Pet = pet; } public void FeedTheCat() { // ...code to prepare the cat's meal... Pet.Eat(); } } The method FeedTheCat uses the property Pet, which is of type Cat. Since a HouseCat is a Cat via inheritance, it is perfectly acceptable to use an instance of HouseCat to fill the Pet property.\n1 2 3 4 HouseCat suki = new HouseCat(\"Suki\", 12); CatSitter annie = new CatSitter(suki); annie.FeedTheCat(); Similarly, FeedTheCat can accept Tiger instances as well. This is because the only thing that the method requires is that the input parameter has the methods defined within Cat. Via inheritance, both HouseCat and Cat satisfy this requirement.\nIn addition to using classes to code in a polymorphic way, we can use interfaces.",
    "description": "The final pillar of object-oriented programming that we’ll explore is polymorphism.\nPolymorphism Polymorphism is an object-oriented mechanism that allows for objects of different types to be used in the same way.\nWe’ve already encountered polymorphism made possible by inheritance when talking about casting with our Cat and HouseCat classes. In that case, we stored an object of type HouseCat in its compatible type, Cat.\nLet’s take a closer look at how polymorphism might work in our cat-centric application.",
    "tags": [],
    "title": "Introduction",
    "uri": "/interfaces-and-polymorphism/reading/introduction/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 8: Interfaces and Polymorphism",
    "content": " Introduction Interfaces Interfaces and Abstract Classes Interfaces in the Wild Unit Testing and Interfaces ",
    "description": " Introduction Interfaces Interfaces and Abstract Classes Interfaces in the Wild Unit Testing and Interfaces ",
    "tags": [],
    "title": "Reading",
    "uri": "/interfaces-and-polymorphism/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "Inheritance is the second of the four pillars of object-oriented programming that we encounter.\nHere’s a definition: inheritance is a mechanism within object-oriented programming that allows one class to be based on another class, thus receiving its properties and behaviors.\nNote Inheritance is also sometimes referred to as subclassing.",
    "description": "Inheritance is the second of the four pillars of object-oriented programming that we encounter.\nHere’s a definition: inheritance is a mechanism within object-oriented programming that allows one class to be based on another class, thus receiving its properties and behaviors.\nNote Inheritance is also sometimes referred to as subclassing.",
    "tags": [],
    "title": "Inheritance",
    "uri": "/inheritance/reading/inheritance-oop/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 7: Inheritance",
    "content": "Content Links Inheritance Inheritance in C# A Tale of Two Cats Inheriting from Abstraction Casting Testing Inheritance Class Diagrams ",
    "description": "Content Links Inheritance Inheritance in C# A Tale of Two Cats Inheriting from Abstraction Casting Testing Inheritance Class Diagrams ",
    "tags": [],
    "title": "Reading",
    "uri": "/inheritance/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 5: Classes Part 2 \u003e Reading: Classes Part 2",
    "content": "In the previous chapter, we used fields to store data within a class, and we explored how to access and modify the values of those fields.\nNow, we will explore several ways to configure fields based on their intended use.\nYou will find the example code in the csharp-web-dev-examples repo . Be sure to try what you learn before moving on the the next section.\nReadonly Fields A readonly field is one that cannot be changed once it is initialized. This means slightly different things for value and reference types. We create readonly fields by declaring them with the readonly keyword.\nWe cannot change the value of a readonly value field (readonly int, readonly double, etc.) after it is initialized.\nSimilarly, we cannot assign a new object to a readonly reference field (readonly ClassName, for example) after initialization. However, because objects are reference types and not value types, we can change the values within the object itself.\nHere are some examples to illustrate. Each class would normally be in its own file, but we present them side-by-side for convenience. Additionally, we declare each field public to minimize the example code and more clearly demonstrate where compiler errors would occur.\nCode for the example below can be found in theReadonlyExample in the Classes-Part-2 solution.\nExample In addition to Program.cs, we have two classes in a FinalFields project, FinalFields and FortyTwo.\nFortyTwo contains one field:\n6 public int intValue = 42; FinalFields contains three fields:\n6 7 8 public readonly int intValue = 42; public readonly double doubleValue; public readonly FortyTwo objectValue = new FortyTwo Let’s see what happens when we try to reassign values to our readonly fields in Program.cs.\n8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 FinalFields demo = new FinalFields(); // This would result in a compiler error because IntValue has already been initialized. demo.intValue = 6; // This isn't allowed since we didn't initialize DoubleValue in the class declaration. demo.doubleValue = 42.0; // This would result in a compiler error. demo.doubleValue = 6.0; // This would result in a compiler error, since we're trying to // give objectValue a different object value. demo.objectValue = new FortyTwo(); // However, this is allowed since we're changing a field // inside the final object, and not changing which object // objectValue refers to. demo.objectValue.intValue = 6; Readonly fields help to prevent accidentally (or intentionally) changing the value of a field after it is initialized. As such, readonly fields may NOT have setters.\nStatic Fields A static field is one that is shared by all instances of the class, and it is declared with the static keyword.\nFor example, in our Temperature class there is no reason for each Temperature object to hold its own copy of the double absoluteZeroFahrenheit. That value remains constant in every class instance. Because of this, we make it a static field.\nPrevious examples used the static keyword with both fields and methods, but since this discussion is focused on class data, let’s focus on static fields for now.\nA Temperature Example Inside the Classes-Part-2 solution, you will find the following example in the TemperatureExample project. Try it out as you read this section.\n4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public class Temperature { private double fahrenheit; public static double absoluteZeroFahrenheit { get; } = -459.67; public double Fahrenheit { get { return fahrenheit; } set { if (value \u003c absoluteZeroFahrenheit) { throw new ArgumentOutOfRangeException(\"Value is below absolute zero\"); } fahrenheit = value; } } } Static fields cannot be referenced by class instances, but a static field can be referenced by the type. We can see this in the following example.\nExample Try this out for yourself in the example code repo. Print the messages from Program.cs using fields from the Temperature class.\n// If the static field is public, we can do this Console.WriteLine(\"Absolute zero in F is: \" + Temperature.absoluteZeroFahrenheit); // If we have an object named \"temp\" of type Temperature, we cannot do this. Console.WriteLine(\"Absolute zero in F is: \" + temp.absoluteZeroFahrenheit); A Student Example In the next example, you may add on to the Student project you created in the pervious chapter or start coding along in StudentExample project found in the Classes-Part-2 solution.\nExample As another example, we might also provide a third constructor for our Student class that only requires the student’s name. Theoretically, the StudentId field would (or could) be generated by the class itself.",
    "description": "In the previous chapter, we used fields to store data within a class, and we explored how to access and modify the values of those fields.\nNow, we will explore several ways to configure fields based on their intended use.\nYou will find the example code in the csharp-web-dev-examples repo . Be sure to try what you learn before moving on the the next section.\nReadonly Fields A readonly field is one that cannot be changed once it is initialized.",
    "tags": [],
    "title": "Customizing Fields",
    "uri": "/classes-part-2/reading/custom-fields/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 5: Classes Part 2",
    "content": "Content Links Customizing Fields Instance and Static Methods Special Methods Visual Studio Generation Shortcut ",
    "description": "Content Links Customizing Fields Instance and Static Methods Special Methods Visual Studio Generation Shortcut ",
    "tags": [],
    "title": "Reading: Classes Part 2",
    "uri": "/classes-part-2/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 3: Control Flow \u0026 Collections \u003e Reading",
    "content": "Before you start this chapter, fork and clone the csharp-web-dev-examples repository. This repository contains the example projects in the reading section.\nFor the Conditionals section, be sure to explore the Conditionals project in the repo.\nOperators Before we review the syntax for conditionals, let’s go over the comparison and logical operators that we need to use in control flow statements.\nComparison Operators Operator Description == Checks if two items are equal != Checks if two items are not equal \u003c Checks if item on left is lesser than item on right \u003c= Checks if item on left is lesser than or equal to item on right \u003e Checks if item on left is greater than item on right \u003e= Checks if item on left is greater than or equal to item on right Logical Operators Operator Description ! Reverses the evaluation of the operand || Combines two expressions with OR \u0026\u0026 Combines two expressions with AND if Statements Let’s consider an if statement with no else clause.\nIn C#, this pattern is simply written as:\nif (condition) { statement1 statement2 ... }You can see that in C#, the curly braces define a block. Parentheses around the condition are required.\nif else Adding an else clause, we have:\nif (condition) { statement1 statement2 ... } else { statement1 statement2 ... }else if An else if construction in C#:\nConsole.WriteLine(\"Enter a grade: \"); string gradeString = Console.ReadLine(); int grade = int.Parse(gradeString); if (grade \u003c 60) { Console.WriteLine('F'); } else if (grade \u003c 70) { Console.WriteLine('D'); } else if (grade \u003c 80) { Console.WriteLine('C'); } else if (grade \u003c 90) { Console.WriteLine('B'); } else { Console.WriteLine('A'); }switch Statements C# also supports a switch statement that acts something like an else if statement under certain conditions, called cases. The switch statement is not used very often, and we generally recommend you avoid using it. It is not as powerful as the else if model because the switch variable can only be compared for equality with a very small class of types.\nHere is a quick example of a switch statement:\nConsole.WriteLine(\"Enter an integer: \"); string dayString = Console.ReadLine(); int dayNum = int.Parse(dayString); string day; switch (dayNum) { case 0: day = \"Sunday\"; break; case 1: day = \"Monday\"; break; case 2: day = \"Tuesday\"; break; case 3: day = \"Wednesday\"; break; case 4: day = \"Thursday\"; break; case 5: day = \"Friday\"; break; case 6: day = \"Saturday\"; break; default: // in this example, this block runs if none of the above blocks match day = \"Int does not correspond to a day of the week\"; break; } Console.WriteLine(day);Note that each case ends with a break statement. We will look at why this is in the following section.\nIn the example above, here’s the output if a user enters the number 4.\nEnter an integer: 4 ThursdayAnd the output if that user enters 10? Below:\nEnter an integer: `10` Int does not correspond to a day of the weekHere’s how the above example looks using the else if construction:\nConsole.WriteLine(\"Enter an integer: \"); string dayString = Console.ReadLine(); int dayNum = int.Parse(dayString); string day; if (dayNum == 0) { day = \"Sunday\"; } else if (dayNum == 1) { day = \"Monday\"; } else if (dayNum == 2) { day = \"Tuesday\"; } else if (dayNum == 3) { day = \"Wednesday\"; } else if (dayNum == 4) { day = \"Thursday\"; } else if (dayNum == 5) { day = \"Friday\"; } else if (dayNum == 6) { day = \"Saturday\"; } else { day = \"Int does not correspond to a day of the week\"; } Console.WriteLine(day);Fallthrough Many C-based languages utilize switch statements. However, not all languages share the same behavior when it comes to fallthrough. Fallthrough is what happens when a break statement is omitted and is described in detail in this article on switch statements . In C#, you can take advantage of fallthrough behavior in specific circumstances with blank cases. If the behavior we want matches for two cases, then we can take advantage of this fallthrough action.\nWe want to use a switch statement to tell us if it is the weekend or a weekday. Here is how we might modify the switch statement from above and make use of fallthrough.\nConsole.WriteLine(\"Enter an integer: \"); string dayString = Console.ReadLine(); int dayNum = int.Parse(dayString); string weekZone; switch (dayNum) { case 0: weekZone = \"Weekend\"; break; case 1: case 2: case 3: case 4: case 5: weekZone = \"Week Day\"; break; case 6: weekZone = \"Weekend\"; break; default: // in this example, this block runs if none of the above blocks match weekZone = \"Int does not correspond to a day of the week\"; break; } Console.WriteLine(weekZone);Because we want to set the value of weekZone to \"Week Day\" for cases 1-5, we omit the break statements and any other code.\nCheck Your Understanding Question When does fallthrough occur in C#?\nOmitting an else clause from a conditional. Omitting an else clause from switch statement. Omitting a default case from a switch statement. Omitting a break line from a switch statement. Question Console.WriteLine(\"Are you a space cadet? yes or no\"); string response = Console.ReadLine(); switch (response) { case \"yes\": Console.WriteLine(\"Greetings, cadet.\"); case \"no\": Console.WriteLine(\"Greetings, normie.\"); default: Console.WriteLine(\"Are you an alien?\"); }Given the code above, what prints if the user enters no after the prompt?\nGreetings, cadet. Greetings, normie. Greetings, normie. Are you an alien? Greetings, cadet. Greetings, normie. The program doesn’t work as written. ",
    "description": "Before you start this chapter, fork and clone the csharp-web-dev-examples repository. This repository contains the example projects in the reading section.\nFor the Conditionals section, be sure to explore the Conditionals project in the repo.\nOperators Before we review the syntax for conditionals, let’s go over the comparison and logical operators that we need to use in control flow statements.\nComparison Operators Operator Description == Checks if two items are equal !",
    "tags": [],
    "title": "Conditionals",
    "uri": "/flow-collections/reading/conditionals/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 3: Control Flow \u0026 Collections",
    "content": "Content Links Conditionals Loops Collections List Array Dictionary ",
    "description": "Content Links Conditionals Loops Collections List Array Dictionary ",
    "tags": [],
    "title": "Reading",
    "uri": "/flow-collections/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 15: Viewmodels and Model Validation",
    "content": "Content Links ViewModels and Passing Data Between Views Server-Side Validation Validation Attributes Validating Models in a Controller Validation and Views Walkthrough: Adding ViewModels and Validation to CodingEvents ",
    "description": "Content Links ViewModels and Passing Data Between Views Server-Side Validation Validation Attributes Validating Models in a Controller Validation and Views Walkthrough: Adding ViewModels and Validation to CodingEvents ",
    "tags": [],
    "title": "Reading",
    "uri": "/viewmodels/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 6: Unit Testing",
    "content": "Content Links Testing in C# MSTest ",
    "description": "Content Links Testing in C# MSTest ",
    "tags": [],
    "title": "Reading",
    "uri": "/unit-testing/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 6: Unit Testing \u003e Reading",
    "content": "Testing your code is a crucial practice for every developer. Automated testing ensures that your code works as expected every time it runs. Tests also function as internal documentation, giving a fellow programmer instructions on how to properly execute your classes and methods. While these purposes are the same for C# as any other language, the implementation of tests will look a bit different.\nThis course covers unit testing in C# with a test framework called MSTest. Unit testing is based on breaking down the codebase into its smallest building blocks, individual statements and methods, and testing those building blocks.\nTip If you would like to review the benefits of automated testing, take a peek at this section in another LaunchCode text.\nWhy We Test Refactoring When we refactor code, we rewrite it without adding new features. Refactoring can increase efficiency at runtime, but it may also mean inadvertently introducing some bugs in the process. Unit tests verify the most basic functionality of your code, thus safeguarding against bugs introduced in refactoring.\nImagine this common workflow:\nYou practice test-driven development (TDD), writing your tests to stipulate how your class’s code should behave.\nYou write your class’s code to pass the tests.\nLater, a stakeholder in the project requests that you refactor your code using different syntax.\nThe features of the application will be the same, but the implementation of those features will change. Because the changes in implementation do not effect change in the application features, unit tests can help with refactoring the codebase. If your tests continue to pass after the refactor, you can move on, knowing you have not inadvertently introduced a bug. Writing tests just once provides innumerable benefits for the whole lifetime of the codebase.\nDocumentation In addition to assisting with refactoring, unit tests serve as vital documentation for fellow programmers. Again, because unit tests address the most fundamental tasks of your classes, they serve as live-code use-cases. You may also have an external documentation directory with examples of how to run your project, or perhaps you have been writing comments within your code to best communicate with your teammates about your changes. Both of these are great choices and should be done when possible. However, these choices also require more forethought to maintain. Each time you update your code, you might not remember to update the documentation and comments. With unit testing, however, you have a more obvious reminder that a change has been made if a previously-passing test fails.\nTesting Best Practices Below are some best practices to keep in mind when writing unit tests, in any language.\nThe AAAs\nThe AAAs of unit testing refers to the pattern to follow when writing your unit tests.\nArrange the variables your test requires. Act on the methods your test requires. Assert the anticipated comparison of the expected and actual values. Deterministic\nEvery time a test is run, it should produce the same outcome. A test that passes only most of the time is a worthless test.\nRelevant\nGroup tests by related class and function.\nMeaningful\nThere is no need to test trivial code. For example, unless a getter or setter contains some additional functionality, you do not need to write a test for those methods.\nCheck Your Understanding Question True or False: Comments are the best tool to make your code readable.\nQuestion Unit tests are a form of:\nManual testing Automated testing Integration testing Documentation testing ",
    "description": "Testing your code is a crucial practice for every developer. Automated testing ensures that your code works as expected every time it runs. Tests also function as internal documentation, giving a fellow programmer instructions on how to properly execute your classes and methods. While these purposes are the same for C# as any other language, the implementation of tests will look a bit different.\nThis course covers unit testing in C# with a test framework called MSTest.",
    "tags": [],
    "title": "Testing in C#",
    "uri": "/unit-testing/reading/testing-in-csharp/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "In previous programming studies, we have come across classes and objects. Classes and objects in C# are similar to classes and objects in other languages.\nA Minimal Class and Object Classes may contain fields and methods. Fields contain the data of a class and methods define actions a class can take. We say that fields and methods are members of a class.\nExample Let’s create a class called HelloWorld with one field, message, and one method, SayHello(). message will be a string and have a value of \"Hello World\". SayHello() will not return a specific value and instead print out the value of message.\n1 2 3 4 5 6 7 8 9 10 11 public class HelloWorld { public string message = \"Hello World\"; public void SayHello() { Console.WriteLine(message); } } The only field in the HelloWorld class is the string message, while the only method is SayHello(), which prints the value of the message field and doesn’t return anything.\nNote There is no main method, which is required to run a C# program. Without it, we have to do some additional work to get our program to run!\nTo execute SayHello(), we’ll need to create an instance of the class HelloWorld. We refer to an object created from a particular class as an instance of that class.\nHere’s how this might look with our HelloWorld class:\nExample 1 2 HelloWorld hello = new HelloWorld(); hello.SayHello(); In order to call the SayHello() method of HelloWorld, we must first have an instance of HelloWorld, which we create using the syntax new HelloWorld(). As with built-in classes, classes that we create define their own types. So the object hello is a variable of type HelloWorld.\nWe introduced this HelloWorld class as a means of illustrating the simplest representation of some basic concepts in C#. The goal of the next few lessons is to build up the machinery to create a wide variety of interesting classes that can be used to create complex programs and elegantly solve difficult problems.\nThe this Keyword In HelloWorld above, we could have written SayHello this way, with the same net effect:\n6 7 8 9 public void SayHello() { Console.WriteLine(this.message); } In this context, inside of the class, we can refer to fields (and methods) that belong to the class using the special object, this. Whenever you use this, it always refers to the object that the given code is currently within. In other words, this will always be an instance of the given class. Since it is not legal to create code outside of a class in C#, this nearly always makes sense to use (there’s one exception, that we’ll encounter soon).\nYou are allowed to create local variables (variables declared within a method) with the same name as a field of the given class. In this case, in order to refer to the field, we must use this.\nExample Let’s look at how this works with our HelloWorld class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class HelloWorld { public string message = \"Hello World\"; public void SayHello() { string message = \"Goodbye World\"; // The line below prints \"Goodbye World\" Console.WriteLine(message); // The line below prints \"Hello World\" Console.WriteLine(this.message); } } Warning When a local variable has the same name as a field, we say that the local variable shadows the field. Errors caused by shadowing can be tricky to spot, so it’s best to avoid doing this in your code.\nNote If you want to learn more about this subject, check out the documentation on using the this keyword .\nCheck Your Understanding Question The following code block contains several bugs. Mark all of the lines that contain a bug in the code.\n1 2 3 4 5 6 7 8 9 10 public class Greeting { public String name = \"Jess\" public void SayHello() { Console.WriteLine(\"Hello \" + here.name + \"!\"); } line 9 line 4 line 8 line 1 ",
    "description": "In previous programming studies, we have come across classes and objects. Classes and objects in C# are similar to classes and objects in other languages.\nA Minimal Class and Object Classes may contain fields and methods. Fields contain the data of a class and methods define actions a class can take. We say that fields and methods are members of a class.\nExample Let’s create a class called HelloWorld with one field, message, and one method, SayHello().",
    "tags": [],
    "title": "Classes for C#",
    "uri": "/classes/reading/background/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 4: Classes",
    "content": "Content Links Classes for C# Modifiers in C# Encapsulation Constructors Methods Single Responsibility Principle ",
    "description": "Content Links Classes for C# Modifiers in C# Encapsulation Constructors Methods Single Responsibility Principle ",
    "tags": [],
    "title": "Reading",
    "uri": "/classes/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 2: Data Types \u003e Reading",
    "content": "Static vs. Dynamic Typing In a dynamically typed programming language (like JavaScript or Python), a variable or parameter can refer to a value of any data type (string, number, object, etc.) at any time. When the variable is used, the interpreter figures out what type it is and behaves accordingly.\nC# is a statically typed language. When a variable or parameter is declared in a statically typed language, the data type for the value must be specified. Once the declaration is made, the variable or parameter cannot refer to a value of any other type.\nFor example, this is legal in JavaScript, a dynamically typed language:\nExample 1 2 3 4 let dynamicVariable = \"dog\"; console.log(typeof(dynamicVariable)); dynamicVariable = 42; console.log(typeof(dynamicVariable)); Output\nstring number After line 1 executes, dynamicVariable holds a string data type. After line 3 runs, dynamicVariable becomes a number type. dynamicVariable is allowed to hold values of different types, which can be reassigned as needed when the program runs.\nHowever, the corresponding code in C# will result in a build error:\nExample 1 2 string staticVariable = \"dog\"; staticVariable = 42; Output\nError CS0029: Cannot implicitly convert type 'int' to 'string' (CS0029) The compiler error occurs when we try to assign 42 to a variable of type string.\nTake-home lesson: We must declare the type of every variable and parameter in a statically typed language. This is done by declaring the data type for the variable or parameter BEFORE its name, as we did in the example above: string staticVariable = \"dog\".\nNote We only need to specify the type of a variable or parameter when declaring it. Further use of the variable or parameter does not require us to identify its type. Doing so will result in an error.\nWarning It is allowed in some situations in C# to declare a variable without specifying a type by using the keyword var, as in var x = \"dog\";. In this case, C# still assigns a type to x through inference. It looks and sees that we are assigning x the value \"dog\", which is a string. Thus, x has type string and attempting to assign x = 42 will still result in a build error.\nWe recommend avoiding use of var while you are learning C#. Even after you become more experienced with the language you will still only want to use it sparingly and in specific circumstances. Explicitly declaring the type of your variables makes for more readable code, in general.\nDynamic and static typing are examples of different type systems . The type system of a programming language is one of the most important high-level characteristics that programmers use when discussing the differences between languages. Here are a few examples of popular languages falling into these two categories:\nDynamic: Python, Ruby, JavaScript, PHP Static: C#, C, C++, Java, TypeScript Because we need to give plenty of attention to types when writing C# code, let’s begin by exploring the most common data types in this language.\nBuilt-In Types In C#, all of the basic data types are objects — we’ll get into this idea shortly. Though the so-called built-in data types also have short names that differ from typical class name conventions.\nWe provide here a list of some of the most common types, along with the official .NET class name. Recall that .NET gives us a class library with object types. We’ll generally prefer to use the short names for each of these.\nShort name .NET Class Examples Notes int Int32 -5, 1024 float Single 1.212, 3.14 double Double 3.14159, 2.0 Doubles are twice as precise (i.e. can hold much longer decimal numbers than floats) char Char ‘a’, ‘!’ A single Unicode character. Must be enclosed in single quotes '' to be a character; double quotes \"\" indicate a string bool Boolean true, false Note that booleans in C# are not capitalized as they are in Python Warning As we will see in a later section, the float data type sacrifices some accuracy for speed of calculation. Thus, evaluating 1.11111 + 3 results in an answer of 4.1111097 instead of 4.11111.\nAnytime you need to perform calculations with decimal values, consider using the double type instead of float.\nNot all built-in data types in C# are listed here, only the most commonly used types that beginners are likely to encounter. If you’re curious, read more about built-in types in C# .\nPrimitive Types The types in the table above are known as primitive types. A primitive data type is a basic building block of a programming language. Using primitive data types, we can build more complex data structures.\nNon-primitive Types Primitive data types are immutable and can be combined to build larger data structures. One example is forming the string “LaunchCode” from multiple char characters ('L', 'a', 'u', etc.).\nstring is another built-in type in C# and it is also a non-primitive data type. We’ll delve into how strings work in C# on the next page, as well as other complex data types.\nOperations Operators, such as + and *, are type-dependent. That is, we can only use them on allowed types, and their effects are different depending on which types we use them on. The + operator is a good example of this. We can use + to add numeric types together, such as 2 + 2 which results in 4. But we can also use it to concatenate strings: \"2\" + \"2\", for example, which results in \"22\". What the operators do depends on the type they are operating on, and we may not mix types in arbitrary ways (\"2\" + 2 results in a compiler error).\nNote Numeric types such as int and double may be freely mixed when using numeric operators. Generally, the result of such mixing is that the output has the type of the more precise input. For example, the following snippet would print out System.double.\n1 2 3 float a = 2; double b = 3; Console.WriteLine((a + b).GetType()); Reference and Value Types We can group types in C# into two categories: value types and reference types. Variables holding value types directly contain their data, and include numeric types (int, double, etc.), bool, and a handful of others that we won’t encounter in this course. The primitive, built-in types we list above are all value types.\nClass Types A class is a template for creating objects. In addition to the built-in types provided by .NET, any class in C# defines its own type. A class is a template, or blueprint, for creating objects. We’ll have much more to say about classes and objects — this is an object-oriented course, after all. For now, you need to be comfortable seeing the basic syntax of class types and class creation.\nIf we have a class Cat with a constructor that takes no arguments, we declare and create a new instance of Cat using its constructor.\nCat myCat = new Cat(); Cat myCat declares the variable myCat and sets it to be of type Cat. = new Cat() initializes the variable with a new Cat object. Any arguments that are required to build the new Cat object must be included within the parentheses. In this case, there are no required arguments. This statement creates a new variable that is initialized to hold a new Cat object. Note that in C#, we must declare the variable’s type. Also note that we precede the constructor with the new keyword. And, as we’ll see with all C# statements, the declaration ends with a semi-colon.\nVariables and parameters that are of the type of a class are said to be of reference type (in contrast to primitive type). In plain English, we would say of the C# example: “myCat is a reference variable of type Cat.”\nAs mentioned above, classes define reference types. A variable of a reference type (such as myCat above) does not actually store the object in question. Instead, it stores a reference to the object. A reference is literally a memory address. We visualize references as an arrow pointing to the object in memory.\nConsider this code:\n1 2 3 int catAge = 11; Cat myCat = new Cat(); Cat sameCat = myCat; Visually, we can represent these three variables as shown here.\nSince int is a value type, the variable catAge functions as a box holding the integer value 11. On the other hand, myCat is a reference variable, since it refers to an object of type Cat. The variable actually stores the memory address of the object, which we visualize as an arrow from the variable box to the object. Instead of holding the actual Cat data, myCat stores directions for finding the data in memory.\nWhen we assign myCat to another variable, as in Cat sameCat = myCat, we do NOT create a second copy of the object or its data. Instead, we make a second pointer to the same memory location.\nThe distinction between reference types and value types is important, but can be difficult to wrap your brain around at first. We will see that reference types are handled differently in essential and important ways in a lot of different situations.\nBoxing As we mention above, all types in C# are treated as objects. Even value types. This can be accomplished through processes called boxing and unboxing. Converting from a value type to a reference type is called boxing, and the reverse process (reference to value) is called unboxing. C# is known as a unified type system because it implicitly boxes values types to be treated as objects.\nint i = 123; // This is a value type. object o = i; // Boxing the value type into a reference type. int j = (int)o; // Unboxing the reference type back into a value type.Check Your Understanding Question Which of the following is NOT a number data type in C#:\nnumber int float double Question Which of the following terms refers to C#’s behavior of treating all types as objects:\nstatic type system dynamic type system reference type system unified type system ",
    "description": "Static vs. Dynamic Typing In a dynamically typed programming language (like JavaScript or Python), a variable or parameter can refer to a value of any data type (string, number, object, etc.) at any time. When the variable is used, the interpreter figures out what type it is and behaves accordingly.\nC# is a statically typed language. When a variable or parameter is declared in a statically typed language, the data type for the value must be specified.",
    "tags": [],
    "title": "Data Types",
    "uri": "/data-types-and-variables/reading/data-types/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 2: Data Types",
    "content": " Data Types Some C# Practice Strings, Characters, and Arrays Objects and Methods, a Primer ",
    "description": " Data Types Some C# Practice Strings, Characters, and Arrays Objects and Methods, a Primer ",
    "tags": [],
    "title": "Reading",
    "uri": "/data-types-and-variables/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 4: Tech Jobs Persistent",
    "content": "In the Program.cs file\nStart MySQL Workbench and create a new schema named TechJobs. In the administration tab, create a new user, TechJobs with the same settings described in the CodingEvents tutorial and set the password to TechJobs. Make sure that the TechJobs6Persistent project has all of its necessary dependencies. Pomelo.EntityFrameworkCore.MySql Microsoft.EntityFrameworkCore.Design Microsoft.EntityFrameworkCore.Relational Read through the code that is currently in JobDbContext to get an idea of what the database will look like in terms of tables. You will need to add the services required to create your database connection in Program.cs, including both the connectionString and the serverVersion. Run a new migration and update the database. Tip You can double-check your setup against what you’ve already done for your CodingEvents repo. You can copy these property assignments from your CodingEvents repo, only needing to change the database address and username/password values.\nTest It with SQL If you correctly connect to your database, you should have tables for Jobs, Employers, and Skills.\nIn your MySQL workbench, open a new query tab to check your database connection. Do you see tables? Do your tables have columns? SQL TASK: In queries.sql under “Task 1”, list the columns and their data types in the Jobs table. Write this answer as a comment.\nProgress Check Project Check: You should be able to connect to your MySQL database and perform an initial migration. Your project should open a localhost browser window with a header that reads: “Tech Jobs \u0026 Persistent Data” with a message below that there are no jobs yet.\nIf you click through the application, you will see that not every page is functional. You will be addressing this as you work through the next tasks below.\nDatabase check: You should have empty tables.\nYou are ready for Task 2 .",
    "description": "In the Program.cs file\nStart MySQL Workbench and create a new schema named TechJobs. In the administration tab, create a new user, TechJobs with the same settings described in the CodingEvents tutorial and set the password to TechJobs. Make sure that the TechJobs6Persistent project has all of its necessary dependencies. Pomelo.EntityFrameworkCore.MySql Microsoft.EntityFrameworkCore.Design Microsoft.EntityFrameworkCore.Relational Read through the code that is currently in JobDbContext to get an idea of what the database will look like in terms of tables.",
    "tags": [],
    "title": "Task 1: Connect a Database to an ASP.NET App",
    "uri": "/assignments/techjobs-persist/task-1/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 3: TechJobs MVC",
    "content": " Tip One essential programming skill that you will develop is the ability to read and understand someone else’s code. This assignment begins with you practicing exactly that. Make sure you carefully examine the provided code BEFORE you start changing things.\nTrying to “fix” a code sample before understanding how it works leads to confusion, frustration, and a broken program. DO NOT SKIP the code review!\nCarly created a ASP.NET MVC application and filled in some features. She refactored JobData to generate a List of Job objects based on your TechJobs-OO work, and she added controllers and views for a “Home”, “List”, and “Search” page. JobData now also builds Lists for the Employer, Location, PositionType, and CoreCompetency objects.\nThe Data and Model The “model” is contained in the JobData class, which is in the Data folder. We put “model” in quotes, since this class isn’t a model in the typical, MVC/object-oriented sense (maybe a better name for this assignment would be TechJobs VC).\nThe JobData class serves the same purpose as before—it reads data from the job_data.csv file and stores it in a format we can use. In this case, that format is a List of Job objects, which is stored in the Models folder. Note that Carly changed the path to the job_data.csv file to store it in the Data folder too.\nYou’ll use some of the static methods provided by JobData in your controller code. Since you’re already familiar with these, we’ll leave it to you to review their functionality as you go.\nThe Controllers Expand the Controllers folder, and you’ll see that you have three controllers already in place. Let’s look at these one at a time.\nThe HomeController This class has only one action method, Index(), which displays the home page for the app. The controller renders the Index.cshtml template (in Views/Home) and provides a fairly simple view.\nThe ListController This controller provides functionality for users to see either a table showing all the options for the different Job fields (Employer, Location, CoreCompetency, and PositionType) or a list of details for a selected set of jobs.\nIf you look at the corresponding page at /list, you’ll see an “All” column in the table. However, this option doesn’t work yet, and you will fully implement the constructor as you work on this project.\nAt the top of ListController are static Dictionaries that populate ColumnChoices and TableChoices with values respectively. These Dictionaries play the same role as in the console app, which is to provide a centralized collection of the different List and Search options presented throughout the user interface.\nListController also has Index() and Jobs() action methods. The first method renders a view that displays a table of clickable links for the different job categories. The second method needs to render a different view that displays information for the jobs that relate to a selected category. Both of the action methods can obtain data by implementing the JobData class methods.\nJobs() will work similarly to the search functionality, in that we are “searching” for a particular value within a particular field and then displaying jobs that match. However, this is slightly different from the other way of searching in that the user will arrive at this handler method as a result of clicking on a link within the Index.cshtml view, rather than via submitting a form.\nThe SearchController Currently, the search controller contains only a single method, Index. It simply renders the form defined in the Index.cshtml template.\nLater in this assignment, you will receive instructions for adding a second handler to deal with user input and display the search results.\nThe Views Let’s turn our attention to the views.\nBootstrap Classes The application uses a few Bootstrap classes to style the view content and job tables. You won’t have to explicitly add any Bootstrap classes to your views in this assignment, but it’s a great way to make your sites look good with minimal work.\nThe List Views Turn your attention to List/Index.cshtml. This page displays a table of links broken down into several categories. Data from ColumnChoices is used to fill in the header row, and information stored in TableChoices generates the link text.\nThe most interesting part of this template is how we generate the links:",
    "description": "Tip One essential programming skill that you will develop is the ability to read and understand someone else’s code. This assignment begins with you practicing exactly that. Make sure you carefully examine the provided code BEFORE you start changing things.\nTrying to “fix” a code sample before understanding how it works leads to confusion, frustration, and a broken program. DO NOT SKIP the code review!\nCarly created a ASP.NET MVC application and filled in some features.",
    "tags": [],
    "title": "Task 1: Review the Starter Code",
    "uri": "/assignments/techjobs-mvc/starter-code-review/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments",
    "content": "This assignment is a tutorial for running tests in Visual Studio, working in C#, and submitting to GitHub Classroom.\nTasks 1 and 2 will help you get familiar with both C# and Visual Studio. Task 3 is where you will code. Task 4 reviews the submission process.\nYour Assignment Task 1: Getting Started Task 2: Running the Auto-grading Tests Task 3: Start Coding Task 4: Submitting Your Code ",
    "description": "This assignment is a tutorial for running tests in Visual Studio, working in C#, and submitting to GitHub Classroom.\nTasks 1 and 2 will help you get familiar with both C# and Visual Studio. Task 3 is where you will code. Task 4 reviews the submission process.\nYour Assignment Task 1: Getting Started Task 2: Running the Auto-grading Tests Task 3: Start Coding Task 4: Submitting Your Code ",
    "tags": [],
    "title": "Assignment 0: Hello, World!",
    "uri": "/assignments/hello-world/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 0: Hello, World!",
    "content": "Let’s set up the assignment on our computer and learn about its basic structure.\nFind Assignment #0 in Canvas and click on the invitation link. After accepting the assignment on the Github Classroom page, go to your assignment repository on GitHub.\nFollow the instructions to clone your repository and open it in Visual Studio.\nWhen the solution opens, check out the contents of the Solution Explorer. You will find two projects within the solution:\nThe HelloWorldAutoGraded contains the code that you will work with for this assignment. The Hello.Tests project contains auto-grading tests. You do not need to change any of the code in the testing project. Note If you do not see the Solution Explorer, you can open it by selecting the following:\nWindows Users: View \u003e Solution Explorer Mac Users: Select .NET: Open Solution in the command palette. Review the walkthroughs from Chapter 1 if you need help navigating the interface.\nInside HelloWorldAutoGraded, open up the SayHelloClass.cs class. This is where you will write any code for this assignment. Within this class, you will see the following:\nThe SayHello() method which is returning \u0026\u0026\u0026. SayHelloClass() constructor which is empty. This will remain empty for this assignment. Now, turn your attention to Program.cs in the HelloWorldAutograded project. This class will print two strings to the console using the Console.WriteLine() method.\nThe first returns the string value of the SayHello() method from the SayHelloClass. The second returns the data type of the SayHello() method’s output. You are now ready to run the program. Do the following:\nMac Users: Hit the Run button at the top right-hand corner of the window. Alternatively, select Run \u003e Start Debugging from the upper bar. Windows Users: Click on the solid green triangle next to the name of the HelloWorldAutograded project. You can also press F5 to run the project. Visual Studio opens a pane and displays any program output when you run a program. Currently, the program output contains the following:\n\u0026\u0026\u0026 System.String You are ready to run the auto-grading tests.\nYou are now ready to move on to Task 2: Running the Auto-grading Tests .",
    "description": "Let’s set up the assignment on our computer and learn about its basic structure.\nFind Assignment #0 in Canvas and click on the invitation link. After accepting the assignment on the Github Classroom page, go to your assignment repository on GitHub.\nFollow the instructions to clone your repository and open it in Visual Studio.\nWhen the solution opens, check out the contents of the Solution Explorer. You will find two projects within the solution:",
    "tags": [],
    "title": "Task 1: Getting Started",
    "uri": "/assignments/hello-world/getting-started/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 1: Tech Jobs Console",
    "content": "Before diving in and starting to code, make sure you understand what the code you’ve been given does. Since you’re starting with a functioning—albeit unfinished—program, go ahead and run it to get an idea of how it works. To do this, explore the two projects in the solution. Right-click on the project that contains the TechJobs class and select Run Project.\nWarning The application will run until you force it to quit, re-prompting time after time. To kill it, press the “stop” icon in the upper corner the Run pane. We’ll learn precisely how the program manages to work this way below.\nLet’s explore the code by starting with the source of the data our program is providing access to.\nThe Data File: jobs_data.csv Our simple app doesn’t connect to a database. If the prototype proves useful and we continue development, we’ll add that functionality later. But for now, we’ve been given a CSV (comma-separated values) file from the Company Team at LaunchCode that contains some recent jobs. This file was exported from an Excel spreadsheet into this format, which is easy for programs to read in.\nIf CSV files are new to you, don’t worry, they’re easy to understand. CSV files are conceptually similar to simple spreadsheets in that they organize data in rows and columns. The major difference is that they don’t have the ability to carry out calculations the way spreadsheets do, and you can easily open, read, and edit them in plain text editors.\nOpen up jobs_data.csv, which is in the project. You’ll see that the first line is:\nname,employer,location,position type,core competency While it isn’t required, the first line of a CSV file often represents the column names. We have 5 names here, which indicates that each of our rows in the CSV file should have 5 fields. In this file format, a row corresponds to a new line. So each line below the first will constitute a row of data, or a record.\nHave a look at the data below line 1, and ask yourself the following questions:\nWhich fields match up with which column names above? Why do some lines/rows (e.g. line 10) have more commas than others, if commas are supposed to separate columns? What role do the double-quotes play in lines 10 and 79? The TechJobs Class The TechJobs class contains three methods that will drive our program’s functionality:\nRunProgram() - The main application runner. GetUserSelection() - A utility method that displays a menu of choices and returns the user’s selection. PrintJobs() - This is meant to print a list of jobs to the console in a nicely formatted manner, but hasn’t been implemented yet. Let’s take a closer look at the first two methods, RunProgram() and GetUserSelection().\nThe RunProgram() Method The logic within RunProgram() presents menus in turn, and based on the user’s choice, takes appropriate action.\nIt begins by declaring two local variables: actionChoices and columnChoices. These contain information relating to the menus that we’ll display, and we’ll look at them in more detail later.\nNext, we notice a while loop that starts while (true). While we usually want to avoid creating infinite loops, we have a good reason for doing so in this case! We want our application to continually run until the user decides they want to quit. The simplest way to do this is to loop forever. When the user wants to quit our app, they can enter x at the initial View jobs by prompt.\nNote There are two ways to stop a running app. Either option works so you can pick the one that works best for you!\nUse the IDE. Click Visual Studio’s Stop icon, the square that replaces the Run triangle once an app is running. In the terminal, press ctrl+C. This will work in any terminal context, and not just for our console program in Visual Studio The RunProgram() method can be summarized as follows:\nPresent the user with choices on how to view data: list or search. Based on that choice, prompt them for the column to apply the choice to. In the case of a search, we also ask for a search term. Carry out the request to the JobData class via one of its public methods. Display the results of the request. Repeat. RunProgram() simulates a query to an external source:\nWe ask the method for data that originates from a non-C# source. The method parses and filters that data. The method presents the data in a useful manner. The GetUserSelection() Method The GetUserSelection() method takes in a string to display above the menu, to provide context for what they are being asked. It also takes in a Dictionary with string keys and string values. How is this used? What will this Dictionary contain when the method runs?\nTo figure this out, right-click on the method name and select Find (All) References. This will open a pane and display each location in the program where GetUserSelection() is called. The first such usage is the first line of the main while loop:\n30 string actionChoice = GetUserSelection(\"View Jobs\", actionChoices); What is this Dictionary named actionChoices? If we look a few lines above, we see:\n11 12 13 14 // Top-level menu options Dictionary\u003cstring, string\u003e actionChoices = new Dictionary\u003cstring, string\u003e(); actionChoices.Add(\"search\", \"Search\"); actionChoices.Add(\"list\", \"List\"); If you recall how the program worked when you ran it, the first menu that you chose had two options, Search and List, which seem to correspond to the entries in actionChoices. This is, in fact, the case. This is the data that is used to generate the first menu we see when running the program.\nThe second usage of GetUserSelection() is a few lines below:\n38 string columnChoice = GetUserSelection(\"List\", columnChoices); This references columnChoices, which is declared in the RunProgram()method and has a similar structure to actionChoices (they’re the same data type and are used in calls to the same method). Most of the entries in columnChoices correspond to columns in the jobs data set, but there’s one additional entry with key/value pair \"all\"/ \"All\". These entries will help us present the user with the options for searching our data, which will correspond to searching within a given column, or searching all columns at once.\nThe keys in actionChoices and columnChoices represent the internal strings we’ll use to refer to these options (e.g. when representing the user’s menu choice, or querying data). The values in the Dictionary represent the external way that these are represented to the user.\nWithin GetUserSelection() itself, most of the code is within a do-while loop. A do-while loop is similar to a while loop, but the conditional check is at the end of the loop’s code block. This has the net consequence that the loop’s code block always runs at least once. At the end of the block’s execution, we check a condition to determine if we should run the block again. This nicely mimics the behavior of simple menu-driven applications.\nWithin this loop, menu options are printed to the screen, and user input is collected. If the input is valid, it returns the choice as a string to the caller. This string corresponds to the chosen key (from choices, which will be either actionChoices or columnChoices) of the item the user selected. If invalid, it re-prompts the user.\nThe local variable choiceKeys is used to easily enumerate the choices Dictionary. This gives us a simple way to provide an ordering to choices, which doesn’t have an ordering of its own.\nThe JobData Class, JobData.cs The JobData class is responsible for importing the data from the CSV file and parsing it into a C#-friendly format, that is, into Dictionary and List form. Look for the method named LoadData() (line 85), which does just what it advertises. After parsing the file data, it stores the data in the private property AllJobs which is of type List\u003cDictionary\u003cstring, string\u003e\u003e.\nNote We haven’t covered static properties and methods in-depth yet. For this assignment, know that they allow us to use properties and methods of a class without creating an object from that class. For example, we can call JobData.FindAll() from the TechJob class.\nIf you want to create a new method in JobData, or add a property, be sure to declare it as static.\nLet’s look more closely at the data type of AllJobs. It purports to be a List that stores Dictionary objects which have string keys and string values. If we were to represent some of this data visually, using [] for a List and {} for a collection of key/value pairs (i.e., a Dictionary), it would look like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 [ { \"name\": \"Junior Data Analyst\", \"employer\": \"Lockerdome\", \"location\": \"Saint Louis\", \"position type\": \"Data Scientist / Business Intelligence\", \"core competency\": \"Statistical Analysis\" }, { \"name\": \"Junior Web Developer\", \"employer\": \"Cozy\", \"location\": \"Portland\", \"position type\": \"Web - Back End\", \"core competency\": \"Ruby\" }, ... ] If you look at the LoadData() method you’ll see a lot of unfamiliar code. Blake wrote this essential piece of code for you, and while you won’t have to modify it, it will be useful to have an idea of how it works. Read through the code until you feel like you can describe its functionality at a basic level.\nThere are three more methods in JobData, each of which is public (and static, per our earlier note):\nFindAll() FindAll(string) FindByColumnAndValue(string, string). Note that there are two methods named FindAll(), but this is allowed in C# via a feature called overloading. Overloading happens when multiple methods have the same name, but they each have different input parameters (also called argument lists). Read more about overloading here.\nHere are some questions to ask yourself while reading this code:\nWhat is the data type of a “job” record? Why does FindAll(string) return something of type List\u003cstring\u003e while FindByColumnAndValue(string, string) and FindAll() return something of type List\u003cDictionary\u003cstring, string\u003e\u003e? Why is LoadData() called at the top of each of these four methods? Does this mean that we load the data from the CSV file each time one of them is called? ",
    "description": "Before diving in and starting to code, make sure you understand what the code you’ve been given does. Since you’re starting with a functioning—albeit unfinished—program, go ahead and run it to get an idea of how it works. To do this, explore the two projects in the solution. Right-click on the project that contains the TechJobs class and select Run Project.\nWarning The application will run until you force it to quit, re-prompting time after time.",
    "tags": [],
    "title": "Review the Starter Code",
    "uri": "/assignments/techjobs-console/starter-code-review/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Major Concepts \u0026 Key Terminology The learning objectives for this chapter are:\nInstall and configure Visual Studio and the .NET SDK Create and run a “Hello World!” console app within Visual Studio Import a C# project from GitHub into Visual Studio Content Links Setup for C# Next Steps ",
    "description": "Major Concepts \u0026 Key Terminology The learning objectives for this chapter are:\nInstall and configure Visual Studio and the .NET SDK Create and run a “Hello World!” console app within Visual Studio Import a C# project from GitHub into Visual Studio Content Links Setup for C# Next Steps ",
    "tags": [],
    "title": "Chapter 1: Introduction and Setup",
    "uri": "/introduction-and-setup/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 19: Authentication \u003e Reading",
    "content": "We log into many, many websites every day. The process has become so routine that we expect it to work flawlessly every time. How surprised would you be if you logged into a website and saw a different user’s account info? What if you entered the wrong password and were still let in? What we have come to expect as routine is anything but when we consider the code needed to make it happen.\nWhat Is Authentication? Authentication is the process of determining a user’s identity. In other words, are they who they say they are?\nThis is typically done by asking a user to provide a secret piece of data, which theoretically only they should know. Passwords are the most commonly used secrets, but there are others such as RSA keys and physical authentication tokens. Authentication relies on the ability of the user to keep their secret data, well, secret. If we are given as user’s secret data, we assume that only one person could have provided it.\nA related, but different, concept is authorization. Authorization is the process of determining if a user is allowed to carry out a specific action.\nExample I can share a Google doc with my coworker with read-only permission. They are then authorized to view the document, but not to make changes.\nMost applications that store personal data use authentication and authorization together. In this book, however, we will focus on authentication.\nFlow for Simple Authentication Using authentication allows a web application to restrict access to certain pages to known users only. The simplest form of authentication treats all users the same. If a user is signed in, then they are allowed to view all restricted pages. Otherwise, they may not view any. With simple authentication, it is not possible to restrict a page to some users while allowing access by others.\nSimple authentication requires that for every request, the application answers two questions before the request is handled by a controller:\nIs the user asking for a restricted page? If so, do we know who they are? The answers to these questions determine whether or not the user is allowed to view the page.\nThe logical flow of simple authentication looks like this:\nGeneral authentication flow:\nSessions and Cookies The second question above—“Do we know who they are?”—sounds simple enough. However, to determine which user is making which request turns out to be more complicated. To do this, simple authentication relies on two standard web tools, sessions and cookies.\nA session is a collection of temporary data stored on the server that corresponds to a specific user. Sessions are often used to store data that an app wants to keep track of in the short term, but not permanently.\nExamples Some types of data that might be stored in a session:\nItems in a shopping cart Whether or not a user is logged in Data from a multi-page form, such as a checkout process A cookie is a piece of temporary data stored in the user’s browser. Cookies are also used to keep short-term data. While a session can hold lots of data entries, a cookie contains only a single key/value pair. However, a browser may hold a large number of cookies.\nNote A detailed discussion of cookies is beyond the scope of this book. For more info, read HTTP Cookies on MDN .\nCookies and sessions work together to enable simple authentication in the following way:\nWhen a user is authenticated—that is, they provide a valid username/password pair—a session containing their user ID is created on the server. The session has a unique session ID, such as 81LfWG9. In order to associate the user with their session, the server creates a session cookie and returns the cookie to the browser within an HTTP response. The session cookie contains the session ID, and looks something like this: session_id: 81LfWG9. For each subsequent request to the server, the browser passes the session cookie along with the request. When the server receives a request for a restricted resource, it checks for a session cookie. It then looks for a session with the given session ID. If such a session exists, then the server knows who the user is since their user ID is stored in the session. If the session does NOT exist, then the server does not know the user and they must authenticate themselves. The following diagram shows the initial creation (steps 1-2) of the session and cookie after a user signs in.\nAs the user navigates the site, sessions and cookies are used to validate whether users can access restricted pages. The next diagram shows the flow of steps 1-2 in black and the flow of steps 3-4 in blue.\nNote At some point, you may have cleared all of the cookies from your browser only to find that you were suddenly logged out of every website on the Internet. This is because those cookies stored the session IDs that allowed the various sites to know who you were.\nA logout request to a web app simply destroys the user’s session, erasing any memory of who they are. Even if they pass a session cookie in their subsequent requests, the old session and session ID will no longer exist.\nA Note On Authentication In ASP.NET Before we proceed, we want to point out something important about authentication in ASP.NET. ASP.NET contains a Razor Class library, Identity , that provides extensive support for authentication and authorization. In addition to supporting simple authentication, Identity also supports more sophisticated authorization flows/processes like OAuth 2 .\nProfessional developers working with ASP.NET use ASP.NET Core Identity for authentication.\nIn this book, three notes before we dive into using Identity:\nIdentity handles many aspects of the authentication process for you. This may hide steps that are important to understand as you learn about authentication. Some of the inner workings of Identity are beyond the scope of this course. Do not fear when troubleshooting! Identity has lots of different configuration options and can handle complex authentication setups. That said, the authentication approach outlined in this chapter is sufficient for use in your personal projects. When you begin working with a team on professional applications, a senior developer will likely be on hand to help with authentication setup.\nCheck Your Understanding Question Which of the following are true:\nA session is stored on the server. A session is stored in the browser. A cookie is stored on the server. A cookie is stored in the browser. Question What is the difference between authentication and authorization?\nAuthentication handles user permissions, authorization handles user restrictions. Authentication handles user identity, authorization handles user permissions. There is no difference, they are synonymous terms. User authorization can be changed in a request, authentication cannot. ",
    "description": "We log into many, many websites every day. The process has become so routine that we expect it to work flawlessly every time. How surprised would you be if you logged into a website and saw a different user’s account info? What if you entered the wrong password and were still let in? What we have come to expect as routine is anything but when we consider the code needed to make it happen.",
    "tags": [],
    "title": "Introduction to Authentication",
    "uri": "/authentication/reading/intro-to-authentication/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 19: Authentication",
    "content": "Content Links Introduction to Authentication Hashing Passwords Getting Started with Identity Registrations and Logins Configuring Identity Identity and Authorization ",
    "description": "Content Links Introduction to Authentication Hashing Passwords Getting Started with Identity Registrations and Logins Configuring Identity Identity and Authorization ",
    "tags": [],
    "title": "Reading",
    "uri": "/authentication/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST",
    "content": "Content Links Web APIs What is REST REST: Practical Fundamentals ",
    "description": "Content Links Web APIs What is REST REST: Practical Fundamentals ",
    "tags": [],
    "title": "Reading",
    "uri": "/web-api-rest/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST \u003e Reading",
    "content": "An API, or application programming interface, is a set of rules that allow one application to communicate with another application.\nWeb APIs are how applications communicate with other applications over a network. Throughout the remainder of this chapter, we will explore web APIs and a pattern for organizing them called REST.\nREST is an application design pattern, not unlike MVC.\nREST, however, relies on an abstract concept called application state that we’ll cover in more detail on the following pages. Here, we dive into what differentiates all web APIs from MVC applications.\nMVC Without the V Web APIs are actually similar to MVC web applications but for one major distinction: Web APIs are not concerned with the presentation of data. A web API encompasses the model and controller aspects of MVC, but is not responsible for the view layer. In a web API, the view, or presentation of data, is decoupled from the model and controller that manage and transfer data. This separation leads to the development of two different applications, a client (front-end) and a web API (back-end).\nThe separation between client and web API provides the following benefits:\nClient applications can be developed to operate on a range of platforms (web, mobile, CLI, GUI, etc). Client and web API applications can be developed by different, specialized programming teams. Client and web API applications can be hosted on separate infrastructure. Note Client applications involve User Interface (UI) and User Experience (UX) development.\nClient Interacts With Data Despite being separated from each other, the client application still relies on interactions with application data through the web API. A front-end client must ultimately present data to an end-user. This means the client must request a representation of the data from the web API. After the client receives the representation, it is parsed, styled and rendered to the user.\nNote A web API interacts with, or is consumed by, a client application. This process involves transferring data representations and instructions like creating, reading, updating and deleting.\nResponsibilities of a Web API The chief responsibility of a web API is to exchange representations of data with a corresponding client application. APIs are also gatekeepers, maintaining rules about how end-users may interact with application data.\nData Delivery Think about how a view works in MVC.\nData is injected into a template file, That template is rendered in HTML in the browser when a controller action method is invoked, The data is sent back to the user We call this approach server-side rendering. A client application and web API work in a similar way. However, instead of injecting the data into a template on the server, data is transferred over the network through AJAX requests made by the client.\nWhen a client application receives data, it injects that data into its HTML using JavaScript. This all occurs from within a browser. This approach is called client-side rendering because the web API only sends data, the HTML is assembled on the user’s end.\nExample Consider requesting the /events path of your MVC project. The response is an HTML presentation of the data. In other words, the data is already included in the presentation.\nMVC: GET /events -\u003e HTML with data\nIn a web API analog, an /events path would return just the underlying data.\nWeb API: GET /events -\u003e just data\nIt is then the client application’s responsibility to integrate the received data into its presentation.\nManagement of Data A web API manages data by modeling objects that line up with the underlying business data. This is actually the same process we saw in MVC. Our models are class files that drive the interactions in our codebase. Web APIs often take advantage of ORMs just like MVC applications do.\nIf you have underlying classes that map to a database, you can easily make data available for use within a web API codebase.\nTransference of Data Beyond managing data, a web API also handles transferring data. A client application will make a request for some data. Our web API must contain controller files that can handle the requests. As a part of handling the request, the controller file must understand the request, access the requested data, package the data in an accepted format, and send the package as a response to the client application.\nHere’s an overview of the steps to transfer data between a web API and client application:\nA request for data comes from a client application to the API. A controller file in the API catches the request. The controller determines if the request is valid. The controller transfers data from the database to an object, via the ORM. The controller transforms the object into a package the client application can work with. The controller responds to the client with the packaged data. Representation of Data Presentation vs Representation As mentioned above, the client application presents the data to the end-user. However, the client relies on consuming a representation of data from the web API. Presentation is the rendered combination of data and visual styling intended for end-users.\nThe client application needs to know what format the data is in so that it can be transformed into a human readable presentation (HTML/CSS). A web API packages data into a format the client application accepts.\nThis format is called the representation of the data. The client application team and the web API team must agree to the underlying data format. A best practice is to use a universal representation widely accepted by client applications.\nUniversal Representation It is necessary to adopt a universal representation because web APIs and client applications may be written in two different programming languages. Your web API may be written in C#/ASP.NET but the client application may be written using JavaScript and React.\nWhile there are many languages and frameworks available in web development, they all support the creation and parsing of JSON. JSON is a standard in web development because it is simple to process in any language, compatible with HTTP, and seamlessly represents the structure of data objects.\nJSON JSON is currently a universal representation of data accepted by client applications. This means our web API packages data requested by a client application as JSON. The web API also transfers this JSON in its communication with a client application.\nLet’s revisit the last two steps from our web API work flow.\nThe controller transforms the object into a JSON representation. The controller responds to the client with the JSON representation. Tip XML is another popular data format. It is now used less commonly than JSON for web API-to-client communications.\nLet’s look at how exactly a client application makes a request and how a web API responds.\nHTTP as The Language of Web APIs HTTP is the protocol used for communication between a web API and a client application. Web APIs communicate over a network. The most common protocol of the internet is HTTP, so it comes as no surprise that HTTP is the language of web APIs. Similarly, our MVC applications use HTTP as the protocol for an end-user to access the application. HTTP also facilitates the communication between a client application and a web API.\nTip We will refer to web APIs as APIs going forward, since the web prefix is implied.\nHere’s a refresher on the basics of HTTP :\nIs a stateless request/response protocol. Requests and responses may include HTTP bodies. Responses always contain a three digit HTTP status code. Requests and responses always include HTTP headers. We call HTTP a stateless protocol. State can be a complex concept that refers to a number of things. We’ll explore some aspects of it in more depth on the next page.\nIn the context of HTTP, think of state as information about application data that is transferred via HTTP bodies, HTTP status codes, and HTTP headers.\nBodies An HTTP body can contain a large number of different media types, known as MIME types . A MIME type is associated with the HTTP header Content-Type. This header instructs the recipient of the HTTP request/response on what MIME type the HTTP body contains. We’ve seen a Content-Type:text/html HTTP header before.\nExample 1 2 3 4 5 6 7 8 9 10 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eMy Web Page\u003c/title\u003e content \u003c/head\u003e \u003cbody\u003e content \u003c/body\u003e \u003c/html\u003e This is the header for HTML documents and is used throughout the web. APIs send representations of data in the format of JSON requiring the header Content-Type to be application/json. This allows us to pass the state of the data as the HTTP body.\n1 2 3 4 5 6 7 8 { \"title\": \"An Astronaut's Guide to Life on Earth\", \"author\": \"Chris Hadfield\", \"ISBN\": 9780316253017, \"year_published\": 2013, \"subject\": [\"Hadfield, Chris\", \"Astronauts\", \"Biography\"], \"available\": true } The HTTP body may include JSON that represents the data being passed between an API and client application. Remember, not all requests/responses include HTTP bodies.\nStatus Codes The next HTTP component that transfers state is the HTTP status code. The HTTP status code is included as a part of every HTTP response.\nThe status code is the API’s way of telling the client application how their initial request was handled. HTTP response status codes are a part of the HTTP spec and their usage goes beyond API design.\nHowever, many of their codes have been adopted as a standard within API design.\nStatus Code Group Commonly Used Description 2XX 200, 201, 204 request was successful 3XX 301, 302 request was redirected 4XX 400, 401, 403, 404, 405 client error 5XX 500, 502, 504 server error Headers The final HTTP component that transfers state are the HTTP headers. Any number of headers can be included in a request or response. We saw the Content-Type header above. This is the header that informs the API (request header) or client application (response header) of the format of the data included in the body.\nTip A client can specify which Content-Type they want to receive in the API response using the Accept request header.\nAPI Design The design of an API is a contract that defines how the client and API interact with data. The API is responsible for upholding the data management and transfer behaviors of the contract. The client application is responsible for consuming (via AJAX requests) an API according to the contract.\nAs long as both sides of the interface (the client and API logic) uphold the contract, then front and back-end teams can operate independently. This provides the following freedoms:\nFront-end developers can choose, or change, the internal styling, libraries, frameworks and design patterns. Back-end developers can choose, or change, the internal server language, libraries, frameworks and design patterns. Both sides can choose, or change, their external hosting infrastructure at any time without affecting the other. Both sides can make and deploy changes to their code bases at any time, without needing to coordinate with, or wait for, the other. Only when a change must be made to either the client AJAX requests or API behavior do the two teams need to communicate and agree upon a new contract. Up next, we discuss how following the REST pattern of API design offers consistency and simplicity in application development.\nCheck Your Understanding Question True or False: Web API programmers must be knowledgeable in HTML/CSS/Javascript to create a client application.\nTrue\nFalse\nQuestion Match the class of HTTP response codes to the approximate definition:\n2XX, 3XX, 4XX, 5XX\nRequest is valid, but server cannot receive and accept it.\nRequest received and accepted.\nDue to the request containing an error, it cannot be received.\nAnother action needs to be done to fulfill request.",
    "description": "An API, or application programming interface, is a set of rules that allow one application to communicate with another application.\nWeb APIs are how applications communicate with other applications over a network. Throughout the remainder of this chapter, we will explore web APIs and a pattern for organizing them called REST.\nREST is an application design pattern, not unlike MVC.\nREST, however, relies on an abstract concept called application state that we’ll cover in more detail on the following pages.",
    "tags": [],
    "title": "Web APIs",
    "uri": "/web-api-rest/reading/web-api/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "A Primer on Lambda Expressions Before diving into relationships in EF, we need to introduce a new concept.\nA lambda expression is an inline function defined using the symbol =\u003e.\nThis symbol is sometimes called a “fat arrow,” and lambda expressions are sometimes called “fat arrow functions.” The most basic syntax for creating a lambda expression is:\nargument =\u003e return expressionThe left-hand side of the expression consists of the arguments to be passed into the function, and the right-hand side states the return expression. There are more complicated ways to write a lambda expression, but we will only use this one.\nLambda expressions can seem confusing until you see them in action. We will look at some below.\nSelect Example The Select method for arrays can be used to create a new array with elements that are transformations of elements of an initial array.\nExample using System; using System.Linq; class MainClass { public static void Main (string[] args) { int[] nums = {1, 2, 3, 4}; var doubledNums = nums.Select(x =\u003e 2*x); Console.WriteLine(string.Join(\" \", doubledNums)); } }Output\n2 4 6 8 Let’s look at line 7 in more detail.\nvar doubledNums = nums.Select(x =\u003e 2*x);The Select method takes a lambda expression as a parameter.\nThe lambda expression is x =\u003e 2*x.\nThis is a function that takes a single element of the nums array, as represented by x on the left side of the expression, and returns the results of multiplying each of those array elements by 2. We can think of the execution of Select as follows:\nSelect begins by creating an empty array. This array will be returned at the end of the method. It then loops over nums. Within the loop, each entry of nums is passed into the lambda expression. The return value of the lambda expression is appended to the new array. At the end of the loop, Select returns the new array of transformed values. Where Example The array method Where can be used to filter elements of an array. In this case, Where takes a lambda expression that returns a boolean. If the boolean value is true then the value is included in the returned array. Otherwise, the value is NOT included in the returned array.\nExample Given an array of integers, we can use Where to filter out all of the odds, keeping only evens. Recall that a number x is even if x % 2 is zero, and is odd otherwise.\nusing System; using System.Linq; class MainClass { public static void Main (string[] args) { int[] nums = {1, 2, 3, 4}; var evens = nums.Where(x =\u003e (x % 2 == 0)); Console.WriteLine(string.Join(\" \", evens)); } }Output\n2 4 In this example, the flow of execution of Where on line 7 is similar to that of Select above. The main difference is that instead of transforming every element of nums, it is filtered based on the lambda expression x =\u003e (x % 2 == 0).\nNote While the examples we have given use arrays, the Select and Where methods work with most collection types.\nMore generally, you’ll find various specialized methods that use lambdas whenever you encounter a specialized collection type (such as DbSet, as we’ll soon see).\nCheck Your Understanding Question Suppose you have an array of first names, firstNames, of people each with the last name Smith. What lambda expression would you pass to Select in the following code so that each name is appended by its surname?\nvar smiths = firstNames.Select(_______); a. x =\u003e \"Smith\" b. x =\u003e x + \" Smith\" c. x =\u003e x + lastName d. x =\u003e x == \"Smith\" Question Given an array of numbers, nums, what lambda expression would you pass to Where in the following code so that the resulting array consists of only the numbers greater than 42?\nvar bigNums = nums.Where(______); a. x =\u003e x \u003e 42 b. x =\u003e x == 42 c. x =\u003e 42 d. x =\u003e x \u003c 42 ",
    "description": "A Primer on Lambda Expressions Before diving into relationships in EF, we need to introduce a new concept.\nA lambda expression is an inline function defined using the symbol =\u003e.\nThis symbol is sometimes called a “fat arrow,” and lambda expressions are sometimes called “fat arrow functions.” The most basic syntax for creating a lambda expression is:\nargument =\u003e return expressionThe left-hand side of the expression consists of the arguments to be passed into the function, and the right-hand side states the return expression.",
    "tags": [],
    "title": "A Primer on Lambda Expressions",
    "uri": "/relationships-or-mapping/reading/primer-on-lambda-expressions/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping",
    "content": "Exercises: The Early Bird Gets the ORM. Now that we have gotten very familiar with our CodingEvents application, let’s design some additional features. As you work on your CodingEvents application, you may have been inspired by Meetup . One of the cool features that Meetup has is that people can sign up for accounts. They can use their Meetup accounts to follow the events they are most interested in and keep track of their calendar of events. To add similar features to CodingEvents, you need to add a Person class. For the exercises, answer the following questions about what your Person class would look like.\nNote You do not have to code anything to complete these exercises. This is mainly focused on using our design skills to add a new feature to your application.\nYou need to add a Person class to hold necessary info about users of our app. What fields and methods would this class hold? Would you need to add any additional classes to Person to make the app work? If so, what classes would be necessary? What kinds of relationships would Person have to the other classes you already created, such as the Event class? As you dream up answers to these questions, write the answers down in a note or piece of paper. You are now going to write up some documentation for your app.\nAdd a README.md to your repository by navigating to the repository page on your GitHub profile. At the bottom of the page, there is a blue banner with a green Add a README. Click the button to do so. You should write three sections. The first should describe the purpose of the app. The second should describe the current state of the app. The third and final section should describe the future improvements you want to make to the app including your notes about the Person class. ",
    "description": "Exercises: The Early Bird Gets the ORM. Now that we have gotten very familiar with our CodingEvents application, let’s design some additional features. As you work on your CodingEvents application, you may have been inspired by Meetup . One of the cool features that Meetup has is that people can sign up for accounts. They can use their Meetup accounts to follow the events they are most interested in and keep track of their calendar of events.",
    "tags": [],
    "title": "Exercises",
    "uri": "/relationships-or-mapping/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping",
    "content": "Exercises For the exercises, we are going to continue building on our CodingEvents application. The exercise instructions assume that your code resembles the orm1-with-db branch. Create a new branch in your own CodingEvents repo to get started on the exercises.\nNote You will be making one model class and adding to DbContext. If you are not sure what these classes should look like, refer back to the section on data stores and DbContext.\nThe EventCategory Class First, create a new class called EventCategory in the Models directory.\nEventCategory needs to have the following:\nAn Id property of type int. A Name property of type string. A no arg constructor. A constructor that sets the value of Name. EventCategory represents data that will be stored in our database.\nCheck your solution 6 7 8 9 10 11 12 13 14 15 16 public int Id { get; set; } public string? Name { get; set; } public EventCategory() { } public EventCategory(string name) { Name = name; } Adding to DbContext Once you have created EventCategory, you need to add to EventDbContext to set up a table in the database for storing categories.\nCheck your solution 10 public DbSet\u003cEventCategory\u003e Categories { get; set; } Adding a New Table to the Database With the two steps completed above, you now need to add a new migration and update your database. You should see a new table in your database!\nTip Where is my table? f you are not able to see your new EventCategory table try the following:\nDrop tables Start by dropping all of your tables in MySql Workbench Add a new migration in your terminal Update your database in the terminal Refresh your schema in MySql Workbench If you still can’t see your table, then you will need to drop your schema and delete old migrations.\nDrop schema\nDrop the schema in MySql Workbench. Don’t worry, we’ll get it back. ecreate your schema in MySql Workbench like you did earlier. You can use the same names and passwords if you like. If you change any of the names and passwords, make sure you update your MySql connections that you made in the Program.cs. Delete your old migrations from your C# project. Add a new migration in your terminal Update your database in the terminal Refresh your schema in MySql Workbench You should see your new table in MySql Workbench now.\nThe EventCategoryController Class Create EventCategoryController in the Controllers directory. To get our action methods working, we also need a variable of type EventDbContext.\nFor now, we are just going to set up our Index() action method so that it displays all of the categories in our table.\nIndex Action Method Index() needs to do the following:\nResponds to GET requests at EventCategory/Index and returns a view called Index.cshtml. Pass the DbContext category values as a list into the view template as a model. Check your solution 15 16 17 18 19 20 21 22 23 24 25 26 27 28 private EventDbContext context; public EventCategoryController(EventDbContext dbContext) { context = dbContext; } // GET: /\u003ccontroller\u003e/ public IActionResult Index() { List\u003cEventCategory\u003e categories = context.Categories.ToList(); return View(categories); } Adding a View Create an EventCategory directory inside of our Views directory. Add a new view called Index.cshtml.\nIndex.cshtml needs to have the following:\nUse the list passed in from the action method in the controller as a model to populate the view. An h1 with an appropriate heading for the page. A table that will display all of the category names of the event categories stored in our database. Check your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @model List\u003cCodingEventsDemo.Models.EventCategory\u003e \u003ch1\u003eAll Event Categories\u003c/h1\u003e \u003ctable\u003e \u003ctr\u003e \u003cth\u003eCategory Name\u003c/th\u003e \u003c/tr\u003e @foreach(EventCategory category in Model) { \u003ctr\u003e \u003ctd\u003e@category.Name\u003c/td\u003e \u003c/tr\u003e } \u003c/table\u003e Test Your Application If you navigate to the /eventcategory route, you will see an empty table on the page. That is what you should see! We haven’t added the ability to add a new category to our table yet. We will do so in the studio this chapter.",
    "description": "Exercises For the exercises, we are going to continue building on our CodingEvents application. The exercise instructions assume that your code resembles the orm1-with-db branch. Create a new branch in your own CodingEvents repo to get started on the exercises.\nNote You will be making one model class and adding to DbContext. If you are not sure what these classes should look like, refer back to the section on data stores and DbContext.",
    "tags": [],
    "title": "Exercises: OMG the ORM!",
    "uri": "/orm-part-1/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping \u003e Reading",
    "content": "We have decided to use MySQL for our relational database for CodingEvents MVC project.\nFirst we need to set up a new database in MySQL Workbench and then we can connect it to CodingEvents\nCreate the Database In MySQL Workbench, do the following:\nCreate a new schema, coding-events.\nAdd a new user, codingevents, with a new password. Give the user “all” privileges to modify your new schema.\nBegin Connecting CodingEvents to the Database Now, attach MySQL to your project in Program.cs by adding the following property:\n6 7 var connectionString = \"server=localhost;user=username;password=password;database=database\"; var serverVersion = new MySqlServerVersion(new Version(#, #, #)); Warning Update the connectionString with your username, password, and database name.\nUpdate serverVersion with the actual version of your MySql Workbench.\nVisual Studio will automatically add the correct using statement which will shift the lines once you provide correct version numbers the serverVersion. This will move connectionString and serverVersion to lines 8 and 9.\nWe now need to add a couple of NuGet packages to support our database connection. This process differs slightly for Windows and MacOS users.\nInstall MySQL Dependency Working with the NuGet Package Manager\nOpen the NuGet Package Manager in Visual Studio:\nWindows - Tools \u003e NuGet Package Manager \u003e Manage NuGet Packages for Solution\nMac - Project \u003e Manage NuGet Dependencies\nSearch for for all of the packages listed below. Select the package and install.\nWhen installing these packages, make sure that the versions are the same as the .NET Core version your project is using. You can confirm this is the case by reviewing the code in your csproj file.\nWe will need to install the following NuGet packages:\nPomelo.EntityFrameworkCore.MySql. This dependency provides code that is able to connect to a MySQL database from within an ASP.NET Core application using EF.\nMicrosoft.EntityFrameworkCore.Relational. This is a mapping framework that automates access and storage of data in your project’s database.\nMicrosoft.EntityFrameworkCore.Design. This helps manage data migrations and the design-time logic.\nTip You can view installed packages and their dependencies by navigating to Dependencies \u003e NuGet in the Solution Explorer (or the Solution pane on Mac) and expanding a given package.\nEnsuring Connection Success and Security Before we can get into the ins and outs of using ORM, we need to make sure that our application has a corresponding database and that our application is ready to connect to MySQL. We can start to do this by creating new schemas and setting user privileges in MySQL Workbench. We also must make sure that the MVC application has the correct dependencies, username, and password to access the schema.\nIf we do not do these steps, then our application will not be able to use a persistent data source.\nSetting the value of the connectionString property using the values of the username and password is NOT a best practice. We regularly commit our code to Github, meaning anyone who reads the code in our repository can see the username and password. While you can do it for the applications in this class, you do not want to do it in the future.\nNote To avoid this in the future, you can configure your connectionString string to reference environment variables. You then hide the appropriate info by setting the environment variable’s value equal to the password, for example.\nWe used the documentation provided by Pomelo to code the current connectionString.\nIf you are interested in more secure methods of connection, see Microsoft’s documentation on Configuration to learn how to keep the username and password to your database safe and secure.\nTroubleshooting Your Connections If you are not able to connect your MVC project to your MySQL database, try the following:\nDouble check the username, password, and database name.\nCheck the versions of all the dependencies you added to your project. They should all be the same major version.\nFor example if you use Pomelo 6.0.2 with both Microsoft.EntityFrameworkCore.Relational and Microsoft.EntityFrameworkCore.Design 6.0.10. These are all contained within version 6 and should work. If one of them was version 7.0.3, this discrepancy may be cause errors. Use the NuGet manager to verify and set versions. You can install higher versions or lower versions as needed.\nCheck Your Understanding Question True/False: Writing usernames and passwords in plain text in a file is a GREAT idea!\nQuestion True/False: We need Entity Framework Core AND a MySQL provider to successfully use ORM in this project.",
    "description": "We have decided to use MySQL for our relational database for CodingEvents MVC project.\nFirst we need to set up a new database in MySQL Workbench and then we can connect it to CodingEvents\nCreate the Database In MySQL Workbench, do the following:\nCreate a new schema, coding-events.\nAdd a new user, codingevents, with a new password. Give the user “all” privileges to modify your new schema.\nBegin Connecting CodingEvents to the Database Now, attach MySQL to your project in Program.",
    "tags": [],
    "title": "Setting Up a Persistent Database",
    "uri": "/orm-part-1/reading/connecting-to-db/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 16: Enums \u003e Reading",
    "content": "One application of enum types is to represent categories of objects. We will take this approach in our CodingEvents application to categorize events based on their type, such as conference or meetup.\nTo follow along in CodingEvents, make sure that you have forked and cloned our repo . Your code at the beginning of this chaper should look like the viewmodels branch and at the end, your code should look like the enums branch.\nEnum Types in Models Create an Enum Class In your Models directory within CodingEvents, create a new class called EventType. Replace the class keyword with enum and delete the default constructor.\nEach value is demarcated with a comma.\nEventType:\n4 5 6 7 8 9 10 public enum EventType { Conference, Meetup, Workshop, Social } Add an Enum Property to a Model Class Other objects can have enum type properties. To add an EventType property to our model Event, we create a Type property in Event amongst the other properties declared:\n12 13 14 15 16 // other Event property declarations public EventType Type { get; set; } // Event methods Once we have added an EventType property to our model, we need to add an EventType property to our ViewModel.\nAdd an Enum Property to a ViewModel The first thing we need to do is add an EventType property to AddEventViewModel.\n20 21 22 // other AddEventViewModel property declarations public EventType Type { get; set; } Now that we have a property to hold the event type that the user selects, we need to create a list of all of the possible event types. We will use this list to populate the select element in a later step.\n24 25 26 27 28 29 30 public List\u003cSelectListItem\u003e EventTypes { get; set; } = new List\u003cSelectListItem\u003e { new SelectListItem(EventType.Conference.ToString(), ((int)EventType.Conference).ToString()), new SelectListItem(EventType.Meetup.ToString(), ((int)EventType.Meetup).ToString()), new SelectListItem(EventType.Social.ToString(), ((int)EventType.Social).ToString()), new SelectListItem(EventType.Workshop.ToString(), ((int)EventType.Workshop).ToString()) }; Because the EventType options are not changing, we can populate this property with a default value. We add each of the constants to the EventTypes list. SelectListItem is an ASP.NET-provided class that represents each \u003coption\u003e element in a \u003cselect\u003e element. The SelectListItem constructor requires a Text and Value property assignment. The Text property sets the displayed text in the \u003coption\u003e tag. This is created by getting each EventType and casting it to a string type. The Value property sets the value attribute on the \u003coption\u003e tag. This is created by getting each EventType, casting it to its implicit int value, and then casting that to a string type.\nThis list only exists in AddEventViewModel because we need it only for the purposes of displaying all of the options. We do not need a list of the different event types in our Event model. We just need the type of one event. This is another great reason to use a ViewModel!\nPass Enum Values Through the Controller In EventsController, the Add() action method that responds to POST requests uses model binding to create an AddEventViewModel object. So like any other field on the model, the controller does not necessarily need to know about the addition of AddEventViewModel.Type in order to create an AddEventViewModel instance from a form. However, we need to make sure that we are properly setting the Type property of our Event object using the value from the Type property of our AddEventViewModel object.\nIn EventsController:\n37 38 39 40 41 42 43 Event newEvent = new Event { Name = addEventViewModel.Name, Description = addEventViewModel.Description, ContactEmail = addEventViewModel.ContactEmail, Type = addEventViewModel.Type }; Use Enum Value in a select Element The list of constants returned from EventType lends itself well to a select-type form input. We’ll update our form so that a user will have the option to choose one of the provided event types from a dropdown menu.\nIn Events/Add.cshtml:\n20 21 22 23 \u003cdiv class=\"form-group\"\u003e \u003clabel asp-for=\"Type\"\u003eEvent Type\u003c/label\u003e \u003cselect asp-for=\"Type\" asp-items=\"Model.EventTypes\"\u003e\u003c/select\u003e \u003c/div\u003e As with the other form inputs on the page, the asp-for attribute determines the name and id attributes for the select tag. We also use asp-items to access all of the items stored in the list of our different enum values.\nView the Event Type in the Events Table Once an event is created, to display its Type property in the table of all events, we’ll modify Events/Index.cshtml to include another column:\n20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u003ctable class=\"table\"\u003e \u003ctr\u003e \u003cth\u003e Id \u003c/th\u003e \u003cth\u003e Name \u003c/th\u003e \u003cth\u003e Description \u003c/th\u003e \u003cth\u003e Contact Email \u003c/th\u003e \u003cth\u003e Event Type \u003c/th\u003e \u003c/tr\u003e @foreach (var evt in Model) { \u003ctr\u003e \u003ctd\u003e@evt.Id\u003c/td\u003e \u003ctd\u003e@evt.Name\u003c/td\u003e \u003ctd\u003e@evt.Description\u003c/td\u003e \u003ctd\u003e@evt.ContactEmail\u003c/td\u003e \u003ctd\u003e@evt.Type\u003c/td\u003e \u003c/tr\u003e } \u003c/table\u003e ",
    "description": "One application of enum types is to represent categories of objects. We will take this approach in our CodingEvents application to categorize events based on their type, such as conference or meetup.\nTo follow along in CodingEvents, make sure that you have forked and cloned our repo . Your code at the beginning of this chaper should look like the viewmodels branch and at the end, your code should look like the enums branch.",
    "tags": [],
    "title": "Enums in Model Classes",
    "uri": "/enums/reading/enums-in-models/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 16: Enums",
    "content": "Before tackling SQL and ORM, you should make sure you have a good grasp on enums. If you would like some additional resources, here are a few of our favorites:\nW3Schools Microsoft Documentation TutorialsPoint ",
    "description": "Before tackling SQL and ORM, you should make sure you have a good grasp on enums. If you would like some additional resources, here are a few of our favorites:\nW3Schools Microsoft Documentation TutorialsPoint ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/enums/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 15: Viewmodels and Model Validation",
    "content": "Let’s practice adding more properties to our event objects and validating them. Create a new branch from the viewmodels .\nBelow, we describe some new properties for you to add to the Event class. For each property, consider the following factors:\nWhat will you call your property? What type of input should be added to capture the field’s information from the user? Refer to the chapter content to find appropriate attributes to fit the necessary constraints. What should the error message convey to the user? What, if anything, will you need to update on the controller to account for the new property? Event information to add:\nAdd a property to collect information about where the event will take place. This property should not be null or blank.\nCheck your solution 1 2 3 4 5 6 7 8 9 10 11 // In the Event class public string Location { get; set; } // In the Event constructor public Event( ... string location) { Location = location; } This property should not be null or blank.\n1 2 3 4 // In the AddEventViewModel class [Required(ErrorMessage = \"Location information is required.\")] public string Location { get; set; } Add a property to collect information about the number of attendees for the event. Valid values for this property should be any number between zero and 100,000.\nAdd columns for the location and number of attendees to the Events/Index.cshtml view.\nCheck your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u003c!-- inside your table --\u003e \u003cth\u003e Location \u003c/th\u003e \u003cth\u003e Number of Attendees \u003c/th\u003e @foreach (var evt in Model) { \u003ctr\u003e \u003ctd\u003e@evt.Id\u003c/td\u003e \u003ctd\u003e@evt.Name\u003c/td\u003e \u003ctd\u003e@evt.Description\u003c/td\u003e \u003ctd\u003e@evt.ContactEmail\u003c/td\u003e \u003ctd\u003e@evt.Location\u003c/td\u003e \u003ctd\u003e@evt.NumberOfAttendees\u003c/td\u003e \u003c/tr\u003e } \u003c/table\u003e Bonus Mission Add a property to collect information about whether an attendee must register for the event or not. For the purposes of validation practice, make this property only able to be marked as true.\nTip In order to do this, you need to add an additional property called IsTrue to AddEventViewModel with the following code:\n1 public bool IsTrue { get { return true; } } With IsTrue in AddEventViewModel, you can use a [Compare] attribute to compare the value of the IsTrue property which is always true and the value of the property you add for registration requirements. The documentation has more information on how the [Compare] attribute.",
    "description": "Let’s practice adding more properties to our event objects and validating them. Create a new branch from the viewmodels .\nBelow, we describe some new properties for you to add to the Event class. For each property, consider the following factors:\nWhat will you call your property? What type of input should be added to capture the field’s information from the user? Refer to the chapter content to find appropriate attributes to fit the necessary constraints.",
    "tags": [],
    "title": "Exercises",
    "uri": "/viewmodels/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 15: Viewmodels and Model Validation \u003e Reading",
    "content": "Web applications work under the client-server model. We have been focusing on the server portion, using ASP.NET Core MVC and C# to create server-side application code. A critical component of any well-made web application is validation, which is the process of checking that data conforms to certain criteria. Validation ensures that the application only stores meaningful data.\nExample Consider a user registration form on a web site. Effective validation rules might require that:\nThe username is between 3 and 12 characters long, and The password is between 6 and 20 characters long. Web applications should validate all data submitted by users. This ensures that data remains well-structured and unexpected errors don’t occur. Validation that occurs in the browser—using JavaScript or HTML attributes—is client-side validation. Validation that occurs on the web server is server-side validation.\nEven if client-side validation is done, it is still critical to validate data on the server. This is because client-side validation can often be bypassed by a savvy user. For example, such a user might modify HTML using a browser’s developer tools, or disable JavaScript.\nServer-side validation involves both the model and controller.\nThe model is responsible for defining validation rules. The controller is responsible for checking validation rules when data is submitted to the server. Check Your Understanding Question The best practice for validating data in a web app is to:\nUse client-side validation Use server-side validation Use both client-side and server-side validation Don’t validate incoming data ",
    "description": "Web applications work under the client-server model. We have been focusing on the server portion, using ASP.NET Core MVC and C# to create server-side application code. A critical component of any well-made web application is validation, which is the process of checking that data conforms to certain criteria. Validation ensures that the application only stores meaningful data.\nExample Consider a user registration form on a web site. Effective validation rules might require that:",
    "tags": [],
    "title": "Server-Side Validation",
    "uri": "/viewmodels/reading/side-server-validation/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 14: Models and Model Binding \u003e Reading",
    "content": "In this book section, we will continue to make incremental changes to CodingEvents. The next set of changes show model creation, how models relate to data, and the practice of model binding. First, we replace the dictionary in EventsController with a list of Event models. We’ll then update our action methods to take advantage of the new model and its properties. Lastly, we refactor the view template to reflect the changes in the controller.\nSetting Up a Model Class Like controllers, model classes are conventionally located in a Models folder. Model classes resemble the kinds of classes we practiced making at the start of this course. In other words, models are plain old C# objects, or POCOs.\nTo create a model, we’ll transform the information that we once stored in an Events dictionary into a class. This new Event class will include a property for Name, a constructor, and a ToString() override.\nIn Models/Event.cs:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 namespace CodingEvents.Models { public class Event { public string Name { get; set; } public Event(string name) { Name = name; } public override string ToString() { return Name; } } } We now need to update the POST handler that creates new events.\nFirst, replace the Events dictionary with a list of Event objects.\n15 static private List\u003cEvent\u003e Events = new List\u003cEvent\u003e(); Update the Add() method inside of NewEvent() to add a new Event instance to the list:\n30 31 32 33 34 35 36 37 [HttpPost] [Route(\"Events/Add\")] public IActionResult NewEvent(string name) { Events.Add(new Event(name)); return Redirect(\"/Events\"); } Back in Events/Index.cshtml, update the HTML to use the Event object’s fields, rather than strings.\n22 23 24 25 26 27 @foreach (var evt in ViewBag.events) { \u003ctr\u003e \u003ctd\u003e@evt.Name\u003c/td\u003e \u003c/tr\u003e } Tip Here’s a shorthand to create auto-implementing properties. In a class, type the word “prop” followed by hitting the Tab key twice. This swiftly supplies the property’s scaffolding:\npublic object MyProperty { get; set; } Add a Model Property To round out the Event class, we’ll add a Description property to showcase what our events are all about.\nUpdates to Models/Event.cs:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 namespace CodingEventsDemo.Models { public class Event { public string Name { get; set; } public string Description { get; set; } public Event(string name, string description) { Name = name; Description = description; } public override string ToString() { return Name; } } } Now that our data is object-oriented, it’s quick and easy to add a new property affiliated with an event. If we decide to add properties, such as Date or Location, we can follow the pattern established. Think about when we stored events as key-value pairs. At that stage, more significant changes were necessary to add fields.\nIn the Views folder, the Events/Add.cshtml template still uses a desc field so we don’t need to update this view. We do, however, need to go into Events/Index.cshtml to add the table data for an event’s description.\nEvents/Index.cshtml:\n26 \u003ctd\u003e@evt.Description\u003c/td\u003e Lastly, add a parameter to the NewEvent action method. This parameter passes the description value into the creation of the Event object.\nEventController:\n30 31 32 33 34 35 36 37 [HttpPost] [Route(\"Events/Add\")] public IActionResult NewEvent(string name, string desc) { Events.Add(new Event(name, desc)); return Redirect(\"/Events\"); } Check Your Understanding Question True/False: Model code is framework independent.\nQuestion Say we do add a Date property to the Event class. Which line would we add to Events/Index.cshtml to also display that value in our table of events?\n\u003cli\u003e@evt.Date\u003c/li\u003e \u003ctd\u003eevt.Date\u003c/td\u003e \u003ctd\u003e@event.Date\u003c/td\u003e \u003ctd\u003e@evt.date\u003c/td\u003e ",
    "description": "In this book section, we will continue to make incremental changes to CodingEvents. The next set of changes show model creation, how models relate to data, and the practice of model binding. First, we replace the dictionary in EventsController with a list of Event models. We’ll then update our action methods to take advantage of the new model and its properties. Lastly, we refactor the view template to reflect the changes in the controller.",
    "tags": [],
    "title": "Create a Model Class",
    "uri": "/aspdotnet-model-classes/reading/model-class/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 14: Models and Model Binding",
    "content": "Add functionality to edit event objects in your CodingEvents application. These exercises assume that you have added all of the code from this section of the book and your application resembles the models branch .\nThe edit form will resemble the form used to create an event.\nTip As you work through these steps, test your code along the way! With each change you apply to your code, ask yourself what you expect to see when the application is run. You may not find that all of the steps result in observable changes, though. Use Visual Studio’s debugging tools and read your error messages if you run into issues after applying any of the changes.\nCreate the two action methods listed below in EventsController. We’ll add code to these in a moment, so just put the outline in place for now.\nCreate an action method to display an edit form with this signature:\n1 2 3 public IActionResult Edit(int eventId) { // controller code will go here } Create an action method to process the form with this signature:\n1 2 3 4 [HttpPost] public IActionResult SubmitEditEventForm(int eventId, string name, string description) { // controller code will go here } Add the necessary annotations to the SubmitEditEventForm() method for it to live at the path /Events/Edit.\nCheck your solution 1 2 3 4 5 6 [HttpPost] [Route(\"Events/Edit\")] public IActionResult SubmitEditEventForm(int eventId, string name, string description) { // controller code will go here } You’ll need to configure the route for Edit() to include the path variable eventId, so that paths like /Events/Edit/3 will work.\nCheck your solution 1 2 3 4 5 6 [HttpPost] [Route(\"Events/Edit/{eventId}\")] public IActionResult Edit(int eventId) { // controller code will go here } Create an Edit.cshtml view in Views/Events.\nCopy the code from Add.cshtml into Edit.cshtml.\nYou’ll want to update the text of the submit button and the heading to reflect the edit functionality. Check your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 \u003ch1\u003eEdit Event\u003c/h1\u003e \u003cform method=\"post\"\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel for=\"name\"\u003eName\u003c/label\u003e \u003cinput name=\"name\" type=\"text\" /\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel for=\"description\"\u003eDescription\u003c/label\u003e \u003cinput name=\"description\" /\u003e \u003c/div\u003e \u003cinput type=\"submit\" value=\"Edit Event\" /\u003e \u003c/form\u003e Back in EventsController, round out the Edit() method.\nUse an EventData method to find the event object with the given eventId.\nPut the event object in ViewBag.\nReturn the appropriate view.\nCheck your solution 1 2 3 4 5 6 7 8 [HttpGet] [Route(\"Events/Edit/{eventId}\")] public IActionResult Edit(int eventId) { Event editingEvent = EventData.GetById(eventId); ViewBag.eventToEdit = editingEvent; return View(); } Within the form fields in Edit.cshtml,\nGet the name and description from the event that was passed in via ViewBag and set them as the values of the form fields.\nAdd action=\"/events/edit\" to the form tag.\nCheck your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u003ch1\u003e@ViewBag.title\u003c/h1\u003e \u003cform method=\"post\" action=\"/events/edit\"\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel for=\"name\"\u003eName\u003c/label\u003e \u003cinput name=\"name\" type=\"text\" value=\"@ViewBag.eventToEdit.Name\"/\u003e \u003c/div\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel for=\"description\"\u003eDescription\u003c/label\u003e \u003cinput name=\"description\" type=\"text\" value=\"@ViewBag.eventToEdit.Description\" /\u003e \u003c/div\u003e \u003cinput type=\"submit\" value=\"Edit Event\" /\u003e \u003c/form\u003e Add another input to hold the id of the event being edited. This should be hidden from the user:\n\u003cinput type=\"hidden\" value=\"@ViewBag.eventToEdit.Id\" name=\"eventId\" /\u003e Note You may not have named your ViewBag property eventToEdit. Make sure you are using the name you gave your property!\nCheck your solution 1 2 3 4 5 \u003c!-- description div code here --\u003e \u003c/div\u003e \u003cinput type=\"hidden\" value=\"@ViewBag.eventToEdit.Id\" name=\"eventId\"\u003e \u003cinput type=\"submit\" value=\"Edit Event\" /\u003e \u003c/form\u003e Back in the Edit() action method, add a title to ViewBag that reads “Edit Event NAME (id=ID)\" where \"NAME\" and \"ID\" are replaced by the values for the given event.\nCheck your solution 1 2 3 4 5 6 7 8 9 [HttpGet] [Route(\"Events/Edit/{eventId}\")] public IActionResult Edit(int eventId) { Event editingEvent = EventData.GetById(eventId); ViewBag.eventToEdit = editingEvent; ViewBag.title = \"Edit Event \" + editingEvent.Name + \"(id = \" + editingEvent.Id + \")\"; return View(); } In SubmitEditEventForm(),\nQuery EventData for the event being edited with the given id parameter.\nUpdate the name and description of the event.\nRedirect the user to /Events (the event listing page).\nCheck your solution 1 2 3 4 5 6 7 8 9 [HttpPost] [Route(\"Events/Edit\")] public IActionResult SubmitEditEventForm(int eventId, string name, string description) { Event editingEvent = EventData.GetById(eventId); editingEvent.Name = name; editingEvent.Description = description; return Redirect(\"/Events\"); } To access event editing, the user will need an edit option in the list of event data.\nIn Index.cshtml, add a link to edit the event as a column in the event table:\n\u003ctd\u003e\u003ca asp-controller=\"Events\" asp-action=\"Edit\" asp-route-id=\"@evt.Id\"\u003eEdit Event\u003c/a\u003e\u003c/td\u003easp-route-id is a new tag helper for us. Our routes normally go /\u003ccontroller\u003e/\u003caction\u003e. asp-route-id passes an {id?} parameter at the end of our route. When the site is built, we can inspect it and see that for the first item in the table this line of HTML will look like:\n\u003ctd\u003e\u003ca href=\"/Events/Edit/1\"\u003eEdit Event\u003c/a\u003e\u003c/td\u003e Check your solution 1 2 3 4 5 6 7 8 9 10 @foreach (var evt in ViewBag.events) { \u003ctr\u003e \u003ctd\u003e@evt.Id\u003c/td\u003e \u003ctd\u003e@evt.Name\u003c/td\u003e \u003ctd\u003e@evt.Description\u003c/td\u003e \u003ctd\u003e\u003ca asp-controller=\"Events\" asp-action=\"Edit\" asp-route-id=\"@evt.Id\"\u003eEdit Event\u003c/a\u003e\u003c/td\u003e \u003c/tr\u003e } \u003c/table\u003e ",
    "description": "Add functionality to edit event objects in your CodingEvents application. These exercises assume that you have added all of the code from this section of the book and your application resembles the models branch .\nThe edit form will resemble the form used to create an event.\nTip As you work through these steps, test your code along the way! With each change you apply to your code, ask yourself what you expect to see when the application is run.",
    "tags": [],
    "title": "Exercises: Edit Model Classes",
    "uri": "/aspdotnet-model-classes/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 12: Tools in Visual Studio \u003e Reading",
    "content": "NuGet is a package management tool for .NET software. NuGet allows you to use external code sources without including the codebase itself. You can make use of compiled libraries that other developers have already built. You can choose to use a specific version of a package hosted by NuGet, and update that version as need be.\nAs with MSBuild, we will only scratch the surface of the utility of a .NET package manager. That said, it is still a good idea to get familiar with these tools . As your programs grow larger, MSBuild and NuGet will help to maintain a robust codebase.\nNuGet packages are readily available within the IDE itself. Perhaps you have noticed the Dependencies directory that is created in our projects?\nTo browse available NuGet packages:\nRight-click on that directory Select “Manage NuGet Packages” from the dropdown menu The resulting window will show you a catalog of software packages you may add to your project Managing NuGet Packages The following documentation can help you become more familiar with downloading and managing NuGet packages.\nWindows Users: Follow this guide. .\nMac Users: Follow this guide. .\nCheck Your Understanding Question Select which item best describes the job of NuGet.\nNuGet compiles your C# programs to be deployed in different conditions. NuGet is a marshmallow-like confection found in many candy bars. NuGet is a package manager for .NET programs. NuGet allows you to download dependency library source code into your solution. Question True or False: NuGet and MSBuild share responsibilities and only one is needed to deploy a C# app.",
    "description": "NuGet is a package management tool for .NET software. NuGet allows you to use external code sources without including the codebase itself. You can make use of compiled libraries that other developers have already built. You can choose to use a specific version of a package hosted by NuGet, and update that version as need be.\nAs with MSBuild, we will only scratch the surface of the utility of a .",
    "tags": [],
    "title": "NuGet",
    "uri": "/vstools/reading/nuget/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 12: Tools in Visual Studio",
    "content": "On your machine, open up your copy of SpinningDiscs in Visual Studio. The purpose of this studio is to talk about your current debugging strategies and how to make the most of the debugger tools discussed in this chapter.\nBefore we start practicing with debugging tools, go over with the group one error you encountered when working on your own version of last lesson’s studio. This could be the result of a typo or a logical error.\nWhat was the error? How did you solve this error? What have been the strategies and tools you have been using so far to debug your code? Could one of the debugging tools help you when addressing this error? For example, if you encountered an error where data was not being written onto a disc object, could you track the properties of the object with a debugging tool? Now, checkout the debugging branch of the studio repo. Review the code and use the debugging tools in Visual Studio to practice assessing the program.\nTo get started, try the following:\nAdd cd.Name to the Watch pane to track the value of that property. Does it change? Add a few breakpoints inside of Program.cs and make note of where you expect the program to break its execution. Add a breakpoint inside of some of the methods in BaseDisc.cs. Anticipate what you expect to see as the last line in the Call Stack pane when the debugger stops. After you look through the code and try out these tasks, take it one step further by answering these questions.\nWhen would you use the Call Stack pane? If you run the app and it is already functioning, what shows up there? Would a conditional breakpoint make sense to use in the context of this app? Try changing one of the breakpoints you have already added to a conditional breakpoint and run your app! Once you have gone through the code, open up a piece of code you have been struggling with. In what ways could making use of debugging tools help you figure out what is going on with the code?",
    "description": "On your machine, open up your copy of SpinningDiscs in Visual Studio. The purpose of this studio is to talk about your current debugging strategies and how to make the most of the debugger tools discussed in this chapter.\nBefore we start practicing with debugging tools, go over with the group one error you encountered when working on your own version of last lesson’s studio. This could be the result of a typo or a logical error.",
    "tags": [],
    "title": "Studio: If It Ain't Broke, Add a Breakpoint!",
    "uri": "/vstools/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views \u003e Reading",
    "content": "Using templates is a useful way to reduce the effort required to create and maintain a web-based project. Before you can dive into using templates, however, you need to take care of a little groundwork first.\nRazor Razor is a templating syntax included in the application framework for our MVC project. It allows us to write C# code directly into an HTML tree.\nMore information on Razor can be found in this reference page .\nFor the most part, Razor templates look and operate just like regular HTML code. Any C# logic we add to a template is preceded with the at sign, @. You can open any template in a browser and view it just like a static HTML file. Before we begin adding C# logic to Razor templates, we’ll first demonstrate creating a view using only HTML.\nIn this chapter, you will construct some small practice projects to help you learn how to implement Razor templates.\nHello Views Open up your HelloASPDotNET project in Visual Studio and make sure you have committed any recent changes. Make a new branch for creating views and code along with the reading.\nBefore you start coding, we need to refactor HelloController:\nIndex() should respond to GET requests at localhost:5001/hello Welcome() should only respond to POST requests at localhost:5001/hello. Check out the code block below to refactor your code.\nCheck Your Code ",
    "description": "Using templates is a useful way to reduce the effort required to create and maintain a web-based project. Before you can dive into using templates, however, you need to take care of a little groundwork first.\nRazor Razor is a templating syntax included in the application framework for our MVC project. It allows us to write C# code directly into an HTML tree.\nMore information on Razor can be found in this reference page .",
    "tags": [],
    "title": "Creating a Template",
    "uri": "/razor-views/reading/creating-templates/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views",
    "content": "In this chapter, we started working on an application for tracking various coding events around town.\nGetting Started Open up your CodingEvents project in Visual Studio. Create and checkout a new branch to complete these exercises.\nThe code you start with should roughly resemble this branch . If you have been coding along with the video lessons, you’re probably in good shape.\nIf you need a git refresher check out the resources in this chapter’s Next Steps As always, give the branch a useful name, like view-exercises.\nNow, let’s add descriptions to our events.\nExpanding our Events Schedule In this lessons, we learned how to use templates to display the elements in a static list called Events. Let’s convert our Events list to a Dictionary. The structure of a dictionary enables us to add descriptions to our events. You’ll need to think about what data types the event name and description will be.\nTip If you need to refresh your memory on dictionaries, refer to this page .\nCheck your solution static private Dictionary\u003cstring, string\u003e Events = new Dictionary\u003cstring, string\u003e(); Update the Events/Add.cshtml template with a new field for a user to submit an event description.\nTip You’ll want to also add some label tags to your form to let the user know what data they are entering.\nCheck your solution \u003ch1\u003eAdd Event\u003c/h1\u003e \u003cform method=\"post\"\u003e \u003clabel for=\"name\"\u003eName\u003c/label\u003e \u003cinput name=\"name\" type=\"text\" /\u003e \u003clabel for=\"desc\"\u003eDescription\u003c/label\u003e \u003cinput name=\"desc\" /\u003e \u003cinput type=\"submit\" value=\"Add Event\" /\u003e \u003c/form\u003e Back in EventsController.cs, add the description parameter to the NewEvent action method and within the method, add the new event key/value pair to the Events dictionary.\nTip Whatever value you provided in the name attribute of your new description field is the name of the parameter.\nCheck your solution [HttpPost] [Route(\"Events/Add\")] public IActionResult NewEvent(string name, string desc) { Events.Add(name, desc); return Redirect(\"/Events\"); } Now to Events/Index.cshtml. Replace the ul with a table to display event names and descriptions. Check your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // inside the \"else\" block \u003ctable\u003e \u003ctr\u003e \u003cth\u003e Name \u003c/th\u003e \u003cth\u003e Description \u003c/th\u003e \u003c/tr\u003e @foreach (KeyValuePair\u003cstring, string\u003e evt in ViewBag.events) { \u003ctr\u003e \u003ctd\u003e@evt.Key\u003c/td\u003e \u003ctd\u003e@evt.Value\u003c/td\u003e \u003c/tr\u003e } \u003c/table\u003e Lastly, modify _Layout.cshtml to display links for the Coding Events app (only Events/Index and Events/Add for now).\nCheck your solution 1 2 3 4 5 6 7 8 9 10 11 \u003cheader\u003e \u003c!-- html code --\u003e \u003cdiv class=\"navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse\"\u003e \u003cul class=\"navbar-nav flex-grow-1\"\u003e \u003cli class=\"nav-item\"\u003e \u003ca class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Events\" asp-action=\"Add\"\u003eAdd Event\u003c/a\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003c!-- more html --\u003e \u003c/header\u003e ",
    "description": "In this chapter, we started working on an application for tracking various coding events around town.\nGetting Started Open up your CodingEvents project in Visual Studio. Create and checkout a new branch to complete these exercises.\nThe code you start with should roughly resemble this branch . If you have been coding along with the video lessons, you’re probably in good shape.\nIf you need a git refresher check out the resources in this chapter’s Next Steps As always, give the branch a useful name, like view-exercises.",
    "tags": [],
    "title": "Exercises: Razor Views",
    "uri": "/razor-views/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views \u003e Reading",
    "content": "Now that we know a little bit about views, we can start talking about how to pass data between MVC elements. Models are a key component of this, but for now, we will focus on how to pass data between the view and the controller.\nPassing Data to a Template The controller class contains methods that send data to different templates. These methods have a structure similar to:\nExample ",
    "description": "Now that we know a little bit about views, we can start talking about how to pass data between MVC elements. Models are a key component of this, but for now, we will focus on how to pass data between the view and the controller.\nPassing Data to a Template The controller class contains methods that send data to different templates. These methods have a structure similar to:\nExample ",
    "tags": [],
    "title": "Using a Template",
    "uri": "/razor-views/reading/using-templates/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 11: Exceptions \u003e Reading",
    "content": "When you include exceptions in your C# programs, you must decide what should take place once one is thrown. Some languages, like Java, require exceptions to be handled at the time of compiling. These are checked exceptions. When an exception is not handled in compiling, it is passed to runtime and called an unchecked exception. All exceptions in C# are unchecked. Therefore it is up to you, the programmer, to decide what to do to handle one when the need arises in runtime.\nHere’s some advice to consider when contemplating when to handle an exception. This comes from Karl Seguin’s Foundations of Programming .\nOnly handle exceptions that you can actually do something about. You can’t do anything about the vast majority of exceptions. For example, if your code cannot connect to a database, there is probably nothing your program can do about it. However, as we allude to on the previous page, if you receive invalid input from a user, you can still throw an exception and re-prompt them to refine their input with an error message to help them get it right the next time.\nTry/Catch/Finally To handle exceptions in C#, we use the try/catch/finally construction. This functions very similarly to exception handling tooling in other languages. If you expect that a method might return an exception, the method call should be wrapped in a try statement. This could be because you threw the exception in the method yourself. Or you are in one of the common exception scenarios we outlined on the previous page.\nIf the code runs without throwing an exception, then the program continues as usual. However, if the try block results in an exception, then a later catch statement will be called. catch gives the program instructions on what to do in the event of an exception. The catch block prevents the program from stopping when it reaches the exception.\nHere’s how we can update our Temperature constructor with a try/catch to handle the exception:\npublic Temperature(double fahrenheit) { try { Fahrenheit = fahrenheit; } catch(ArgumentOutOfRangeException e) { Fahrenheit = -459.67; } }The first action the constructor method does is call the Fahrenheit’s setter method. If invoking the setter does not result in an exception being thrown, then the new Temperature object is created and given an initial Fahrenheit value. If the action inside the try block results in an exception, or specifically an ArgumentOutOfRange instance, then the catch block runs and the initial value of a new Temperature object’s fahrenheit field is set to absolute zero.\nIn this example, we don’t explicitly do anything with the argument e (“e” for exception). However, there are scenarios where you may wish to display the exception or it’s message in the view of your running app. It also an option to rethrow an exception after it has been caught. You won’t need to rethrow exceptions in this course, but just know that it can be done.\nNow, running the same sample input from the previous page does not output an exception:\nExample Input:\nTemperature insideTemp = new Temperature(73); Console.WriteLine(insideTemp.Fahrenheit); Temperature outsideTemp = new Temperature(-8200); Console.WriteLine(outsideTemp.Fahrenheit);Output:\n73 -459.67 Although the exception has still been thrown, the try/catch construction diverts the program from terminating when it’s met.\nSome try/catch blocks can also contain a finally statement that will run whether or not an exception was thrown. In this example, perhaps we want to communicate that if a Fahrenheit value is passed into the constructor that is less than absolute zero, then the fahrenheit field will be set to absolute zero.\npublic Temperature(double fahrenheit) { try { Fahrenheit = fahrenheit; } catch(ArgumentOutOfRangeException e) { Fahrenheit = -459.67; } finally { Console.WriteLine(\"Fahrenheit cannot be less than -459.67.\"); } }This finally statement is a tad redundant, since presumably a user will know this before trying to set the value. A more likely scenario to use a finally block might be in connecting to a database or other external service. For example, if a connection is opened within a try block and an exception is still caught, we’ll want to close the connection no matter what happens next.\nWhat to Catch When working with a try/catch statement, in statically-typed languages like C#, you can declare the type of exception you wish to catch. Given inheritance and polymorphism, catching the base System.Exception type will result in all exceptions being caught. This is not advised. Be specific about the types of exceptions you want to catch, as we have in the example above.\nIf you have reason to believe that a given method may return an exception but you are unsure which type exactly, try/catch can — and should — include more than one catch block. Rather than catching one abstract exception type, you want to attempt to catch the exception with specificity so that the resulting decisions are meaningful. It is also important to note that order matters when it comes to catching. If the thrown exception matches the first catch block, then that block executes and any remaining catch blocks are ignored. If that exception thrown doesn’t match the first catch argument, then it goes on to the next statement to check for a type match.\nCatching the base class Exception – that is, all exceptions – is sometimes referred to as exception swallowing. In these cases, exceptions are simply absorbed and not re-thrown or logged. If your program has a bug, or reaches an undesirable state, you want to know about it! Don’t swallow exceptions.\nHow to Avoid Exceptions For some types of exceptions, there’s little you can do. If a database goes down, it’s down. However, many situations that result in exceptions are avoidable.\nValidate User Input Validate user input to ensure that it is of the type your code expects, and satisfies any other implicit constraints (such as numeric input falling within a certain range).\nIf you’re working within a framework such as ASP.NET, use the built-in validation capabilities to make this easier. We’ll cover these in detail when we discuss model validation.\nPerhaps the most important thing to keep in mind here is that you should never assume that input given to your program is safe and valid. This is the case even when you’re providing browser-based validation. Clever (or malicious) users can bypass most forms of client-side validation.\nCheck for null References If your code depends on an input parameter not being null to work properly, and it’s possible to gracefully handle the situation – for example, by re-prompting the user – then you should do so.\nAs with exceptions above, if there is no way to reasonably recover from a null pointer, then you shouldn’t swallow it. Furthermore, it’s generally a bad idea to catch a null pointer exception (NullReferenceException in C#). Read more on why this is the case.\nCheck Your Understanding Question Select an anomalous event when you may choose to not catch a thrown exception.\nNone. All exceptions should be handled with catch. A database responsible for providing all of the image data on your site cannot be reached. A user inputs string data into a form designed to handle integers. It’s the bottom of the ninth and you just want the game to be over Question True/False: Exception swallowing is a good choice to ensure no exceptions break your code.",
    "description": "When you include exceptions in your C# programs, you must decide what should take place once one is thrown. Some languages, like Java, require exceptions to be handled at the time of compiling. These are checked exceptions. When an exception is not handled in compiling, it is passed to runtime and called an unchecked exception. All exceptions in C# are unchecked. Therefore it is up to you, the programmer, to decide what to do to handle one when the need arises in runtime.",
    "tags": [],
    "title": "Handling Exceptions",
    "uri": "/exceptions/reading/handling-exceptions/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 9: Introduction to ASP.NET \u003e Reading",
    "content": "ASP.NET is a framework in the .NET Core family that is used to build web applications. While ASP.NET Core can be used to build a wide variety of web applications, we will be focusing on using it to build MVC web applications.\nGetting Started To create a new ASP.NET Core MVC project, start a new project in Visual Studio.\nNote You are creating the inital MVC template. You will not have the routes seen in the video.\nYou will add these to your project in the next chapter.\nWindows Users Use the Get started Menu to Create a new project.\nWhen selecting the type of project, select ASP.NET Core Web App (Model-View-Controller).\nThere are 2 ways to find this easily:\nUse the search bar.\nSelect “Web” from the dropdown menu.\nOnce you have your project type, click Next.\nName your project HelloASPDotNET and put it in the appropriate directory for all of your classwork. Hit Next.\nSelect the Framework. We are going to use .NET Core 6.0. You do not need to adjust any other options at this point. Select Create!\nVisual Studio creates a fully-functional web application for you.\nTip Troubleshooting: This tutorial for Windows can help you if you are stuck.\nMac Users Open VSC and navigate to the folder you would like to make your new app in the integrated terminal.\nRun this command in your terminal: dotnet new mvc -o HelloASPDotNET.\nOnce the terminal is ready, run code -r HelloASPDotNET.\nVisual Studio Code opens a fully-functional web application for you!\nTip Troubleshooting:\nThis tutorial can help you if you are stuck using the C# Dev Kit to work with ASP.NET Core MVC projects.\nAll Users Now launch the application!\nMac Users: Click Run project in the upper right-hand corner.\nWindows Users: Select HelloAspDotNet (or whatever you named your project) and try launching the application if it doesn’t work initially.\nEventually, your browser will open and display your application. Take note of the port number in the address bar. You should see localhost:XXXX. This means your computer is serving the web page.\nTip Troubleshooting: Refer to the guides mentioned above\nExplore the Code In the Controllers directory, check out HomeController.cs. Microsoft provided the code in HomeController and that is why our application ran immediately after we created it and was full of content.\nCheck Your Understanding Question True/False: You should take note of the port number the server is using to run your application.",
    "description": "ASP.NET is a framework in the .NET Core family that is used to build web applications. While ASP.NET Core can be used to build a wide variety of web applications, we will be focusing on using it to build MVC web applications.\nGetting Started To create a new ASP.NET Core MVC project, start a new project in Visual Studio.\nNote You are creating the inital MVC template. You will not have the routes seen in the video.",
    "tags": [],
    "title": "Create a New ASP.NET Project",
    "uri": "/asp-net-intro/reading/create-asp-project/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 10: Controllers and Routing \u003e Reading",
    "content": "Now that you know the basics of action methods and controllers, we can start to add some more variables into the mix. Some action methods can take in parameters in the form of query strings or sections of the URL path. Passing this URL data to the controller is one step closer to more flexible web applications.\nOn the previous page, we learned that a route is the mechanism by which a request path gets assigned to a controller within our application. In this section, we’ll further explore routes and how data is transferred from a webpage with a given route to a specific controller.\nQuery Strings are URL Data A brief refresher: query strings are additional bits of information tacked onto the ends of urls. They contain data in key-value pairs.\nwww.galaxyglossary.net?aKey=aValue\u0026anotherKey=anotherValue\u0026thirdKey=thirdValue Controllers and Parameters Query Strings We can pass different parameters into an action method. Let’s add a method called Welcome() to HelloController.cs.\n1 2 3 4 5 // GET: /\u003ccontroller\u003e/welcome public IActionResult Welcome(string name) { return Content(\"\u003ch1\u003eWelcome to my app, \" + name + \"!\u003c/h1\u003e\", \"text/html\"); } Right now, the Welcome() method is using conventional routing, so it will respond to requests at localhost:5001/hello/welcome. The Welcome() method has one argument, name. However, when we run the app and navigate to localhost:5001/hello/welcome, we can see that name has no value.\nname does not receive a value from anywhere, so to start, we need to pass name a value. We can do so with a query string. name will act as the key and the value will be \"Tillie\". Let’s navigate to localhost:5001/hello/welcome?name=Tillie. Now the webpage displays a simple string of HTML that says “Welcome to my app, Tillie!”.\nWhen we are adding arguments to an action method, we need to not only think about the request type and route, we need to think about where those variables are going to get values. Here we were able to give a value to that argument in the URL itself with a query string. However, when working with query strings, we want to provide a value to name in case the user navigates to a URL without a query string.\nWe can do so by modifying the method signature slightly.\n1 2 3 4 5 // GET: /\u003ccontroller\u003e/welcome public IActionResult Welcome(string name = \"World\") { return Content(\"\u003ch1\u003eWelcome to my app, \" + name + \"!\u003c/h1\u003e\", \"text/html\"); } On line 2, we give the argument, name, a value of \"World\". We do this to make name an optional parameter. Optional parameters are designated with a default value (in our case, \"World\") and method calls do not have to include a value for that parameter. When working with query strings, it is wise to make the key an optional parameter in case no value is provided for it. If a query string is not provided and we navigate to just localhost:5001/hello/welcome, then our webpage will display “Welcome to my app, World!”.\nNow, we can dive into using attribute routing to get Welcome() to respond at the same route and to a GET request. We know from our experiment above we can do this without attributes, but we want to be specific in our routes and the request type. First, we need to add a [HttpGet] attribute to specify that our method responds to a GET request. We also want to specify the path with the [Route] attribute.\n1 2 3 4 5 6 [HttpGet] [Route(\"/helloworld/welcome/{name}\")] public IActionResult Welcome(string name = \"World\") { return Content(\"\u003ch1\u003eWelcome to my app, \" + name + \"!\u003c/h1\u003e\", \"text/html\"); } When writing the path for our [Route(\"path\")] attribute, we have surrounded name in curly braces. The use of curly braces in the path portion of the attribute means that we don’t want to use the word “name” in the route, but the value of the variable, name. If we ran the app now and navigated to localhost:5001/helloworld/welcome or localhost:5001/helloworld/welcome?name=Tillie, the webpages are not found. We have given name a default value in the method signature, however, we have to designate in the path inside [Route(\"path\")] that name is optional. When we do so, we are making the action method more flexible so it can respond at localhost:5001/helloworld/welcome or localhost:5001/helloworld/welcome?name=Tillie. In attribute routing, if we want to designate a parameter as optional, we will use a ? after the variable name like so:\n1 2 3 4 5 6 [HttpGet] [Route(\"/helloworld/welcome/{name?}\")] public IActionResult Welcome(string name = \"World\") { return Content(\"\u003ch1\u003eWelcome to my app, \" + name + \"!\u003c/h1\u003e\", \"text/html\"); } Adding the ? in the curly braces after name designates that portion of the path as optional. If we don’t provide a query string, the webpage will display the classic “Welcome to my app, World!”. If we do provide a query string, we will see the resulting page:\nPath Variables Above, we briefly mentioned that some controller methods could take in parameters in the form of a section of a URL path. These types of parameters are called path variables. Path variables differ from query strings in that the data is not passed in as a key-value pair and that a path variable is a portion of the URL path. Query strings are a separate component of a URL that occurs after a ? and are separate from the path. When using a path variable, instead of typing the name of a variable into the path, we type the value we want to pass to the action method at that route.\nWhen we added the [Route(\"/helloworld/welcome/{name?}\")] attribute to the Welcome() method, we made it possible for the Welcome() method to respond to requests at localhost:5001/helloworld/welcome/Tillie. In that route, name is used as a path variable and passed the value of Tillie in the path, displaying the following webpage.\nDiving into the mechanics of how this worked, we remember that enclosing name in curly braces specifies that we want to use the value of name, not the word “name”. While path variables and query strings are drastically different, the two share a similarity. Both path variables and query strings allow us to give an action method a value for a parameter as part of a URL. This is because name is a route parameter. A route parameter is a portion of the route (which encompasses both the path and the query string) that is passed from the route to the action method. While our controllers and applications are still small, the differences between a query string and a path variable may seem negligible. However, as applications become larger and controllers more complex, the different use cases for path variables and query strings will become clear.\nNote Before moving on, make sure to add info about the different routes the method maps to in comments in your code!\nCheck Your Understanding Question Your application is served at myfavoriteplanets.net. What is the path that this controller maps to?\n1 2 3 4 5 6 7 8 9 10 11 12 13 [HttpGet] [Route(\"/venus/{terrestrial?}\")] public IActionResult VenusSurface(string terrestrial) { if (terrestrial == true) { return \"Venus is rocky.\" } else { return \"Venus is gaseous.\" } } myfavoriteplanets.net/venus?terrestrial=true net.myfavoriteplanets/venus?terrestrial=true myfavoriteplanets/venus?terrestrial=true myfavoriteplanets/venus/terrestrial ",
    "description": "Now that you know the basics of action methods and controllers, we can start to add some more variables into the mix. Some action methods can take in parameters in the form of query strings or sections of the URL path. Passing this URL data to the controller is one step closer to more flexible web applications.\nOn the previous page, we learned that a route is the mechanism by which a request path gets assigned to a controller within our application.",
    "tags": [],
    "title": "Controllers with Parameters",
    "uri": "/aspdotnet-controllers-and-routes/reading/controllers-parameters/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 10: Controllers and Routing",
    "content": "GET Request While reading the chapter, you created a basic Hello, World application using ASP.NET called HelloASPDotNET. Open that project up in Visual Studio, and get ready to add some features. Before you start working, create a new branch so you can revisit where you ended the reading at.\nModify your HelloController class to display a form on a GET request that asks the user for both their name and the language they would like to be greeted in. It should look something like this:\nThe resulting form submission should return and display the message, “Bonjour Chris”.\nNote The language is presented in a dropdown, more formally known as a select element. For more information about the select element and how it works, read the MDN documentation .\nCheck your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [HttpGet] public IActionResult Index() { string html = \"\u003cform method='post'\u003e\" + \"\u003cinput type='text' name='name' /\u003e\" + \"\u003cselect name='language'\u003e\u003coption value='english' selected\u003eEnglish\u003c/option\u003e\" + \"\u003coption value='spanish'\u003eSpanish\u003c/spanish\u003e\" + \"\u003coption value='bosnian'\u003eBosnian\u003c/option\u003e\" + \"\u003coption value='vietnamese'\u003eVietnamese\u003c/option\u003e\" + \"\u003coption value='french'\u003eFrench\u003c/option\u003e\u003c/select\u003e\" + \"\u003cinput type='submit' value='Greet Me!'/\u003e\" + \"\u003c/form\u003e\"; return Content(html, \"text/html\"); } POST Request When the user submits the form (via a POST request), they should be greeted in the selected language. Your new feature should:\nInclude at least 5 languages, with English being the default. If you don’t speak 5 languages yourself, ask your friend the Internet .\nInclude a new public static method, CreateMessage, in the HelloController that takes a name as well as a language string. Based on the language string, you’ll display the proper greeting.\nCheck your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public static string CreateMessage(string name, string language) { string helloTranslation = \"\"; switch (language) { case \"french\": helloTranslation = \"Bonjour \"; break; case \"spanish\": helloTranslation = \"Hola \"; break; case \"bosnian\": helloTranslation = \"Zdravo \"; break; case \"vietnamese\": helloTranslation = \"Xin Chao \"; break; case \"english\": helloTranslation = \"Hello \"; break; } return helloTranslation + name; } Bonus Mission Add some more HTML and inline styles to your returned greeting response string so that the displayed message looks a bit nicer. ",
    "description": "GET Request While reading the chapter, you created a basic Hello, World application using ASP.NET called HelloASPDotNET. Open that project up in Visual Studio, and get ready to add some features. Before you start working, create a new branch so you can revisit where you ended the reading at.\nModify your HelloController class to display a form on a GET request that asks the user for both their name and the language they would like to be greeted in.",
    "tags": [],
    "title": "Exercises",
    "uri": "/aspdotnet-controllers-and-routes/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 8: Interfaces and Polymorphism",
    "content": "As a new C# coder, it might take you some time to recognize when to use interfaces.\nTo help overcome this, let’s consider a common occurrence — sorting a List of objects.\nIf the list contains string or numerical entries, then sorting the list is trivial:\nlistName.Sort(); However, if the elements are custom objects (like Cat), then sorting the list becomes more complicated. This is because the objects may contain multiple fields, any of which could be used as a sorting option. For Cat objects, this could include name, age, or mass.\nGetting Started Open up your exercises starter code repo in Visual Studio to get started!\nYou will practice implementing interfaces by playing around with a small ice cream store. It consists of a refrigerated display Case, which contains a collection of ice cream Flavor objects and a selection of Cone objects.\nTip Did you notice the abstract Ingredient class? This gets extended by Flavor and Cone to help streamline the code.\nSorting Flavors by Name To display a menu for your customers, you need to sort the ice cream flavors alphabetically by the name field. Fortunately, the IComparer interface helps you solve the sorting-objects-by-field problem.\nTip Before proceeding, make sure you have read the section on the IComparer interface !\nCreate a Sorting Class Create a new class called FlavorComparer and have it implement the IComparer interface:\npublic class FlavorComparer : IComparer\u003cFlavor\u003e To start sorting, we need a Compare() method. Add the following code to create one:\n1 2 3 4 public int Compare(Flavor x, Flavor y) { return string.Compare(x.Name, y.Name); } This returns an integer (-1, 1, or 0) depending on which Flavor object x or y comes first, alphabetically.\nSorting the Flavors List In Program.cs, we declare menu that contains everything in the Case as well as specific availableFlavors and availableCones collections.\n10 11 12 Case menu = new Case(); List\u003cFlavor\u003e availableFlavors = menu.Flavors; List\u003cCone\u003e availableCones = menu.Cones; To sort the availableFlavors list, first create a new FlavorComparer object.\n13 FlavorComparer comparer = new FlavorComparer(); Next, call the Sort method on availableFlavors and pass the comparer object as the argument.\n15 availableFlavors.Sort(comparer); Iterating through the availableFlavors list with a loop before and after the sort shows the results. (The output below displays just the name fields).\nBefore: After: Vanilla Chocolate Chocolate Red Velvet Red Velvet Rocky Road Rocky Road Strawberry Sorbet Strawberry Sorbet Vanilla Tip Instead of declaring and initializing the comparer object, we could combine steps 1 and 2 by using a single statement:\navailableFlavors.Sort(new FlavorComparer()); Sorting Cones by Cost Now let’s sort our availableCones list by cost, from least expensive to most expensive.\nCreate the new class ConeComparer.\nFollow the example above to implement the IComparer interface and evaluate Cone objects by cost. Since comparing two numbers is different from comparing strings, try getting the difference between the two numbers. If the difference is positive, then we know the first number is greater. If the difference is negative, then we know that the second number is greater.\nCheck your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class ConeComparer : IComparer\u003cCone\u003e { public ConeComparer() { } public int Compare(Cone x, Cone y) { double diff = x.Cost - y.Cost; if(diff == 0) { return 0; } else if (diff \u003c 0) { return -1; } else { return 1; } } } In the Main() method, sort the availableCones list, then print the elements to the screen to verify the results.\nBefore: After: Waffle: $1.25 Bowl: $0.05 Sugar: $0.75 Wafer: $0.50 Wafer: $0.50 Sugar: $0.75 Bowl: $0.05 Waffle: $1.25 Check your solution 1 2 3 4 5 6 ConeComparer compareCones = new ConeComparer(); availableCones.Sort(compareCones); foreach (Cone c in availableCones) { Console.WriteLine(c); } Tip Remember that the cost field is of type double and Compare() has a return type of type int!\nBonus Mission Modify FlavorComparer to sort Flavor objects by the number of allergens, from lowest to highest.\nNext Steps In these exercises, you practiced implementing existing interfaces. In the studio activity, you will design and implement your own.",
    "description": "As a new C# coder, it might take you some time to recognize when to use interfaces.\nTo help overcome this, let’s consider a common occurrence — sorting a List of objects.\nIf the list contains string or numerical entries, then sorting the list is trivial:\nlistName.Sort(); However, if the elements are custom objects (like Cat), then sorting the list becomes more complicated. This is because the objects may contain multiple fields, any of which could be used as a sorting option.",
    "tags": [],
    "title": "Exercises",
    "uri": "/interfaces-and-polymorphism/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 8: Interfaces and Polymorphism \u003e Reading",
    "content": "An interface is similar to an abstract class, with some important differences. Interfaces allow us to create code organized by behavior, rather than static data. While some object-oriented languages encourage creating classes that behave like interfaces to improve software design, C# is a language that includes interfaces as a formal construction. Like abstract classes, interfaces cannot be instantiated and they have limitations on what kind of behavioral information they may contain. A C# interface may contain:\nConstants Method signatures Static methods Default methods Creating an Interface Method Signatures One really useful aspect of using an interface is the ability to specify method signatures. A method signature includes the name, parameters, and return type of a method, but no body.\nAs part of our cat application, let’s create a method signature, Eat, as part of an interface, IFeedable. “I” for interface, of course! More on this name below.\nExample 1 2 3 4 5 6 public interface IFeedable { void Eat(); } In the code above, notice the following:\nWe need to use the interface keyword to define our interface, IFeedable. Eat only has a signature. We only provide a body for methods defined in interfaces in special circumstances, defined below under Default Methods. Eat also does not have an access modifier . Interface members are public by default and it’s best practice to keep them public. The IFeedable interface itself is declared public, which means any other class may use it. We may also leave off public, making the interface protected internal, or usable only within the same assembly. Recall this access modifier described in this table. The name is indicative of the behavior that the interface is intended to describe. While this is only a convention, most interfaces have names that are adjectives preceded with an “I”. While this is only a convention, you should follow it in the interest of code-readability. Static Methods A static method in an interface can contain code in the body. However, a static method cannot contain any references to instance properties in other classes. This means that our static methods should only deal with universal behaviors that are NOT dependent on instance properties.\nDefault Methods A default method has a body and is a fully-formed method. It may be extended by classes implementing the interface.\n1 2 3 4 5 6 7 8 9 public interface IFeedable { void Eat(); void Nap() { Console.WriteLine(\"snooooozzze\"); } } The intended purpose of default methods is to allow programmers to add a method to an interface that has already been released, while not forcing those already using the interface to add new code to their classes. You should avoid using default methods in all situations other than the one described here.\nImplementing an Interface The purpose of an interface is to define a contract of behaviors that classes uphold. In doing so, we say that they “implement the interface”. The syntax for implementation is the same as that for inheritance — so adhering to the interface naming convention comes in handy to identify a case of extension versus implementation. Here’s how we can use the IFeedable interface in defining our Cat class.\nExample 1 2 3 4 5 6 7 8 9 10 11 public class Cat : IFeedable { public void Eat() { Console.WriteLine(\"nom nom\"); } // ...rest of the class definition... } Since we’ve declared that Cat implements IFeedable, we have to provide an implementation for the Eat method, with the signature as specified in the interface definition.\nNote the absence of the virtual and override keywords we used in inheritance . The class is implementing the interface, rather than extending it so different method rules apply.\nNote You may both extend a class and implement an interface at the same time. Here’s an example of how we might define HouseCat to extend the class Cat, as well as an interface IPetable that is not already inherited by Cat:\n1 2 3 4 5 public class HouseCat : Cat, IPetable { // ^^ Note that order matters here. The class being extended // must come before any interfaces being implemented } As with classes, interfaces define a type that can be used when declaring fields and methods. This allows us to make our code more abstract, thus making it more extensible and adaptable. If an application is extensible, it is easier for programmers for new capabilities to be added later on. For example, here’s how we might modify our CatSitter class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class CatSitter { public IFeedable Pet { get; set; } public CatSitter(IFeedable pet) { Pet = pet; } public void FeedTheCat() { // ...code to prepare the cat's meal... Pet.Eat(); } } Note that we’ve declared the property Pet to be of type IFeedable. This class assumes that the only behavior of Pet that we’ll need within the class is the ability to Eat. But if that’s all we need, then we should relax the requirements on the Pet property as much as possible. In fact, there’s nothing specific about cats in this class, so we might make our code a step more abstract and flexible by doing the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class PetSitter { public IFeedable Pet { get; set; } public PetSitter(IFeedable pet) { Pet = pet; } public void FeedThePet() { // ...code to prepare the pet's meal... Pet.Eat(); } } public class CatSitter : PetSitter { public CatSitter(IFeedable pet) : base(pet) { Pet = pet; } // other Cat-specific behavior } We’ve created a PetSitter class that encapsulates the behavior for any pet (any IFeedable, actually), and have CatSitter extend PetSitter. This allows other classes to extend PetSitter to make, say, a DogSitter that knows how to play fetch with their pet, or a HorseSitter that knows how to go for trail rides with their pet. It also reduces the dependency of the FeedThePet method on the specific type of pet, since the basic feeding behavior is the same for all types of pets.\nSince the base class does not have a no-arg constructor, we must, at minimum, extend the PetSitter constructor in any subclass. Of course, we can always add more constructors to the subclass.\nTo use this new class design, we can revise the sample code from above as follows:\n1 2 3 4 HouseCat suki = new HouseCat(\"Suki\", 12); CatSitter annie = new CatSitter(suki); annie.FeedThePet(); While the code usage here remains unchanged except for changing the method name from FeedTheCat to the more generic FeedThePet, the opportunities for using the classes we’ve built are much wider since the defined classes are no longer dependent on the specific Cat class. Also notice that we’ve used the object suki in a polymorphic way, creating it as a HouseCat, but using it as an IFeedable to instantiate a CatSitter object.\nAs is the case with classes inherited from others, interfaces also enable polymorphic usage of objects. We can create an object and then use it in different contexts based on the interfaces that it implements.\nCrucially, interfaces may not be instantiated. You may implement an interface, or declare variables and parameters as interface types. You cannot, however, create an instance of an interface.\nBenefits of Using Interfaces Once you get used to interfaces, you’ll begin to think more abstractly about which behaviors your code requires rather than which classes your code requires. This means you will start to “code to interfaces” (an OOP principle) instead of coding to classes, and your code will become more flexible and extensible.\nHere are a few benefits of using interfaces:\nYou can only extend one class, but you may implement many interfaces. You can extend a class and implement an interface at the same time. By declaring variables and parameters as interface types, you make your code useful for a much wider variety of situations. When you declare properties and return types to be interface types, you decouple code using your classes from the actual class types you use. This means that you are free to change the specific implementation of your classes without affecting those using them. You don’t need to start creating interfaces to use their power! As we cover later in this chapter, there are several interface types provided by the C# language spec that you may find handy.\nCheck Your Understanding Question Choose the appropriate option to fill in the blanks.\nA class can extend _______ class(es) and implement ________ interface(s).\none, one one, more than one more than one, one more than one, more than one Question True or False: An interface in C# must begin with the letter “I”.",
    "description": "An interface is similar to an abstract class, with some important differences. Interfaces allow us to create code organized by behavior, rather than static data. While some object-oriented languages encourage creating classes that behave like interfaces to improve software design, C# is a language that includes interfaces as a formal construction. Like abstract classes, interfaces cannot be instantiated and they have limitations on what kind of behavioral information they may contain.",
    "tags": [],
    "title": "Interfaces",
    "uri": "/interfaces-and-polymorphism/reading/interfaces/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "Let’s examine an inheritance relationship between two classes: Cat and HouseCat. HouseCat is a class that inherits from Cat, so HouseCat receives the data and behaviors of Cat. These inherited traits are things like fields, properties, and methods. Any fields and non-constructor methods in Cat are available to each instance of HouseCat.\nWhen we speak about an inheritance relationship, we say that a HouseCat is a Cat, or extends Cat. In order to define a class that inherits from another, we use the : syntax.\n1 2 3 4 5 6 7 8 9 public class Cat { // ...code for the Cat class... } public class HouseCat : Cat { // ...code for the HouseCat class... } We say that HouseCat is a subclass, derived class, or child class of Cat, and we say that Cat is the superclass, base class, or parent class of HouseCat.\nIn C#, a class may extend only one class. Classes may extend each other in turn, however. This creates hierarchies of classes. We often visualize these by drawing each class as a box, with an arrow pointing from the subclass to the base class. The image below show that B extends A.\nThe shaded portion of these boxes can include additional information about each class. We’ll learn about what we might put here in a little bit.\nInheritance is an essential mechanism for sharing data and behavior between related classes. Using it effectively creates organized code with groups of classes that have increasingly specialized behavior.\nWhen this happens, we can visualize the inheritance structure with a slightly more complex diagram.\nYou can see that classes B, C, and D all extend class A. And class E extends class D which itself extends class A. So class E involves an even greater specialization of behavior than class D.\nFields and non-constructor methods are directly available to instances of the subclass, subject to any access modifiers. In general, this means that private and internal members of a base class are not accessible to a subclass. However, if the subclass and base class are in the same assembly, internal allows access to a member.\nNote If anything in the last paragraph was fuzzy, this is a good time to review access modifiers in C# .\nCheck Your Understanding Question Which of the following is NOT a term for one class that extends another:\nsubclass derived class extension class child class Question A class, Greeting, extends another class, Message. By convention, how would we represent the relationship between these classes in a diagram?\ntwo boxes with an arrow pointing from Greeting to Message two boxes with an arrow pointing from Message to Greeting two boxes with Greeting positioned inside of Message two boxes with Greeting positioned directly beneath Message ",
    "description": "Let’s examine an inheritance relationship between two classes: Cat and HouseCat. HouseCat is a class that inherits from Cat, so HouseCat receives the data and behaviors of Cat. These inherited traits are things like fields, properties, and methods. Any fields and non-constructor methods in Cat are available to each instance of HouseCat.\nWhen we speak about an inheritance relationship, we say that a HouseCat is a Cat, or extends Cat. In order to define a class that inherits from another, we use the : syntax.",
    "tags": [],
    "title": "Inheritance in C#",
    "uri": "/inheritance/reading/csharp-inheritance/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 5: Classes Part 2 \u003e Reading: Classes Part 2",
    "content": "We explored configuring data within classes with fields and properties. Now let’s turn our attention back to class behavior (methods).\nQuick Method Review In the previous chapter , we learned that:\nA method belongs to a class and performs an action.\nMethods cannot stand on their own—they must be part of a class.\nTo call a method on an object, use dot notation:\nobjectName.MethodName(arguments); Access modifiers apply to methods:\nprivate methods are those that are NOT useful outside of the class but contribute internally to helping the class behave as desired or expected.\npublic methods contain code that other classes need to use when they implement the class containing those methods. Make methods public only when you expect other classes to use them, and when you are committed to maintaining those methods for other programs.\nLet’s take a closer look at two different types of methods, both of which we have used in earlier examples.\nInstance Methods As we learned in the last chapter, instance methods define the behaviors that are unique or specialized to each class. Every object created from a class will carry a copy of these methods.\nInstance methods depend on the data stored in an individual object. If two objects call the same method, the results will vary when the objects contain different data.\nLet’s add a couple more instance methods to our Student class.\nWhat are the behaviors that our Student class should have? To start, it makes sense that when a student takes a class and earns a grade, their data should be updated accordingly. Additionally, it would be nice to easily identify the grade level of a student—freshman, sophomore, junior, or senior.\nThe framework for these new methods is shown in the Student class below, but each method is missing some code. Filling in that code is left for you to do in the chapter exercises.\n4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 public class Student { private static int nextStudentId = 1; public string Name { get; set; } private readonly int studentId; public int NumberOfCredits { get; set; } public double Gpa { get; set; } public Student(string name, int sId, int numberOfCredits, double gpa) { Name = name; studentId = sId; NumberOfCredits = numberOfCredits; Gpa = gpa; } public Student(string name, int sId) { Name = name; studentId = sId; NumberOfCredits = 0; Gpa = 0.0; } public Student(string name) { Name = name; studentId = nextStudentId; nextStudentId++; NumberOfCredits = 0; Gpa = 0.0; } public string StudentInfo() { return (Name + \" has a GPA of: \" + Gpa); } public void AddGrade(int courseCredits, double grade) { // Update the appropriate fields: NumberOfCredits, Gpa } public string GetGradeLevel() { // Determine the grade level of the student based on NumberOfCredits } } Tip When creating your classes, think about the behaviors that you want to make available, as well as the access level of those methods.\nStatic Methods We’ve already used static methods quite a bit in this course, all the way back to our first C# method:\nstatic void Main(string[] args) { // Code here... }Now let’s examine them in the context of what we’ve recently learned about classes.\nJust like static fields, static methods belong to the class as a whole, and not to any of the specific instances of the class. Thus, they are sometimes also called class methods. A static method is essentially the opposite of an instance method, since the two cases are mutually exclusive. Instance methods rely on each object’s specific data, while static methods must NOT rely on data from a specific object.\nWe call a static method by preceding it with the class name and using dot-notation. Here’s an example that we looked at previously .\nExample HelloMethods/Program.cs:",
    "description": "We explored configuring data within classes with fields and properties. Now let’s turn our attention back to class behavior (methods).\nQuick Method Review In the previous chapter , we learned that:\nA method belongs to a class and performs an action.\nMethods cannot stand on their own—they must be part of a class.\nTo call a method on an object, use dot notation:\nobjectName.MethodName(arguments); Access modifiers apply to methods:\nprivate methods are those that are NOT useful outside of the class but contribute internally to helping the class behave as desired or expected.",
    "tags": [],
    "title": "Instance and Static Methods",
    "uri": "/classes-part-2/reading/instance-and-static/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 3: Control Flow \u0026 Collections \u003e Reading",
    "content": "You can practice loop syntax in the LoopsExamples project in csharp-web-dev-examples repo .\nfor Loop In C#, we write a definite loop (aka a for loop) as:\nfor (int i = 0; i \u003c 10; i++ ) { Console.WriteLine(i); }Output:\n0 1 2 3 4 5 6 7 8 9The C# for loop gives you explicit control over the starting, stopping, and stepping of the loop variable inside the parentheses. You can think of it this way:\nfor (start clause; stop clause; step clause) { statement1 statement2 ... }If you want to start at 100, stop at 0 and count backward by 5, the loop is written as:\nfor (int i = 100; i \u003e= 0; i -= 5) { Console.WriteLine(i); }Output:\n100 95 90 ... //countdown continues foreach Loop C# also provides a syntax to iterate over any sequence or collection, such as an array:\nint[] nums = {1, 1, 2, 3, 5, 8, 13, 21}; foreach (int n in nums) { Console.WriteLine(n); }Here, the loop variable moves through the items in the array of integers, nums. The syntax here uses the word, in. This type of loop is known as a foreach loop.\nTip When considering this structure, it can be helpful to read the code sample above to yourself as “For each integer n in array nums…”.\nThis loop version also works with a string, where we can convert the string to an array of characters:\nstring msg = \"Hello World\"; foreach (char c in msg.ToCharArray()) { Console.WriteLine(c); }As you see, to iterate through a string in this way, C# requires an extra string method, .ToCharArray(), to convert the string to an array of characters.\nwhile Loop C# also supports the while loop, or indefinite loop. A while loop in C#:\nint w = 0; while (w \u003c 3) { w++; }do-while Loop C# adds an additional, if seldom used, variation of the while loop called the do-while loop. The do-while loop is very similar to while, except that the condition is evaluated at the end of the loop rather than the beginning. This ensures that a loop will be executed at least one time. In some situations, the do-while loop is preferable, because it avoids an additional assignment prior to the loop.\nFor example:\ndo { Console.WriteLine(\"Hello, World\"); } while (false);Output:\nHello, WorldAbove, the message prints despite the condition never being met.\nbreak Statements in Loops There are instances where you may want to terminate a loop if a given condition is met. In these instances, the break statement comes in handy. For example, say you want to loop through an array of integers to search for a given value. Once that number is found, you want to quit the loop. You can do the following:\nint[] someInts = {1, 10, 2, 3, 5, 8, 10}; int searchTerm = 10; foreach (int oneInt in someInts) { if (oneInt == searchTerm) { Console.WriteLine(\"Found it!\"); break; } }In the code above, instead of the for loop iterating through all the integers in the array, it will stop after it finds the first matching instance. So once it finds the first 10 in the array, it prints “Found it!” and then terminates the loop. If the break statement weren’t there, the loop would continue and when it found the second 10, it would print “Found it!” a second time.\nNote that the break statement terminates the innermost loop that it is contained within. So if you have nested loops and use a break statement within the innermost loop, then it will only terminate that loop and not the outer one. If a break is present in the outer loop, it — and any other block nested within it — is terminated when the break runs.\ncontinue Statements in Loops The continue statement is similar to, but importantly different from, the break statement. Like break, it interrupts the normal flow of control of the loop. But unlike break, the continue statement only terminates the current iteration of the loop. So the loop will continue to run from the top after a continue statement. Here is an example:\nint[] someOtherInts = {1, 10, 2, 3, 5, 8, 10}; int newSearchTerm = 10; foreach (int oneNewInt in someOtherInts) { if (oneNewInt == newSearchTerm) { Console.WriteLine(\"Found it!\"); continue; } Console.WriteLine(\"Not here\"); }The above program will print “Not here” on every iteration of the for loop except where the number has been found. So the output looks like this:\nNot here Found it! Not here Not here Not here Not here Found it!Because of the continue statement, the final print statement in the for loop is skipped. If the continue statement weren’t there, the output would look like this instead (notice the extra “Not here” printouts):\nNot here Found it! Not here Not here Not here Not here Not here Found it! Not hereConcatenating Strings in Loops A use case of loops may be to concatenate strings. For example, if we have an array of strings containing each word in a sentence, we may want to concatenate each value in the array to reform our sentence.\nstring[] arrayOfWords = {\"Books\", \"Cheese\", \"Trees\", \"Laughter\"}; string finalSentence = \"\"; foreach (string word in arrayOfWords) { finalSentence += word; }This code would work well for this situation. However, because strings are immutable, when the value of word is appended onto finalSentence, a new string object is created. This means that the longer arrayOfWords is, the more intensive and inefficient the code becomes. We can accomplish the same thing with the StringBuilder class. StringBuilder objects are mutable strings of characters and the documentation contains a full list of important properties and methods.\nIf we wanted to use a StringBuilder object instead of a simple string in the above code, we would modify it like so:\nStringBuilder newFinalSentence = new StringBuilder(); foreach (string word in arrayOfWords) { newFinalSentence.Append(word); }First, we need to initialize a new StringBuilder object, finalSentence, with new StringBuilder(). The Append() method in the StringBuilder class adds the value of word to the end of the finalSentence object.\nWhile concatenating strings is just one of the many use cases of loops in C#, StringBuilder is a fun tool to add to your toolkit. If we don’t use a StringBuilder object, the longer arrayOfWords is, the slower our program will get. While at this level, we may not be too concerned with a program’s performance, in enterprise applications, performance can be everything.\nCheck Your Understanding Question char[] chars = {'p', 'l', 'r', 's', 't'}; for (\u003cloop-statement\u003e) { Console.WriteLine(i); }What does the missing need to be to print each item in chars?\nchar i : chars char i : chars[] char i in chars char i in chars[] Question do { Console.WriteLine(\"Hello world!\"); } while (3 \u003c 2);How many times does the message print and why?\n0 — The while condition is never true. 1 — The print statement is evaluated before the conditional. Infinite times — 3 is less than 2, and the condition is never changed in the loop. ",
    "description": "You can practice loop syntax in the LoopsExamples project in csharp-web-dev-examples repo .\nfor Loop In C#, we write a definite loop (aka a for loop) as:\nfor (int i = 0; i \u003c 10; i++ ) { Console.WriteLine(i); }Output:\n0 1 2 3 4 5 6 7 8 9The C# for loop gives you explicit control over the starting, stopping, and stepping of the loop variable inside the parentheses. You can think of it this way:",
    "tags": [],
    "title": "Loops",
    "uri": "/flow-collections/reading/loops/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 6: Unit Testing",
    "content": "Work on these exercises in your local copy of the csharp-web-dev-exercises repo. You were directed to fork and clone this repo earlier in the book. If you have not done so, do so now.\nTip Earlier in the chapter, we instantiated an object of the Car class called test_car. Be sure to take note of the values of the make, model, gasTankSize, and milesPerGallon fields! Having a note you can quickly reference of how big the gas tank is will help you decide on values to use in your tests!\nTestGasTankAfterDriving() Add a test for the third TODO, “GasTankLevel is accurate after driving within tank range”.\nYour test must use the Car method Drive()\ntest_car.Drive(50); With a value of 50 miles passed into Drive(), we expect test_car to have a GasTankLevel of 9.\nAssert.AreEqual(9, test_car.GasTankLevel, .001); Click Here for Answer 1 2 3 4 5 6 7 //TODO: GasTankLevel is accurate after driving within tank range [TestMethod] public void TestGasTankAfterDriving() { test_car.Drive(50); Assert.AreEqual(9, test_car.GasTankLevel, .001); } TestGasTankAfterExceedingTankRange() Add a test for the fourth TODO, “GasTankLevel is accurate after attempting to drive past tank range”.\nYou’re on your own for this one. You’ll need to simulate the Car traveling farther than it’s gasTankLevel allows.\nClick Here for Answer 1 2 3 4 5 6 7 //TODO: GasTankLevel is accurate after attempting to drive past tank range [TestMethod] public void TestGasTankAfterExceedingTankRange() { test_car.Drive(501); Assert.AreEqual(0, test_car.GasTankLevel, 0.001); } TestGasOverfillException() The test for our last TODO is a little different. We are going to perform an action on our car object, and we are expecting the object to throw an error. In this case, we are going to attempt to add gas to our car that exceeds the gas tank size.\nFirst, we’ll add our [TestMethod] annotation to tell MSTest this is a test.\n//TODO: can't have more gas than tank size, expect an exception [TestMethod] public void TestGasOverfillException() { } Now we need to tell MSTest the test passes if an exception is thrown. We will use a new attribute [ExpectedException].\n[ExpectedException(typeof(ArgumentOutOfRangeException))] Click Here for Answer 1 2 3 4 5 6 7 //TODO: can't have more gas than tank size, expect an exception [TestMethod] [ExpectedException(typeof(ArgumentOutOfRangeException))] public void TestGasOverfillException() { } Update the Car class to include an AddGas() method.\npublic void AddGas(double gas) { GasTankLevel += gas; } Back in CarTests, implement the new AddGas() method and a Assert.Fail() scenario.\ntest_car.AddGas(5); Assert.Fail(\"Shouldn't get here, car cannot have more gas in tank than the size of the tank\"); Click Here for Answer 1 2 3 4 5 6 7 8 //TODO: can't have more gas than tank size, expect an exception [TestMethod] [ExpectedException(typeof(ArgumentOutOfRangeException))] public void TestGasOverfillException() { test_car.AddGas(5); Assert.Fail(\"Shouldn't get here, car cannot have more gas in tank than the size of the tank\"); } Run the test. It should fail! In the output log, we can see our Assert.Fail() statement about not being able to add more gas printed out.\nWe need to refactor Car to throw an exception when too much gas is added to the tank. Find the AddGas() method and modify it by adding the following code in the appropriate place.\nif (GasTankLevel \u003e GasTankSize) { throw new ArgumentOutOfRangeException(\"Can't exceed tank size\"); } Click Here for Answer 1 2 3 4 5 6 7 8 public void AddGas(double gas) { GasTankLevel += gas; if (GasTankLevel \u003e GasTankSize) { throw new ArgumentOutOfRangeException(\"Can't exceed tank size\"); } } Now, run the test - it should pass!",
    "description": "Work on these exercises in your local copy of the csharp-web-dev-exercises repo. You were directed to fork and clone this repo earlier in the book. If you have not done so, do so now.\nTip Earlier in the chapter, we instantiated an object of the Car class called test_car. Be sure to take note of the values of the make, model, gasTankSize, and milesPerGallon fields! Having a note you can quickly reference of how big the gas tank is will help you decide on values to use in your tests!",
    "tags": [],
    "title": "Exercises",
    "uri": "/unit-testing/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 6: Unit Testing \u003e Reading",
    "content": "MSTest is a framework that provides the methods and assertions for writing and executing unit tests in C#.\nC# Attributes In C#, attributes are formalized bits of information about a program. They operate somewhere between actual code syntax and a comment on the code. Attributes do not directly affect the code they annotate, but they do supply information to the compiler. An attribute is enclosed in square brackets, [], and placed above the item it decorates.\nTo run unit tests using the native tools available in Visual Studio, the attributes [TestClass] and [TestMethod] are used to indicate that certain classes and methods should be treated as test cases. We describe how to use these in the examples that follow.\nTesting Setup To test a simple .NET Core console project, we add an MSTest project into the same solution. An MSTest project is a console project with an added MSTest dependency.\nTurn your attention to the reading examples repo . Inside the solution, we have two projects, Car and CarTests. The Car project is a simple .NET Console app like the others you have encountered in this course so far. CarTests is a new type of project, MSTest Project.\nOn a Mac, to select this type of project looks like so:\nOn a Windows:\nMSTest is a C# testing framework. When we create a Visual Studio MSTest Project, the necessary API and classes are added as dependencies of the CarTests project. A dependency is a separately developed program or piece of code that another program or piece of code uses to carry out its function. Our C# tests will depend on MSTest code.\nAlong the same lines, since CarTests tests the methods inside of Car, we must add the Car project as a dependency of CarTests.\nRight click on the Dependencies directory in CarTests and add a project reference to the Car project.\nCar and CarTests Open the Car class and look around. Here, we provide a class, Car, with basic information about a make, model, gas level, and mileage. We also give it getters, setters, and a few other methods.\nIn the same project, the Program class prints the make and model of a given Car object. Run the project to verify it works. Now, open CarTests. It’s empty, save for a few TODOs. Let’s tackle the first TODO to make a new empty test. Starting with an empty test lets us validate that we can use MSTest in our current environment.\nNote You may notice that we have instantiated a Car object by calling it Car.Car. This is because our namespace is also called Car. If you remove the namespace name, you will get an error because a namespace cannot be instantiated as an object.\n[TestClass] and [TestMethod] Another benefit of coding in an IDE, Visual Studio contains its own test runner. A test runner is simply a tool to execute tests and deliver their results. In order to indicate that CarTests contains unit tests that we want the test runner to run, we must give it the [TestClass] attribute. As you might guess, [TestMethod] annotates a method to signal it as a test case. Both of these attributes come to us via the Visual Studio test runner.\nIn CarTests, on top of public class CarTests, add [TestClass]. Then, create the following empty test underneath the first TODO. As usual, be sure to write this code rather than copy/paste it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 namespace CarTests { [TestClass] public class CarTests { //TODO: add emptyTest so we can configure our runtime environment [TestMethod] public void EmptyTest() { Assert.AreEqual(10,10,.001); } // ... other TODOs omitted here } } Our empty test is aptly named EmptyTest() as a description of its role. This test does not follow the AAA rule from our testing best practices, as it jumps straight to asserting. Nor is it relevant, for that matter. The goal of this empty unit test is not to demonstrate all of our best practices , but rather, to verify that our testing setup is in place.\nThe three arguments in our test care defined as “expected”, “actual”, and “delta”. This empty test asserts an expected value of 10 to equal an actual value of 10, with an accepted .001 variance.\nNote The third argument, called delta, is the amount of allowed difference between the expected and actual values. If the difference between the two values is within that range, then the test still passes. This argument is optional for some comparisons and required for others. One scenario in which it is required is when comparing doubles.\nWhy is it required? Well, that’s kind of a long story. Some number types are floating-point numbers . Due to the nature of their storage, these types carry with them a certain degree of inaccuracy . In brief, the delta argument ensures we can still reasonably compare two doubles.\nTip Visual Studio can offer info on the parameters of a previously defined function. Hover over the function call to see a tooltip:\nOf course, 10 equals 10. But let’s run it so we know our test runner works.\nLike running console projects, there are many ways to run unit tests and view the results. Here are some options to try:\nMac Users: Running Tests For Mac users, run the CarTests project just like you would any other project.\nNote If the panel does not open once the test are finished running, look for the Test Results panel name on the margins of your IDE and open it manually.\nWindows Users: Running Tests For Windows users, you’ll want to find and open the Test Explorer panel. If you don’t already have it docked, you can find it listed in the top Test menu.\nWith the panel open, select the Run All Tests option.\nNote If you see that the test fails to run, neither passing nor failing, you may need to adjust a setting to use 64bit processing.\nYou may also need to update some of the testing packages. Right click on the CarTests project and select Manage NuGet Packages…. If you see some items in the Update section of the panel that opens, run the updates. Close and reopen the Team Explorer panel and Visual Studio to ensure the changes are applied.\nAll Users: Output and Adding More Tests Once you run the test, you will see a new output panel with a green check mark indicating the test passed and a message stating the test passed.\nWe know now how the test runner behaves when a test passes and can begin the real work of unit testing the Car class. One responsibility of the Car class constructor is to set its initial gasTankLevel field. This field is determined by the constructor argument for gasTankSize .\nCar.cs:\n17 18 // Gas tank level defaults to a full tank GasTankLevel = gasTankSize; This class-specific behavior is a good item to test. Under your second TODO, write a test to verify that the constructor sets the gasTankLevel field.\nNote To test the Car class, we must make it available to us by adding using Car; to the top of your file. Car is the namespace we have assigned to the Car class. Namespaces are used in C# to organize code. You’ve seen them before in other using statements.\n16 17 18 19 20 21 22 //TODO: constructor sets gasTankLevel properly [TestMethod] public void TestInitialGasTank() { Car test_car = new Car(\"Toyota\", \"Prius\", 10, 50); Assert.AreEqual(10, test_car.GasTankLevel, .001); } Here, we give the test a descriptive name, TestInitialGasTank(), initialize a new Car object, and test that the constructor correctly sets the gasTankLevel field.\nWe’ve done our best to address testing best practices :\nThe AAAs\nWe arrange the one variable our test requires: test_car. We act on the Car constructor method as well: new Car(\"Toyota\", \"Prius\", 10, 50);. We assert that the expected value of 10 will equal the actual value returned from getting the tank level (test_car.GasTankLevel). Deterministic\nAs it is written, we expect that our test will always pass.\nRelevant\nThis is our first real test, so we don’t yet have much to group it with. That said, the test assesses a method in Car and is situated in a class called CarTests, so it meets the minimum requirements or relevancy. The next section gives us another attribute to use to help group testing variables.\nMeaningful\nOur test evaluates a simple field assignment but it is not trivial. The line in the constructor being tested is not very complex, but this makes for a good unit test. We want to make sure the basic functionality of our class works as we expect.\nRun CarTest to see that both tests pass.\nTip If you want to rerun only one test, right click on its listing in the results pane.\n[TestInitialize] While [TestClass] and [TestMethod] are required to run tests, there are many other attributes you may find useful as your test files grow in scope. One such item to know is [TestInitialize]. Methods with the attribute [TestInitialize] will run before each test method is run in a class.\nIn the case of CarTest, it would be nice to not need to create a new Car instance for each test we write. In your TestInitialGasTank() method, remove the line initiating test_car. Above your relevant test, add the following [TestInitialize] method:\n16 17 18 19 20 21 22 Car test_car; [TestInitialize] public void CreateCarObject() { test_car = new Car(\"Toyota\", \"Prius\", 10, 50); } Now, run the test project and ensure your test still passes.\n[TestCleanup] [TestCleanup], conversely, defines a set of conditions to be met after each test in a suite is run.\nNote We won’t encounter a scenario where we ask you to use [TestCleanup] in this class. As you explore writing your own unit tests, you may find a yourself in a situation where you need or want it. One use case for [TestCleanup] might be testing database transactions. You don’t want changes to a database to persist after test execution, so you can use [TestCleanup] to rollback, or reverse, a test transaction.\nYou can find more information on this attribute and other items available in the Visual Studio testing namespace here .\nCommon Assert Methods In addition to the very commonly used Assert.AreEqual() method you see above, here are a few other methods you should have in your unit testing playbook.\nAssertion Description AreEqual(expected, actual, optional_delta) Asserts that two values, expected and actual, are equal to each other (optionally, within a given range of difference) IsFalse(condition) Asserts that a given condition is false IsTrue(condition) Asserts that a given condition is true IsNotNull(object) Asserts that a given object is not null Checkout the Assert class for a full listing of methods.\nCheck Your Understanding Question Write another version of TestInitialGasTank() using IsFalse(), comparing the value to 0.\nAssert.IsFalse(Car.GasTankLevel == 0); Assert.IsFalse(test_car.GasTankLevel == 0); Assert.False(test_car.GasTankLevel == 0); Assert.IsFalse(test_car.GasTankLevel = 0); Question Write another version of TestInitialGasTank() using IsTrue().\nAssert.IsTrue(test_car.gasTankLevel == 10); Assert.IsTrue(Car.GasTankLevel == 10); Assert.IsTrue(test_car.GasTankLevel == 0); Assert.IsTrue(test_car.GasTankLevel == 10); ",
    "description": "MSTest is a framework that provides the methods and assertions for writing and executing unit tests in C#.\nC# Attributes In C#, attributes are formalized bits of information about a program. They operate somewhere between actual code syntax and a comment on the code. Attributes do not directly affect the code they annotate, but they do supply information to the compiler. An attribute is enclosed in square brackets, [], and placed above the item it decorates.",
    "tags": [],
    "title": "MSTest",
    "uri": "/unit-testing/reading/mstest/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 4: Classes",
    "content": "Before you get started, make sure you have forked and cloned the starter code repository for the exercises. We will be focusing on the project named Classes.\nOpen up the file, Student.cs, and update the starter code to make use of auto-implemented properties.\nCheck Your Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class Student { private static int nextStudentId = 1; public string Name { get; set; } public int StudentId { get; set; } public int NumberOfCredits { get; set; } = 0; public double Gpa { get; set; } = 0.0; public Student(string name, int studentId, int numberOfCredits, double gpa) { Name = name; StudentId = studentId; NumberOfCredits = numberOfCredits; Gpa = gpa; } public Student(string name, int studentId): this(name, studentId, 0, 0) { } public Student(string name): this(name, nextStudentId) { nextStudentId++; } } In Program.cs, instantiate the Student class using yourself as the student. For the NumberOfCredits give yourself 1 for this class and a GPA of 4.0 because you are a C# superstar!\nTest your new Student object with print statements. Are you able to get and set each field?\nCheck Your Solution 1 2 3 4 // TODO: Instantiate your objects and test your exercise solutions with print statements here. Student kimberly = new Student(\"Kimberly\", 1, 1, 4.0); Console.WriteLine(\"The Student class works! \" + kimberly.Name + \" is a student!\"); In the Classes project, create a class Course with at least three fields. Before diving into Visual Studio, try using pen and paper to work through what these might be. At least one of your fields should be a List or Dictionary, and you should use your Student class.\nCheck Your Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Create a new file Course.cs using System; using System.Collections.Generic; namespace SchoolPractice { public class Course { private string topic; private Teacher instructor; private List\u003cStudent\u003e enrolledStudents; } } Using auto-implemented properties, in the SchoolPractice project, create a class Teacher with four properties: FirstName, LastName, Subject, and YearsTeaching.",
    "description": "Before you get started, make sure you have forked and cloned the starter code repository for the exercises. We will be focusing on the project named Classes.\nOpen up the file, Student.cs, and update the starter code to make use of auto-implemented properties.\nCheck Your Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class Student { private static int nextStudentId = 1; public string Name { get; set; } public int StudentId { get; set; } public int NumberOfCredits { get; set; } = 0; public double Gpa { get; set; } = 0.",
    "tags": [],
    "title": "Exercises",
    "uri": "/classes/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "Access Modifiers For fields in classes, the access level determines who can get or set the value of the field. For methods, the access level determines who can call the method. The access level of a class member is determined by an access modifier.\nWe’ve encountered access modifiers so far in our code. In our examples, you frequently see the keyword, public. public makes the field or method to be accessible by anyone working with our code. Another common access modifier is private, which restricts access to fields or methods so they can only be used within the class. Two additional access modifiers are available in C#, though they are used much less often than public and private.\nExample Let’s take another look at our HelloWorld class from the last section, but with one small change.\n1 2 3 4 5 6 7 8 9 10 11 public class HelloWorld { string message = \"Hello World\"; void SayHello() { Console.WriteLine(message); } } In this HelloWorld class, we omit the public access modifier in lines 4 and 6. Doing this implicitly gives the message field and the SayHello() method default access.\nWe should avoid giving everything default access when creating classes in C# and instead think carefully about what level of access each field and method should have.\nThe table below details whether or not information can be accessed at different levels based on the access modifier. For example, a field with the private access modifier can be accessed within the class, but cannot be accessed outside the class at the assembly or world-level. In C#, an assembly refers to a grouping of classes and other resources that form a particular unit of an application. World-level is the level of the whole application and contains all of the packages and classes. While we will discuss later how to decide which access modifier to use for different scenarios, you should save this table now as reference for those conversations.\nModifier Class Assembly World public Yes Yes Yes protected Yes No No internal (default for classes) Yes Yes No protected internal Yes Yes No private (default for class members) Yes No No Note If you would like to learn more about access modifiers, you should check out the documentation on the subject.\nLet’s take a look at our HelloWorld class again and add some access modifiers.\nExample 1 2 3 4 5 6 7 8 9 10 11 public class HelloWorld { private string message = \"Hello World\"; public void SayHello() { Console.WriteLine(message); } } Since message only needs to be used by SayHello(), we declare it to be private. Since we want SayHello() to be usable by anybody else, we declare it to be public.\nNote In C#, you should always use the most restrictive access modifier possible. Minimizing access to class members allows code to be refactored more easily in the future, and hides details of how you implement your classes from others.\nThis makes your code more modular and modifiable. Each public member that you expose is another field or property that can be referenced directly elsewhere in any program using your class. Thus, changing any such field in your code could potentially break any code referencing such members. The fewer public members, the more you can change your code without breaking stuff elsewhere.\nCheck Your Understanding Question For this question, refer to the code block below.\n1 2 3 4 5 6 7 8 9 10 public class Greeting { string name = \"Jess\"; public void SayHello() { Console.WriteLine(\"Hello \" + this.name + \"!\"); } } What access modifier would you give name?\nno access modifier public private protected ",
    "description": "Access Modifiers For fields in classes, the access level determines who can get or set the value of the field. For methods, the access level determines who can call the method. The access level of a class member is determined by an access modifier.\nWe’ve encountered access modifiers so far in our code. In our examples, you frequently see the keyword, public. public makes the field or method to be accessible by anyone working with our code.",
    "tags": [],
    "title": "Modifiers in C#",
    "uri": "/classes/reading/modifiers/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives After completing this chapter, you should be able to do the following:\nExplain the difference between static and dynamic typing Write comments in C# Name the numeric types in C# Declare variables in C# Distinguish between value and reference types Parse data types Follow proper C# naming conventions Key Terminology Throughout this lesson, you will see lots of new vocabulary. Here is everything that you should make note of on the pages the term first appears:\nData Types dynamically typed statically typed type system primitive type class boxing unboxing Some C# Practice using namespace assembly Console.WriteLine Console.ReadLine comments Strings, Characters, and Arrays char array Objects Primer object method static public Content Links Reading Exercises Studio: Area of a Circle Next Steps ",
    "description": "Learning Objectives After completing this chapter, you should be able to do the following:\nExplain the difference between static and dynamic typing Write comments in C# Name the numeric types in C# Declare variables in C# Distinguish between value and reference types Parse data types Follow proper C# naming conventions Key Terminology Throughout this lesson, you will see lots of new vocabulary. Here is everything that you should make note of on the pages the term first appears:",
    "tags": [],
    "title": "Chapter 2: Data Types",
    "uri": "/data-types-and-variables/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 2: Data Types",
    "content": "To get started, open up Visual Studio and create a new console program.\nTip If you do not recall how to create a new console program or need a quick refresher to get started, check out the section on creating a C# project .\nFor each part of the exercises, create a new project in your solution. When you are done, push your solution up to a repository on your Github account!\nInput/Output Write a new “Hello, World” program to prompt the user for their name and greet them by name.\na. Add a question to ask the user:\nConsole.WriteLine(\"What is your name?\");b. Create a variable to store the user’s input:\nstring name = Console.ReadLine(); c. Use concatenation to print the greeting:\nConsole.WriteLine(\"Hello \" + name);d. Run your program.\nCheck your solution 1 2 3 Console.WriteLine(\"What is your name?\"); string myName = Console.ReadLine(); Console.WriteLine(\"Hello \" + myName + \"!\"); Numeric Types Write a program to calculate the area of a rectangle and print the answer to the console. You should prompt the user for the dimensions. (What data types should the dimensions be?)\na. Add a print line to prompt the user for the length of the rectangle.\nCheck your solution Console.WriteLine(\"What is the length of your rectangle?\"); b. Define a variable to handle the user’s response.\nc. Repeat the previous two steps to ask for and store the rectangle’s width.\nCheck your solution Console.WriteLine(\"What is the width of your rectangle?\"); string width = Console.ReadLine(); d. Use the length and width values to calculate the rectangle’s area.\ne. Print a statement using concatenation to communicate to the user what the area of their rectangle is.\nCheck your solution Console.WriteLine(\"The area of the rectangle is: \" + area); f. Run the program to verify your code.\nMore on Numeric Types Write a program that asks a user for the number of miles they have driven and the amount of gas they’ve consumed (in gallons), and print their miles-per-gallon.\nCheck your solution 1 2 3 4 5 6 7 8 9 10 Console.WriteLine(\"How many miles did you drive on your trip?\"); string mi = Console.ReadLine(); int miles = Int32.Parse(mi); Console.WriteLine(\"How many gallons of gas did you use?\"); string gal = Console.ReadLine(); int gallons = Int32.Parse(gal); int mpg = miles / gallons; Console.WriteLine(\"The MPG for the trip was: \" + mpg); Strings The first sentence of Alice’s Adventures in Wonderland is below. Store this sentence in a string, and then prompt the user for a term to search for within this string. Print whether or not the search term was found. Make the search case-insensitive, so that searching for “alice”, for example, prints true.\nAlice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, 'and what is the use of a book,' thought Alice 'without pictures or conversation?' Check your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 string alice = @\"Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, 'and what is the use of a book,' thought Alice 'without pictures or conversation?'\"; Console.WriteLine(alice); Console.WriteLine(\"What sentence would you like to look for in the sentence above?\"); string searchTerm = Console.ReadLine(); string compSearchTerm = searchTerm.ToLower(); string compAlice = alice.ToLower(); if (compAlice.IndexOf(compSearchTerm, 0) != -1) { Console.WriteLine(\"true\"); } else { Console.WriteLine(\"false\"); } Extend the previous exercise. Assume the user enters a word that is in the sentence. Print out its index within the string and its length. Next, remove the word from the string and print the sentence again to confirm your code. Remember that strings are immutable, so you will need to reassign the old sentence variable or create a new one to store the updated phrase.",
    "description": "To get started, open up Visual Studio and create a new console program.\nTip If you do not recall how to create a new console program or need a quick refresher to get started, check out the section on creating a C# project .\nFor each part of the exercises, create a new project in your solution. When you are done, push your solution up to a repository on your Github account!",
    "tags": [],
    "title": "Exercises",
    "uri": "/data-types-and-variables/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 2: Data Types \u003e Reading",
    "content": "Let’s move beyond our “Hello, World” example from the introduction and explore a simple temperature conversion program. We want our function to convert a Fahrenheit temperature to Celsius.\nTo get started, fork and clone the csharp-web-dev-examples repository . This repo includes examples you should review as you read for the first 7 or so lessons.\nTemperature Conversion Open the TempConverter project in your csharp-web-development-examples solution in Visual Studio.\nHere’s what the file should look like. We will analyze the different statements in a moment.\n1 2 3 4 5 6 7 8 9 10 11 double fahrenheit; double celsius; string input; Console.WriteLine(\"Temperature in F:\"); input = Console.ReadLine(); fahrenheit = double.Parse(input); celsius = (fahrenheit - 32) * 5 / 9; Console.WriteLine(\"The Temperature in C is: \" + celsius); Console.ReadLine(); Run the program to verify that it works. Entering a Fahrenheit temperature of 212 yields the result, The temperature in Celsius is: 100.\nThere are several new concepts introduced in this example. We will look at them in the following order:\nThe using statement Variable declaration The Console class using The using statement in C# allows us to access classes, methods, and data stored in different files other than the one we are currently in.\nIn C#, you can use any class that is available without having to import the class - subject to two very important conditions:\nThe C# compiler must know that the class exists. You must use the full name of the class. Classes that are available to you may be those in the project you are currently working on, or those that come along with the .NET class library, as well as anything you might get from added dependencies.\nThe class naming system in C# is very hierarchical. The full name of the Console class used first on line 13 is really System.Console. You can think of this name as having two parts. The first part, System, is called the namespace, and the last part is the class. We’ll talk more about the class naming system a bit later. One thing to know about the using statement is that it is not responsible for loading classes into memory. That task falls on the assembly, which is the unit of compiled code created by Visual Studio (or the C# compiler, more generally).\nThe using statement tells the compiler that we are going to use a shortened version of the class’s name. In this example, we are going to use the class System.Console, but we can refer to it as just Console. We could use the System.Console class without any problem and without any import statement provided that we always referred to it by its full name.\nDon’t just trust us, try it yourself! Remove the using statement and change Console to System.Console in the rest of the code. The program should still compile and run.\nDeclaring Variables In the example above, these lines contain variable declarations:\n1 2 3 double fahrenheit; double celsius; string input; Specifically, we are saying that fahrenheit and celsius are going to reference objects that are of type double. The variable input will contain a string. This means that if we were to try an assignment like fahrenheit = \"xyz\" the compiler would generate an error because \"xyz\" is a string and fahrenheit is supposed to be a double.\nSuppose we forgot the declaration for celsius and instead left that line blank. What would happen if we try to run our program?\nWe get a few errors! The end of the build output looks something like this:\nBuild FAILED. warning CS8600: Converting null literal or possible null value to non-nullable type. warning CS8604: Possible null reference argument for parameter 's' in 'double double.Parse(string s)'. error CS0103: The name 'celsius' does not exist in the current context error CS0103: The name 'celsius' does not exist in the current context 2 Warning(s) 2 Error(s) Time Elapsed 00:00:00.55 ========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ========== Build: 2 errors, 2 warnings The compiler detects an error and Visual Studio displays this message. Visual Studio will notify you of the errors detected in a few locations, including the errors pane and the Application Output pane.\nNote You may have expected to receive an error from some red in your program file. When using an IDE such as Visual Studio, your code is typically checked by the IDE’s built-in compiler as you write your code. Thus, errors are usually visually indicated within your code by the IDE as you write your code, saving you the extra step of having to explicitly compile your code before finding compiler errors. Nice, huh?\nThe general rule in C# is that you must decide what kind of an object your variable is going to reference and then you must declare that variable before you use it. There is much more to say about the static typing of C#, but for now this is enough.\nInput / Output and the Console Class Console input and output is facilitated by the class System.Console. We’ll rely heavily on just two methods of this class: Console.WriteLine and Console.ReadLine.\nConsole.WriteLine can take parameters of various types, including string, char, double, bool, and others. Console.WriteLine can only be provided a single argument. Thus, we’ll need to manually concatenate strings and other values if we want to print a composite value, converting types if necessary. A newline character is output after the given message.\nint year = 2020; Console.WriteLine(\"Hello\" + \"World\") Console.WriteLine(\"The year is \" + year.ToString());Similarly, Console.ReadLine returns input as a string. To convert it to a desired type, you can generally use the syntax [TYPE].Parse(value), with [TYPE] replaced by the given type. Here’s an example:\nstring userInput = Console.ReadLine(); int year = int.Parse(userInput);Add Comments to Your Code As programs get bigger and more complicated, they get more difficult to read. Good programmers try to make their code understandable to others, but it is still tricky to look at a large program and figure out what it is doing and why.\nAlso, there are times when programmers need to isolate or ignore certain portions of their code as they are testing it. In the “Try It” box above, you were instructed to remove a line of code in order to create compiler errors. However, programmers are usually reluctant to delete lines that they might need to bring back.\nBest practice encourages us to add comments to our programs. Comments are notes that clearly explain what the code is doing.\nA comment is text within a program intended only for a human reader—–it is completely ignored by the compiler or interpreter. In C#, the // token indicates the start of a comment, and the rest of the line gets ignored. For comments that stretch over multiple lines, the text falls between the symbols /* */.\nComments can be used to temporarily skip a portion of the code when a program runs. Instead of removing double celsius; in TempConverter, we could comment out the line. This would create the same compiler errors we wanted to witness, but it would preserve the original code and allow us to easily reactivate it by removing the // token from the line.\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Here is an example of a comment. /* Here is how to have multi-line comments. */ /* Or like this. */ Console.WriteLine(\"Hello World!\"); // Comments do not have to start at the beginning of a line. // Console.WriteLine(\"Hello comments!\"); This line won't print! Note In addition to single-line comments and multi-line comments, C# developers can also use XML documentation comments. XML documentation comments start with /// and when properly written, can be used to generate documentation for a project. This comment type is something you may encounter working on enterprise code for a company, but is not something that you would use in smaller, personal projects. For more information on XML documentation comments, check out the documentation .\nCheck Your Understanding Question True or False, a using statement is required to use a C# class defined outside of your current file.\\\nQuestion What is the name of the method used to convert input strings to different types?\n.Convert() .ToString() .Parse() .ReadLine() ",
    "description": "Let’s move beyond our “Hello, World” example from the introduction and explore a simple temperature conversion program. We want our function to convert a Fahrenheit temperature to Celsius.\nTo get started, fork and clone the csharp-web-dev-examples repository . This repo includes examples you should review as you read for the first 7 or so lessons.\nTemperature Conversion Open the TempConverter project in your csharp-web-development-examples solution in Visual Studio.\nHere’s what the file should look like.",
    "tags": [],
    "title": "Some C# Practice",
    "uri": "/data-types-and-variables/reading/some-csharp-practice/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 2: TechJobs (Object-Oriented Edition)",
    "content": "Open the Employer file in Visual Studio and examine the code. In addition to the three members—nextId, Id, and Value—the class includes some methods like ToString() and Equals().\nYou can refer to these examples as you fill in the missing pieces in the other classes, but for now let’s take a closer look at the constructors.\nAssign a Unique ID One neat trick we can use is to automatically assign each new object a unique ID number.\nExamine the two constructors in Employer.cs:",
    "description": "Open the Employer file in Visual Studio and examine the code. In addition to the three members—nextId, Id, and Value—the class includes some methods like ToString() and Equals().\nYou can refer to these examples as you fill in the missing pieces in the other classes, but for now let’s take a closer look at the constructors.\nAssign a Unique ID One neat trick we can use is to automatically assign each new object a unique ID number.",
    "tags": [],
    "title": "Task 1: Explore the Employer Class",
    "uri": "/assignments/tech-jobs-oo/task-1/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 4: Tech Jobs Persistent",
    "content": "ViewModels Create a new ViewModel called AddEmployerViewModel that has 2 properties: Name and Location. For this application, an employer can only have one location. Add validation to both properties in the ViewModel so that both properties are required. The depth of your validation is up to you. This class does not need a constructor. Controllers EmployerController contains four relatively empty action methods. Take the following steps to handle traffic between the views and the model:\nSet up a private JobDbContext variable so you can perform CRUD operations on the database. Pass it into a EmployerController constructor. Complete Index() so that it passes all of the Employer objects in the database to the view. Create an instance of AddEmployerViewModel inside of the Add() method and pass the instance into the View() return method. Add the appropriate code to ProcessAddEmployerForm() so that it will process form submissions and make sure that only valid Employer objects are being saved to the database. You want to add a new employer if the model is valid. Else redirect users back to the form About() takes an id as a parameter. It will create an Employer object by searching through the Employers table in DbContext until it finds the provided id. It will pass the employer object to the view. Consider using the .Find() method to search the database. Views The starter code comes with 3 views in the Employer subdirectory. Read through the code in each view. You may have to add models or make sure naming is consistent between the controller and the view. Make sure you are using your new AddEmployerViewModel and its validation where necessary.\nAbout View: Use the Model to help populate the view Add View: Use tag helpers to use the AddEmployerViewModel’s validation Index View: Create a way to add a new employer on this View. Model We need to create a List of Job objects named Jobs in the Employer model. Make sure it has both a getter and a setter.\nAdding a Job One important feature of your application is a form to add a new job. Two action methods in JobController, Add() and ProcessAddJobForm(), will work together to return the view that contains the form and handle form submission. In the Job subdirectory in Views, you will find an Add.cshtml file which contains the beginning of the form. Right now, the form only has one field for the job’s name. As you work on the application, you will add more fields to this form to add employer and skill info.\nCreate a new ViewModel called AddJobViewModel. You will need properties for the job’s name, the selected employer’s ID, and a list of all employers as SelectListItem. Make sure that the name of a job is required.\nNote This is different from the given ViewModel, JobDetailViewModel. JobDetailViewModel has properties for the selected employer’s info and the selected skill’s info. AddJobViewModel will have properties for all of the employers and skills in the database once you complete task 3. We need both ViewModels for the application.\nBack in the JobController, find the Add() method.\nThis method needs to contain a list of Employer objects which it pulls from the Employers dbContext. This method needs to create an instance of the AddJobViewModel which is passed the list of employer objects. Pass an instance of AddJobViewModel to the view. In Add.cshtml view, add a new \u003cdiv class=\"form-group\"\u003e element to the form. Add the appropriate \u003clabel\u003e and \u003cinput\u003e tags to the new \u003cdiv\u003e element to create the form field to add employer information to the job. This field should be a dropdown menu with all of the employers in the database. In addition, add a link to the \u003cdiv\u003e element to add new employers. This way, if a user doesn’t see the employer they are looking for, they can easily click on the link and add a new employer to the database.\nBack in the JobController, rename ProcessAddJobForm() to Add() and add the [HttpPost] attribute to designate this as your post handler.\nThis post handler needs to take in an instance of AddJobViewModel and make sure that any validation conditions you want to add are met before creating a new Job object and saving it to the database. If model is valid, redirect to the “/Jobs”. Create the One-to-Many Relationship In the JobDbContext, we need to add the following to the OnModelCreating() method:\n1 2 3 modelBuilder.Entity\u003cJob\u003e() .HasOne(p =\u003e p.Employer) .WithMany(b =\u003e b.Jobs); This will create the many-to-one relationship between Jobs and Employers.\nProgress Check Project Check:\nYou should be able to add an employer. You should be able to add a job with your new employer. You should be able to create many new jobs for a single employer. Database: Check your data by adding employers to jobs.\nYou should see employers in the Employers table. You should see Employer IDs in the Jobs table. You should see jobs in the Jobs table. Troubleshooting Tips\nIf your database is not updating, try running a new migration followed by an update. Test It with SQL Before you move on, try out your application now to make sure it runs as expected. You should be able to create Employer objects and view them both in the browser and in your database.\nOpen MySQL Workbench and make sure you have an Employers table and that it is empty. Start up your application – don’t forget to have your SQL server running – and go to the Add Jobs view. You won’t be able to add a job yet, but you’ll see a link to Add Employers in the form. Click on it and proceed to check the functionality of the form that follows. Be sure to test your validation requirements and error handling. SQL Task 2 In queries.sql under “Task 2”, write a query to list the names of the employers in St. Louis City.\nTip If everything seems to work – that is, you are able to submit the form without any errors – but you don’t see your employers in the list after submission, here’s what you should check:\nIs there any data in the Employers table? Check by going to MySQL Workbench and looking for the employer data within your schema. If there’s data in the database, check that you are correctly querying for the list of all objects in the controller Are you calling for the proper list with DbContext? Ensure you’re passing the list into the view. You are ready to move onto Task 3 .",
    "description": "ViewModels Create a new ViewModel called AddEmployerViewModel that has 2 properties: Name and Location. For this application, an employer can only have one location. Add validation to both properties in the ViewModel so that both properties are required. The depth of your validation is up to you. This class does not need a constructor. Controllers EmployerController contains four relatively empty action methods. Take the following steps to handle traffic between the views and the model:",
    "tags": [],
    "title": "Task 2: Adding Employers",
    "uri": "/assignments/techjobs-persist/task-2/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 3: TechJobs MVC",
    "content": "Complete the Jobs() action method in ListController. Right now, it returns a view, but we need to send some details about jobs to that view.\nThe view relies on ViewBag.jobs, so to start create a list in the action method called jobs. If the user selects “View All”, you should use JobData.FindAll() to populate jobs with all the jobs and update ViewBag.title. If the user selects something specific, you should use JobData.FindByColumnAndValue() to populate jobs with jobs that only match that criteria and update ViewBag.title to include the criteria the user chose. Make sure to set ViewBag.jobs equal to jobs and run the program to see how it is working now! If everything looks good to you, run the tests in TestTaskTwo in AutogradingTests to make sure you are on the right track before proceeding to task three.",
    "description": "Complete the Jobs() action method in ListController. Right now, it returns a view, but we need to send some details about jobs to that view.\nThe view relies on ViewBag.jobs, so to start create a list in the action method called jobs. If the user selects “View All”, you should use JobData.FindAll() to populate jobs with all the jobs and update ViewBag.title. If the user selects something specific, you should use JobData.",
    "tags": [],
    "title": "Task 2: Complete ListController",
    "uri": "/assignments/techjobs-mvc/task-two/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 0: Hello, World!",
    "content": "We use unit tests in your graded-assignments to provide feedback on your progress. We will refer to them as auto-graded or auto-grading tests in these projects. Use the tests to check your work as you complete the assignment. The goal is to pass all tests.\nLet’s learn how to run the tests in Visual Studio.\nEach assignment will contain a test project. This project contains all of the auto-grading tests and may have more than one test class. In the Solution/Solution Explorer, navigate to HelloTest.cs inside the Hello.Tests project.\nNote You will not need to open the Using.cs file. This file connects the testing project to the testing library. This is not a test class.\nA test is a single method in a test file with [TestMethod] above it.\n[TestClass] public class AutogradingTests { [TestMethod] public void TestToDemonstrateWhatATestMethodLooksLike() { //test code here } }A test class may contain many tests.\n[TestClass] public class AutogradingTests { [TestMethod] public void TestToDemonstrateWhatATestMethodLooksLike() { //test code here } [TestMethod] public void SecondTestToDemonstrateWhatATestMethodLooksLike() { //test code here } } Run all of your tests using the Test Explorer window.\nMac Users: View \u003e Testing Select the stacked triangles on the right of the Test Explorer Window. In the Test Explorer, step through the file tree until you find the failed test. If you need more help running the tests, checkout this guide for running tests with C# Dev Kit. Windows Users Test \u003e Windows \u003e Test Explorer Select the Run All icon to run all of your tests. In the Test Explorer, step through your file tree until you find the failed test. If you need more help running the tests, checkout this guide for running tests in Visual Studio. Visual Studio opens a Test Results Pane every time it runs a test. This pane provides you with detailed information about which tests passed and which tests failed. The pane will also provide you with output for any failed tests, including what was expected and what was actually received. This is a great place to look when dealing with a failing test.\nNow that you have run the tests, you should see that one of the tests has failed and the other passed. We have not touched any code yet. Use the Test Results Pane to navigate into which specific test has failed.\nIn this case, the TestIfSayHelloReturnsCorrectValue() test, expected our code to output Hello, World! Instead, the method is returning \u0026\u0026\u0026 causing the test to fail. Be sure to explore your test output. The output will show you what was expected and what was actually received. Often messages will be provided for a failed test. In this test, the message is “Incorrect message displayed”.\nThe TestSayHelloReturnTypeIsString() test passed. This should pass because the SayHello() method is a string method. You can verify this in line 8 of the SayHelloClass.cs. Use this test to help you explore the Test Results Pane and testing process.\nTry running each test individually before moving on to the next step. You can select individual tests by right-clicking on the test name either directly in the test class or the Test Explorer window.\nYou will still have the same results as before, but now you have the skills to run tests all together or one at a time. This is something that may come in handy as you work on larger assignments that may have many tests.\nYou are now ready to move on to Task 3: Start Coding .",
    "description": "We use unit tests in your graded-assignments to provide feedback on your progress. We will refer to them as auto-graded or auto-grading tests in these projects. Use the tests to check your work as you complete the assignment. The goal is to pass all tests.\nLet’s learn how to run the tests in Visual Studio.\nEach assignment will contain a test project. This project contains all of the auto-grading tests and may have more than one test class.",
    "tags": [],
    "title": "Task 2: Running the Auto-grading Tests",
    "uri": "/assignments/hello-world/auto-grading-test/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments",
    "content": "Introduction Congratulations! Based on your hard work and strong coding skills, you have been brought on as an apprentice to the LaunchCode Tech Team. You will be paired with a mentor to help you get comfortable and continue learning.\nThe Company Team at LaunchCode works with employer partners to match qualified programmers with apprenticeships. They asked for a new tool to be built to help them easily manage data for currently available jobs. Over the next few weeks, you will help them build this application alongside mentors from the Tech Team.\nThis first project will be a simple prototype. A prototype in software development is a basic working version of a proposed product. Software developers build prototypes to get feedback on proposed features and adjust the project timeline, as needed. This prototype won’t be pretty or have lots of features, but it will give you a chance to work through some initial concepts and get feedback from LaunchCode staff.\nYour mentor on this project is Blake.\nLearning Objectives In this project, you will show that you can:\nRead and understand code written by others. Use core C# syntax (methods, variables, loops, conditionals). Utilize List and Dictionary collection types. Work with console I/O via the Console class. Work with data types and arrays. TechJobs (Console Edition) The app you must help design is a simple console (i.e. command-line) prototype of the new TechJobs app. It will allow LaunchCode staff to browse and search listings of open jobs by employer partners.\nThe prototype process gives everybody a chance to work out some initial ideas without investing a ton of time into developing a finished product. Once everybody likes the prototype, the Tech Team will begin work toward a full-fledged application.\nYour Assignment Blake created a console application and started to fill in some features. His code allows users to search job listings by one of several fields. It can also display lists of all of the values of a given field in the system (e.g. all employers, or all locations).\nBlake has now handed the task off to you. You must add a couple of features and then get feedback from the Company Team.\nGetting Started In Canvas, Graded Assignment #1: TechJobs Console contains a GitHub Classroom assignment invitation link and then set up the project in Visual Studio. Refer back to the GitHub Classroom instructions from Assignment 0 for details.\nYour Tasks Before diving into your tasks, review Assignment 0 for details on running autograding tests in C#. This assignment has multiple tests, and we recommend the following workflow:\nWrite the code for the task, verify manually that your code works by running the TechJobsConsoleAutograded project. When you think you’ve completed a task, run the individual test that corresponds to the task. If the test fails, review the test output and go back to your code to fix the bug. Once the single test passes, run all of the tests to make sure you didn’t break any tests that previously passed. Repeat this process until all tests pass. Now we’ll outline the tasks for your first apprenticeship assignment.\nReview the Starter Code Task One Task Two Task Three Submission and Bonus Missions ",
    "description": "Introduction Congratulations! Based on your hard work and strong coding skills, you have been brought on as an apprentice to the LaunchCode Tech Team. You will be paired with a mentor to help you get comfortable and continue learning.\nThe Company Team at LaunchCode works with employer partners to match qualified programmers with apprenticeships. They asked for a new tool to be built to help them easily manage data for currently available jobs.",
    "tags": [],
    "title": "Assignment 1: Tech Jobs Console",
    "uri": "/assignments/techjobs-console/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 1: Tech Jobs Console",
    "content": "Implement PrintJobs() When trying out the program, and later when reading the code, you hopefully noticed that there’s some work to do in the PrintJobs() method. As it stands, it currently just prints a message: \"PrintJobs is not implemented yet\".\nComplete this method. Print out jobs matching the below format:\n***** position type: Data Scientist / Business Intelligence name: Sr. IT Analyst (Data/BI) employer: Bull Moose Industries location: Saint Louis core competency: Statistical Analysis ***** ***** position type: Web - Back End name: Ruby specialist employer: LaunchCode location: Saint Louis core competency: Javascript *****For the autograding script to correctly grade your code, you’ll need to match this format exactly. In particular, note the number of asterisks surrounding each listing, and the blank line between listings.\nIf there are no results, it should print No results. Again, you should use this exact message.\nTip To do this, you’ll need to iterate over a List of jobs. Each job is itself a Dictionary. While you can get each of the items out of the Dictionary using the known keys (employer, location, etc.), think instead about creating a nested loop to loop over each Dictionary. If a new field is added to the job records, this approach will print out the new field without any manual updates to PrintJobs().\nWarning To create new lines for your output, use Environment.NewLine. Traditionally \\n is a new line in Mac OS and \\r\\n is new line in Windows. Environment.NewLine is the universal way to create a new line and works regardless of your operating system. Allowing code written on a Mac to pass unit tests when the same code is run on Windows.\nTest this method manually before moving on to your next task:\nSave your changes. Run the project. Select “1” to list the jobs, and then “0” to list them all. Make sure the printout matches the styling above. Test that it prints a descriptive message if no jobs are found by selecting “0” to search and then “3” to search for a location. Then enter a location that is not in the data (e.g. “Cancun”). Your message should be displayed. Finally, remember at the end of each task to review the autograding tests and run the appropriate one(s) to ensure that you are on the right track.",
    "description": "Implement PrintJobs() When trying out the program, and later when reading the code, you hopefully noticed that there’s some work to do in the PrintJobs() method. As it stands, it currently just prints a message: \"PrintJobs is not implemented yet\".\nComplete this method. Print out jobs matching the below format:\n***** position type: Data Scientist / Business Intelligence name: Sr. IT Analyst (Data/BI) employer: Bull Moose Industries location: Saint Louis core competency: Statistical Analysis ***** ***** position type: Web - Back End name: Ruby specialist employer: LaunchCode location: Saint Louis core competency: Javascript *****For the autograding script to correctly grade your code, you’ll need to match this format exactly.",
    "tags": [],
    "title": "Task One",
    "uri": "/assignments/techjobs-console/task-one/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 19: Authentication \u003e Reading",
    "content": "Simple authentication allows users to log in to a site with a username and password. To implement authentication, we need to be able to verify that a user’s password is correct. However, you should NEVER store passwords in a database. Seriously. Don’t do it. Ever.\nStoring passwords in a database is incredibly insecure. A hacker may break into the database, gaining access to every user account. Or a deviant employee with access to the database may do the same.\nFortunately, it is possible for us to implement simple authentication without storing passwords, by using a technique called password hashing. Password hashing is a particular type of encryption that we will explore throughout the rest of this section.\nTwo-Way Encryption When you think of encryption, you might think of WWII or the Cold War, when the militaries of various countries exchanged secret messages that were unreadable by their enemies. This type of encryption is two-way encryption. A message is encoded with a key before being sent, and when it is received, it is decoded by another key.\nThe diagram below depicting the flow of two-way encryption was created by Munkhzaya Ganbold, and is licensed via CC BY-SA .\nOne-Way Encryption One-way encryption, also known as hashing, encodes a message in a way that makes it nearly impossible to decode. An algorithm implementing a one-way encryption algorithm is a cryptographic hash function (we’ll usually leave off “cryptographic”). For a specific message, the output of a hash function is a hash.\nThe hashing process is essentially just the top half of the diagram above. While it might not be clear yet, hashing allows us to securely store passwords and still be able to validate a user’s submitted password. Precisely how this is done will be explored in a moment. The diagram below shows the general flow of how hashing works to secure the site.\nIt can be difficult to write a good hash function, so thankfully you will never have to. Over the years, some very smart people have created some very good hash functions. However, it is important to understand how the properties of a hash function allow for secure password storage. For our purposes, it is only important that we consider a hash function to have these properties:\nHash Properties Deterministic: If we encode a message with the function at different points in time then we always get the same result. Hard to reverse: It is infeasible to calculate the input value that yields a given hash. Hash values are ALMOST unique: If a and b are two different messages, then it is extremely unlikely that they have the same hash value. By “extremely unlikely” we mean that this is something like a one-in-a-trillion likelihood (for example, there are only about 8 billion people on earth). Similar messages have VERY different hash values: In other words, if we change a message only slightly, the resulting hash value is very different. A function that returned AlXL3M_ws for the message \"LaunchCode\" and AlXL3M_wt for the message \"LaunchCodf\" would not be a suitable hash function. Password Verification With Hashes Our application will select a particular hash function. Let’s call it h. Then, for a message x, the hash value will be the result of calling h with the argument x. Invoked, this looks like h(x). Rather than store passwords in a database, we will store their hash values.\nConsider a fictional user that wants to sign up for our site, Jamie. Jamie likes Taylor Swift, so their desired username is tswizzle_fan and their desired password is lover1989 (not a great password choice, by the way, but we’ve seen worse).\nWhen Jamie registers for an account on our site, we will call our hash function with their password:\n1 string hash = h(\"lover1989\"); // returns \"bd62d7e13ef465fa705f30de198ba0cb\" Then we store Jamie’s username along with her hashed password in our user table.\nusername passwordHash tswizzle_fan bd62d7e13ef465fa705f30de198ba0cb This is very secure. Even if somebody breaks into the database and finds Jamie’s info, they will not be able to log in. Since we used a hash function, the hacker will have a very hard time turning the hash into a password, see Hash Property 2.\nWe can still authenticate Jamie, however. When they come to our site to log in, they will submit a username and password. Let’s call the password value submittedPassword. Some basic logic will allow us to determine, with an extremely high rate of probability, whether or not the pair is valid.\nTo check Jamie’s username/password pair, we could do something like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // fetches Jamie's user object from the database User user = GetUserByUsername(\"tswizzle_fan\"); // gets the hash value stored on their object string passwordHash = user.PasswordHash; // hashes the submitted password string submittedHash = h(submittedPassword); if (passwordHash == submittedHash) { // the hashes are the same, the passwords can be assumed to be the same } else { // the hashes are different, so the passwords are definitely different } The conditional compares the values of the hash stored in the database with the hash generated from the submitted password. By Hash Property 1 listed above, we know that if the hash values are different, then there is no way the passwords are the same. By Hash Property 3, we can safely assume that the passwords are the same.\nNote When using Identity, the library handles hashing passwords for newly registered users and comparing hashes when logging in a user. The example above is just an example and meant to illustrate what is going on under the hood of Identity.\nHashing Isn’t Perfect Using hash functions to process passwords is not a cure-all. One vulnerability is the possibility for collisions. A collision occurs when two different messages have the same hash value. By Hash Property 3, this is supposed to be rare. However, if a collision is found for a given hash function, then it may be possible to create an algorithm to generate collisions. In other words, given a specific hash value, the algorithm could generate a string with the same hash value.\nThe once-popular MD5 and SHA1 hash algorithms quickly become obsolete (for cryptographic purposes, at least) once collisions were found.\nMost hashing algorithms become more vulnerable as global computing power increases. If a hacker breaks into a database, they will obtain the hashes of all of its users’ passwords. Since only a small handful of hash functions are commonly used, they might simply try millions of strings with each of the more popular hash functions and wait until they find a match.\nNote The widespread use of brute force attacks is why it is always a bad idea to use a password that:\nis ranked as one of the most commonly used passwords utilizes publicly accessible information about you, such as birth date or address uses common words from the dictionary When trying to crack a password hash using brute force, these are the first items a hacker will attempt to use.\nWhich Hash Function Does Identity Use? Identity contains its own password hasher called IdentityV3. When a new user is added to the database, their inputted password is passed to IdentityV3. IdentityV3 is not its own hashing algorithm, but it uses PBKDF2 for hashing.\nIdentityV3 is named after the third version of Identity and is the default password hasher. IdentityV2 corresponds to the second version of Identity and may still be in use in some code bases. As a result, developers can still specify that IdentityV2 needs to be used in the configuration options.\nCheck Your Understanding Question True/False: One-way encryption does not involve decryption.\nTrue False Question Which of the following best describes hashing?\nHashing is the process of encrypting plaintext so that it is very difficult to obtain the original message. Hashing is more secure than two-way encryption but less useful because it does not decode an encoded message. Hashing cannot confirm that two passwords are the same because the original values are never saved. Hashing smashing. ",
    "description": "Simple authentication allows users to log in to a site with a username and password. To implement authentication, we need to be able to verify that a user’s password is correct. However, you should NEVER store passwords in a database. Seriously. Don’t do it. Ever.\nStoring passwords in a database is incredibly insecure. A hacker may break into the database, gaining access to every user account. Or a deviant employee with access to the database may do the same.",
    "tags": [],
    "title": "Hashing Passwords",
    "uri": "/authentication/reading/hashing-passwords/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 1: Introduction and Setup",
    "content": "For the entirety of this course, we will be coding in C# with the help of Visual Studio and .NET.\nThe Integrated Development Environment Visual Studio (VS) is an integrated development environment (IDE). An IDE is like a text editor on steroids. We can write and edit code and make use of additional features that enhance our coding experience. VS offers code completion hints, debugging, and even it’s own compiler.\nWe’ll be using it throughout this course, so it’s time to get familiar with some of the basics.\nNote Visual Studio IDE is not the same application as the source-code editor called Visual Studio Code (VS Code). If you already have VS Code installed on your machine, you will still need to install and configure VS.\nDevelopment Frameworks .NET .NET is a set of tools for developing software in a number of different programming languages, including C#. The tools together make what is known as a software development kit, or SDK.\nSome of its features:\nOpen-source and available on several operating systems. The SDK provides the runtime environment and the virtual machine for compiling and running C# programs. Contains the base class libraries which include the built-in code that takes care of common programming items, such as object types. Able to be extended using additional frameworks such as ASP.NET. You can learn more about .NET here .\nASP.NET Core As we progress through this portion of the course, we will start creating web projects. .NET will compile C#, but does not contain any libraries for web development. ASP.NET Core is an open source collection of libraries specifically for web development and creating dynamic web applications.\nWe will use ASP.NET Core midway through this course; however, you can learn more about this framework at this site .\nC# and the Frameworks A summary of the relationship between the code you write in C# and tools provided by .NET:\nWe write code in C#. The source code is compiled (like translating) into another intermediate language. The intermediate code is read by a runtime program included in the .NET SDK. The runtime environment translates the intermediate code into machine-readable language. Fortunately for us, .NET can be installed along with Visual Studio IDE.\nWindows Users vs. Mac Users Windows users will setup their C# development environment with a community version of Visual Studio. Mac users need to download and install an extension for Visual Studio Code called C# Dev Kit. The user-experiences for these two tools are quite different.\nAn important note for this class: The content of this book is designed to inform both Windows and Mac users on the basics of web programming in C#. There are sometimes significant, and other times more minor, discrepancies between how to use the IDE tools provided in Visual Studio on Windows machines and the C# Dev Kit. We will do our best to provide either instructions that are application neutral, or instructions that are tailored to the development experiences on both operating systems. There may be times when your C# project view will not look exactly like that in the book because you are on a different operating system and are therefore using a different application. The actions you take or buttons to click may be slightly different from what you see in the book.\nC# Naming Conventions C# has some very straightforward naming conventions . These are universally used by C# programmers, and differ in some cases from conventions commonly used in Python or other coding languages.\nAgain, these are conventions. Not following them will not prevent your code from running, as long as you are following C#’s naming rules .\nIdentifier Type Convention Examples Method parameters, local variables, and fields Start with a lowercase letter and use camelCase id, firstName Methods, properties, and class names Start with an uppercase letter and capitalize each word; do not use hyphens or underscores (aka PascalCase) Program, HelloWorld, TempConverter Microsoft provides more detailed naming guidelines here .\nCheck Your Understanding True or false: Visual Studio is a framework.\n.NET contains: (Select all that apply)\nA C# compiler A virtual machine Visual Studio IDE C# class library Reading Links Windows Users: Visual Studio Community Edition Mac Users: C# Dev Kit for Visual Studio Code Creating a C# Project Cloning a C# Project ",
    "description": "For the entirety of this course, we will be coding in C# with the help of Visual Studio and .NET.\nThe Integrated Development Environment Visual Studio (VS) is an integrated development environment (IDE). An IDE is like a text editor on steroids. We can write and edit code and make use of additional features that enhance our coding experience. VS offers code completion hints, debugging, and even it’s own compiler.",
    "tags": [],
    "title": "Setup for C#",
    "uri": "/introduction-and-setup/reading/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST \u003e Reading",
    "content": "REST is an acronym that stands for REpresentational State Transfer. RESTful web services refer to web technologies that use this design pattern. REST, as we’ve mentioned, is an architectural pattern that provides uniformity and predictability to any API that adheres to it.\nThe same benefits are experienced by the API consumer. REST is a set of guiding principles for supporting the organization of an API’s core responsibilities – managing and transferring data. The REST pattern organizes the external interface, or contract, and does not concern itself with the internal implementation of the API.\nAdopting the REST specification into the design of an API provides consistency during development and consumption. Much like following the patterns of MVC allows other developers to easily understand your code, following REST patterns gives other developers the benefit of understanding how your API is structured and behaves. As an added bonus, a REST API also gives the client application a base-line understanding on how to interact with your API.\nTip The topics of state and representation are purposefully abstract in REST so that they can be applied to any API. Don’t get overwhelmed!\nWhat is State? State is transitional application data that can be viewed or changed by external interaction. Though state is abstract, programmers interact with it using CRUD operations.\nImagine viewing, or reading, the state of an application’s data as it transitions through each of the following interactions:\nBefore creating: Empty state After creating: Initial state After updating: New state After deleting: Empty state You can see that the state is defined by how the data exists after its latest interaction.\nNote The concept of state is both the most abstract and most fundamental aspect of REST.\nWhat is a Representation? Representation refers to a depiction of state that is usable in a given context. In the REST context, state must be represented in a way that is portable and compatible with both the client and API.\nJSON is a data format that provides structure, portability and compatibility. For these reasons, JSON is the standard representation used when transferring state between a client application and an API.\nExample The state of a single CodingEvent entity is represented as a single JSON object:\n1 2 3 4 5 6 { \"Id\": 1, \"Title\": \"Halloween Hackathon!\", \"Description\": \"A gathering of nerdy ghouls...\", \"Date\": \"2020-10-31\" } Whereas the state of a collection of CodingEvents is represented by a JSON array of objects.\n1 2 3 4 5 6 7 8 9 [ { \"Id\": 1, \"Title\": \"Halloween Hackathon!\", \"Description\": \"A gathering of nerdy ghouls...\", \"Date\": \"2020-10-31\" }, ... ] Notice that the state here is represented as the collective state of all of the CodingEvents in the collection.\nTip The process of converting an object representation to a JSON representation is called JSON serialization.\nThe inverse process, where JSON is parsed, or converted back to object representation, is called JSON deserialization.\nTransferring a Representation of State In REST, state is transitioned by interactions between a client and an API. Each transition is driven by transferring a JSON object or collection. A RESTful API is designed to be stateless.\nThis has the following implications:\nThe state of data is maintained by the client application and the database that are on either side of the interface. State transitions are signals containing data representations, driven by the client and facilitated by the API. In order to maintain portability between different client and API contexts, we transfer representations of state. These representations can then be converted between the portable representation (JSON) and the representation that fits a given context (a JavaScript or C# object). Remember, state is defined by an application’s latest CRUD operation. Because every interaction is initiated by the client, we consider the client to be in control of state.\nWhat this means is that the client can:\nRead: request the current representation of state Create \u0026 Update: transition to a new state by sending a new representation Delete: transition to an empty state by requesting its removal However, it is up to the API to define the contract, or expose:\nthe types of state, or resources, the client can interact with which (CRUD) interactions are supported for each resource These decisions are what drive the design of the contract.\nResources While state is an abstract concept, a resource is something more tangible. Simply put, a resource is a type of object that an API allows client applications to interact with. Resources are categorized as an individual entity or a collection.\nEntity: a single resource that is uniquely identifiable in a collection.\nCollection: entities of the same resource type treated as a whole.\nWe refer to the state of a resource in terms of a single entity or the shared state of a collection.\nNote Initially, a collection’s state is just empty. If you were to read the collection’s state, it would be represented as an empty JSON array, [].\nIn RESTful design, an individual entity only exists as a part of a collection. A change to the state of an entity inherently changes the state of the collection it is a part of.\nWhen creating an entity, you are operating on the state of the collection that holds it. In order to create it, you must know what collection the entity belongs to.\nWhen reading, updating or deleting an entity, you are directly operating on the state of the entity and indirectly on the state of its collection.\nIn order to fulfill these operations, you need to know:\nwhat collection the entity belongs to how to uniquely identify the entity within the collection This hierarchal relationship between collections and the entities within them is an integral aspect of RESTful design. The contract of a RESTful API defines the shape, or structure, of its resources along with the hierarchal organization of the endpoints used for interacting with them.\nCheck Your Understanding Question True or False: Using HTTP requests, we can perform all four CRUD operations.\nTrue\nFalse\nQuestion Reshaping data from object representation to JSON representation is called:\nJSON parsing\nJSON reshaping\nJSON reserialization\nJSON serialization",
    "description": "REST is an acronym that stands for REpresentational State Transfer. RESTful web services refer to web technologies that use this design pattern. REST, as we’ve mentioned, is an architectural pattern that provides uniformity and predictability to any API that adheres to it.\nThe same benefits are experienced by the API consumer. REST is a set of guiding principles for supporting the organization of an API’s core responsibilities – managing and transferring data.",
    "tags": [],
    "title": "What is REST",
    "uri": "/web-api-rest/reading/what-is-rest/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 1: Introduction and Setup \u003e Setup for C#",
    "content": "Before you start the installation guide, read through each step below. You will find the recommended features to install listed in each step.\nWarning Allow at least an hour for the installation process.\nInstallation Steps Prerequisites Before you start installing anything, make sure that you can install this on your computer.\nInstall Visual Studio Walk through the installation process by following Microsoft’s Install Visual Studio guide.\nHere are some things you should keep in mind as you install Visual Studio:\nDownload the Community version of Visual Studio 2022.\nIn Step 4, select the following Workflows:\nASP.NET and web development .NET desktop development No other workloads are required for this course.\nIn Step 5, if it’s not already selected, select the following .NET 6.0 Runtime (Long Term Support). You do not need to select any other Individual components for this course.\nStep 7 is optional. You do not need to change Visual Studio’s install location.\nOnce you have installed Visual Studio, we recommend you take the IDE tour below before moving on to the next.\nA Tour of Your New IDE Microsoft has created a walkthrough of the Visual Studio 2022. We recommend you read through this to learn the location of key components within your new IDE.\nNote As you follow along, make sure that you create a Console Application project and NOT a Console App (.NET Framework) project.\nTroubleshooting Your Install If you need to troubleshoot your install, first check out the documentation . If this does not help, check out the below sections and consult your TA if something is still off.\nMissing or Wrong Components? If you realize (or worry) that you did not install Visual Studio correctly, the Modify Visual Studio Guide can help you make any needed modifications. This includes changing your workloads or individual components.\nYou need .NET 6.0 (Long Term Support) at the very minimum.\nAlready have Visual Studio on Your Computer? If you don’t have this most recent version of Visual Studio installed, you will need to update it. The Update Visual Studio Guide can help you update your old version of VS to the latest. At the time of this writing, the current version for the course is 2022.\nUpdating can also help you keep any of your workloads, extensions, or other installed packages up to date.",
    "description": "Before you start the installation guide, read through each step below. You will find the recommended features to install listed in each step.\nWarning Allow at least an hour for the installation process.\nInstallation Steps Prerequisites Before you start installing anything, make sure that you can install this on your computer.\nInstall Visual Studio Walk through the installation process by following Microsoft’s Install Visual Studio guide.\nHere are some things you should keep in mind as you install Visual Studio:",
    "tags": [],
    "title": "Windows Users: Visual Studio Community Edition",
    "uri": "/introduction-and-setup/reading/windows-install/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "The first relationship we implement will be between the Event and EventCategory classes. We will allow multiple events to be in the same category, but each event will only have one category. Thus, this will be a one-to-many relationship. In this case, we will set up both sides of the relationship, so a many-to-one relationship will result as well.\nWe are now ready to create a relationship between Event and EventCategory.\nNote The starter code for the following walkthroughs is found at the orm-1 branch of CodingEvents. The final code presented in the following walkthroughs will be found on the orm2 branch . As always, code along on your own CodingEvents project.\nSetting Up the Relationship We want to relate Event objects to EventCategory objects, and vice versa. Currently, similar functionality is enabled via the EventType field of Event. However, EventType is an enum, which means that new values can not be added without changing the code and re-compiling. Using the persistent EventCategory class to organize events will be a much more flexible and user-friendly approach.\nReplacing EventType With EventCategory In the Event class, replace the Type property with a new property of type EventCategory. In order for EntityFrameworkCore to be able to persist relationships between Event objects and EventCategory objects, we must also have a property that stores the Id of the given EventCategory.\nModels/Event.cs public EventCategory Category { get; set; } public int CategoryId { get; set; }The CategoryId property functions as a foreign key . EF will create a CategoryId column in the Event table. The value of this column for a given row will determine which row in the Category table is related to the given event. Our code is now set up so that each Event will know about its EventCategory object, and that relationship persists.\nNote It is very important that the ID field corresponding to the Category property is named CategoryId. This naming convention lets EF know that it should set Category to be the object with the Id value the same as CategoryId.\nNow, let’s remove all references to EventType in the project.\nOpen AddEventViewModel, which is in the ViewModels directory. Recall that this ViewModel represents the data that is needed to display and process the form used to create new Event instances. Replace its Type and EventType properties with similar properties that use EventCategory.\nViewModels/AddEventViewModel.cs [Required(ErrorMessage = \"Category is required\")] public int CategoryId { get; set; } public List\u003cSelectListItem\u003e? Categories { get; set; }The constructor for this class populates the EventTypes collection, which we have just removed. This collection stored a collection of SelectListItem objects, one for each possible value of Type. The corresponding code to work with categories should populate Categories with each possible value of Category. In other words, Categories should have one SelectListItem for each item in the EventCategory table.\nWe’ll rely on the controller to provide our constructor with a list of all EventCategory objects, so we can update the constructor to look like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 public AddEventViewModel(List\u003cEventCategory\u003e categories) { Categories = new List\u003cSelectListItem\u003e(); foreach (var category in categories) { Categories.Add(new SelectListItem { Value = category.Id.ToString(), Text = category.Name }); } } The Value of each SelectListItem will be the Id of the given category. The Id of a category is unique (in fact, it functions as a primary key) while the Name may not be. Therefore, we must use Id for the value attribute.\nSince we no longer have a no-arg constructor, we must add one to allow model binding.\npublic AddEventViewModel() { }There are a couple references to Type and EventType, residing within our Views/ directory.\nWithin the Views/Events/Add.cshtml file, update the select input and its label to reference our new Category and Categories properties.\n\u003clabel asp-for=\"CategoryId\"\u003eCategory\u003c/label\u003e \u003cselect asp-for=\"CategoryId\" asp-items=\"Model.Categories\"\u003e\u003c/select\u003eAdditionally, within the Views/Events/Index.cshtml file, update the Event Type to Category and the Evt.Type to Evt.Category.Name:\n\u003cth\u003e Category \u003c/th\u003e\u003ctd\u003e@evt.Category.Name\u003c/td\u003eFinally, we have a reference to EventType in the EventsController.Add method that handles POST requests. This method creates a new Event object using data from the AddEventViewModel parameter.\nControllers/EventController.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 [HttpPost] public IActionResult Add(AddEventViewModel addEventViewModel) { if (ModelState.IsValid) { Event newEvent = new Event { Name = addEventViewModel.Name, Description = addEventViewModel.Description, ContactEmail = addEventViewModel.ContactEmail, Type = addEventViewModel.Type }; context.Events.Add(newEvent); context.SaveChanges(); return Redirect(\"/Events\"); } return View(addEventViewModel); } When this method runs, addEventViewModel contains form data. The data that specifies which EventCategory and Event should be assigned to is CatgoryId and NOT the EventCategory object. Therefore, we must first retrieve the category object, and then pass it into the Event constructor.\nThe code above can be refactored as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 [HttpPost] public IActionResult Add(AddEventViewModel addEventViewModel) { if (ModelState.IsValid) { EventCategory theCategory = context.Categories.Find(addEventViewModel.CategoryId); Event newEvent = new Event { Name = addEventViewModel.Name, Description = addEventViewModel.Description, ContactEmail = addEventViewModel.ContactEmail, Category = theCategory }; context.Events.Add(newEvent); context.SaveChanges(); return Redirect(\"/Events\"); } return View(addEventViewModel); } Our app is now free of all references to EventType, so we may delete this unused class.\nDefining the Inverse Relationship For categories to be aware of the events that they relate to, we must add an Event collection property to EventCategory.\nModels/EventCategory.cs public List\u003cEvent\u003e Events { get; set; } Note The new property on Event is a single EventCategory reference, while the new property on EventCategory is a collection of Event objects. This is due to the one-to-many nature of the relationship. Each Event can have only one EventCategory, but an EventCategory may be related to multiple Event objects.\nRefactoring the Controller and View Our EventsController requires a few updates now that Event objects reference EventCategory objects.\nThe Index method passes the collection of all Event objects into the view for display:\nControllers/EventsController.cs public IActionResult Index() { List\u003cEvent\u003e events = context.Events.ToList(); return View(events); }When we reference context.Events, all Event objects will be queried from the database. By default, EF uses lazy loading to retrieve objects. Lazy loading results in only the data in the Event table being returned in the result set. Any data stored in other tables, such as data belonging to a referenced object, will NOT be loaded. In our case, this means that Event objects in context.Events will NOT have their Category properties set by EF. As-is, our code would display an empty category column in the main view.\nNote While lazy loading is not what we want now, it can be a useful strategy in a lot of cases. Suppose your application wants to display a list of all users, where each User has a UserDetails property that stores info like profile image, email, etc.\nIf all we need is a list of users, loading all of the additional data in UserProfile is unnecessary and will slow down the application. Lazy loading minimizes the data returned to optimize performance and reduce queries.\nThe solution is to use eager loading. Eager loading is a technique that allows us to specify that data from other tables/objects be loaded when the querying a specific table/object. In our case, we want our Event objects to be returned with their corresponding EventCategory objects. We can tell EF to load the categories eagerly with the following code:\nControllers/EventsController.cs public IActionResult Index() { List\u003cEvent\u003e events = context.Events.Include(e =\u003e e.Category).ToList(); return View(events); }The Include method takes a lambda expression which specifies the property of each Event object that should be included in the query results. The effect of this additional method is that a JOIN query is performed between the Event and EventCategory tables, with Event.CategoryId being joined on EventCategory.Id.\nOur next update is more straightforward. Recall that we modified the main controller in AddEventViewModel to take a list of all EventCategory objects. This constructor is called in the Add method of our controller. Let’s update it to pass in a list of all EventCategory objects, as queried from the database.\nControllers/EventsController.cs public IActionResult Add() { List\u003cEventCategory\u003e categories = context.Categories.ToList(); AddEventViewModel addEventViewModel = new AddEventViewModel(categories); return View(addEventViewModel); }Database Migration and Testing We are done updating our code for now, but before we can test we must update the database. Recall that we changed the structure of the model by relating Event and EventCategory classes, and by removing EventType. Any model change requires a database update.\nOpen a terminal and navigate to the CodingEvents project directory within the solution. Then run dotnet ef migrations add RelateEventsAndCategories to create a new migration.\nTo apply the migration, run dotnet ef database update.\nIf you look at the database, you’ll see that the Event table no longer has a Type column. In addition, it now has a CategoryId column that is a foreign key to EventCategory.Id.\nNow, start up the app and test!\nCheck Your Understanding Question You are working on an ASP.NET application tracking elected officials. Your model class, Senator has a many-to-one relationship with another model class, State. To properly configure this relationship in the EF context, what must be present?\nIn Senator, a State property and a StateId property In Senator, only a State property In State, a Senator property and a SenatorId property In State, only a Senator property Question What is the default technique for loading child objects of persistent objects?\nEager loading Lazy loading Explicit loading There is no default, the technique must always be explicitly specified ",
    "description": "The first relationship we implement will be between the Event and EventCategory classes. We will allow multiple events to be in the same category, but each event will only have one category. Thus, this will be a one-to-many relationship. In this case, we will set up both sides of the relationship, so a many-to-one relationship will result as well.\nWe are now ready to create a relationship between Event and EventCategory.",
    "tags": [],
    "title": "Creating a One-to-Many Relationship",
    "uri": "/relationships-or-mapping/reading/one-to-many/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping \u003e Reading",
    "content": "Now that we have connected our C# application to a MySQL database, we need to set up our C# code to interact with the new schema. In the previous chapters, we learned about performing basic operations on a database and its tables, such as creating, reading, updating, and deleting rows. One of the reasons we use ORM is so that now we can write C# code in our application to manage our relational database.\nWhile classes determine the structure of a table in our relational database, a data store does the work of inserting, updating, and retrieving data from the database.\nIn our work so far, we have been using an in-application data store. This is the class EventData. The EventData class is an in-memory data store. It keeps track of new events using a C# data structure, which gets deleted from memory every time the app shuts down. With EF, we can create a persistent data store. A persistent data store retains data even when an app shuts down.\nCreating a DbContext We are going to use the DbContext class. This class works with databases to track and manage changes in our stored data.\nCreate EventDbContext Class In the Data directory, create a new class called EventDbContext.\nBy convention, we name it EventDbContext since it is going to be used to work with Event objects and data.\nTo create a persistent data store for our Event class, we can extend the class DbContext, which is provided by EF. This will provide the base functionality we need.\nCheck Your Code public class EventDbContext : DbContext This class needs a using Microsoft.EntityFrameworkCore; statement. Visual Studio’s Intellisense should automatically add it for you.\nDbContext is often paired with DbSet\u003cEntity\u003e which represents the collection of all entities of a given type that can be queried from the database.\nWe are going to create a DbSet\u003cEntity\u003e of Event types and name it Events. This will allow us to query Event objects once our database is created.\nDbSet\u003cEvents\u003e will need access to the Event Model class. Make sure you provide the appropriate using statement.\nCheck Your Code ",
    "description": "Now that we have connected our C# application to a MySQL database, we need to set up our C# code to interact with the new schema. In the previous chapters, we learned about performing basic operations on a database and its tables, such as creating, reading, updating, and deleting rows. One of the reasons we use ORM is so that now we can write C# code in our application to manage our relational database.",
    "tags": [],
    "title": "Accessing Data",
    "uri": "/orm-part-1/reading/accessing-data/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping",
    "content": "Today’s studio depends on completion of the exercises . If you have not completed the exercises, go back and complete them before continuing with the studio. If you want to check out one possible solution to the exercises before you get started, look at the orm1-studio branch in CodingEvents.\nAdding a ViewModel With the new table set up in our database and our application displaying event categories, we need to add a ViewModel so we can add validation for new event categories. Create a new ViewModel called AddEventCategoryViewModel. Add one property to your ViewModel for the name of the event category. Add validation attributes to the property so that it is required and that it has to be between 3 and 20 characters long.\nUpdating EventCategoryController We will be creating 2 new action methods in our controller:\nCreate() ProcessCreateEventCategoryForm() Create() Action Method Create() needs to do the following:\nResponds to GET requests at EventCategory/Create and returns a view called Create.cshtml. Pass a new instance of AddEventCategoryViewModel to View(). ProcessCreateEventCategoryForm() Action Method ProcessCreateEventCategoryForm() needs to do the following:\nResponds to POST requests at the route of your choosing.\nUse error validation and ModelState.IsValid appropriately. If you want to review how to use ModelState.IsValid, check out the section on error validation .\nCreate a new instance of EventCategory and add it to the database if the form input meets the validation conditions.\nEither reload the form or add a new event category to the database and direct the user back to the EventCategory/Index.cshtml template.\nRazor Templates To finish the studio, we need to make a new template, EventCategory/Create.cshtml, which will contain a form for adding new event categories.\nWe also need to add links to the pages for all of the events, all of the event categories, and the form to add a new event category to the navbar. To do so, open up _Layout.cshtml and scroll down to approximately line 22 where you find the code for the link to add an event:\n22 23 24 \u003cul class=\"navbar-nav flex-grow-1\"\u003e \u003ca class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Events\" asp-action=\"Add\"\u003eAdd\u003c/a\u003e \u003c/ul\u003e Using this code as a template, add links to the following views:\nEvents/Index.cshtml EventCategory/Create.cshtml EventCategory/Index.cshtml Make sure to apply useful names for the links.\nThe Final Application Once you are done, launch your app and head to the /EventCategory route! If you added categories already, you will see any categories already stored in the database.\nIf you click on “Create Category”, you should be directed to the /EventCategory/Create route. Once you hit submit, you are redirected back to /EventCategory, and your table now contains the newest event category!",
    "description": "Today’s studio depends on completion of the exercises . If you have not completed the exercises, go back and complete them before continuing with the studio. If you want to check out one possible solution to the exercises before you get started, look at the orm1-studio branch in CodingEvents.\nAdding a ViewModel With the new table set up in our database and our application displaying event categories, we need to add a ViewModel so we can add validation for new event categories.",
    "tags": [],
    "title": "Studio: OMG more ORM!",
    "uri": "/orm-part-1/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 15: Viewmodels and Model Validation",
    "content": "We’ll build on the user-signup-starter studio from last class, adding in model validation.\nGetting Started Open up your SpaDay application and checkout the user-validation branch.\nCreating a New ViewModel To get started with adding validation to our application, we need to first make a ViewModel. After adding a folder for storing our ViewModels, create a new ViewModel for working with form submission called AddUserViewModel. Add properties for the user’s username, password, and email. Also, add a new property called VerifyPassword.\nAdd Validation Attributes Navigate to AddUserViewModel. Add validation attributes to ensure these conditions are satisfied:\nUsername, password, and VerifyPassword are required. Username is between 5 and 15 characters. Email is optional. If provided, the email has the format of a valid email address. The password is between 6 and 20 characters. Remember to add error messages to your attributes!\nRefactoring UserController With our new ViewModel set up and ready, we need to refactor our action methods to make use of AddUserViewModel.\nStart by passing an instance of AddUserViewModel to User/Add.cshtml via our Add() action method. You may want to consider providing a route. This can make finding the new form easier as you work on this application.\nNext, to refactor the SubmitAddUserForm() action method, we need to do the following:\nTake in the instance of AddUserViewModel as a parameter.\nUse ModelState.IsValid to make sure that the conditions outlined using validation attributes have been met.\nIf ModelState.IsValid is true, we want to double check that the value of Password is equal to VerifyPassword. If it is, we can create an instance of User and pass it to the User/Index.cshtml view. If the two passwords do not match, we need to reload the form with an error message displayed.\nTip We can pass an object and the name of a view to the View() method by using the following syntax:\nreturn View(\"ViewName\", objectName); Validating That Passwords Match Last studio, we added some validation checks to make sure the password fields match. Now we have two validation sections: one for the attribute-configured validation (which checks ModelState.IsValid), and one that checks that the password fields match. Make sure they work in-sync with each other to properly return to the form if any of the validation conditions fail.\nTip You can, in fact, validate that passwords match using attributes by taking a slightly different approach than we’ve done here. We outline how to do so in the Bonus Mission section .\nRefactoring the Views The final step in adding ViewModels and validation to our SpaDay application is to refactor our views!\nIn User/Index.cshtml:\nMake the User model accessible to the view.\nReplace instances of ViewBag with the @Model syntax.\nTip You may need to add the null conditional operator to @Model even if you declared the fields in the User model as nullable.\n@Model?.ValueName If we do this correctly, when a form with valid data is submitted, we should still see our personalized greeting!\nIn User/Add.cshtml:\nMake AddUserViewModel accessible to the view.\nKeep the @if statement up at the top so if the two passwords don’t match, we can see the error message.\nReplace the inner contents of the form with a properly formatted form field for each property in the ViewModel. Each of your form fields should look something like this:\n\u003cdiv class=\"form-group\"\u003e \u003clabel asp-for=\"PropertyName\"\u003ePropertyName\u003c/label\u003e \u003cinput asp-for=\"PropertyName\" /\u003e \u003cspan asp-validation-for=\"PropertyName\"\u003e\u003c/span\u003e \u003c/div\u003e Tip When it comes to the password fields you may want to add a type attribute to the \u003cinput\u003e tag for better data security!\nTest, Test, Test! You made a lot of changes! Be sure to thoroughly test them to make sure everything works as expected.\nBonus Mission Let’s set up our application so we can validate that the password fields match using attributes.\nAdd a [Compare] attribute to the Password property in AddUserViewModel to check if the value of Password is equal to the value of VerifyPassword.\nNote [Compare] can be used to validate that the values of two properties are equal. If the two values are not equal, you can add an optional ErrorMessage parameter with a helpful message (for example, “Passwords do not match.”) Here is an example of how this might look:\npublic string PropertyA { get; set; } [Compare(\"PropertyA\", ErrorMessage = \"The two properties must match!\")] public string PropertyB { get; set; } Remove the @if statement from the top of the User/Add.cshtml form.\nIn the SubmitAddUserForm() method in UserController, ModelState.IsValid checks for if the validation conditions have been met. Now that we have added the validation attribute to the Password property, we can simplify our code so that we are not separately checking the password form fields against each other.",
    "description": "We’ll build on the user-signup-starter studio from last class, adding in model validation.\nGetting Started Open up your SpaDay application and checkout the user-validation branch.\nCreating a New ViewModel To get started with adding validation to our application, we need to first make a ViewModel. After adding a folder for storing our ViewModels, create a new ViewModel for working with form submission called AddUserViewModel. Add properties for the user’s username, password, and email.",
    "tags": [],
    "title": "Studio: Spa User Validation",
    "uri": "/viewmodels/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 15: Viewmodels and Model Validation \u003e Reading",
    "content": "Within the ViewModel or model of a C# web application, we can define validation rules using attributes. Validation attributes can be applied to model fields.\nCommon Attributes We’ll use only a few of these attributes, but you can find a full list in the documentation .\nAnnotation Description Syntax [Required] Specifies that a field cannot be null [Required] [Range] Specifies the range of potential values of a numeric field. [Range(0,100)] [StringLength] Specifies the maximum length of a string field. Has additional optional parameters to specify the minimum length of a string field. [StringLength(100)] [EmailAddress] Specifies that a string field should conform to email formatting standards. [EmailAddress] Example To apply the validation rules of the example on the previous page to the fields of an AddUserViewModel class, we can use [StringLength] and [Required].\n1 2 3 4 5 6 7 [Required] [StringLength(12, MinimumLength = 3)] public string? Username { get; set; } [Reguired] [StringLength(20, MinimumLength=6)] public string? Password { get; set; } Defining Validation Messages Each of these attributes takes an optional ErrorMessage parameter that allows you to define a user-friendly description to be used when validation fails.\nExample To apply the validation rules of the example on the previous page to the fields of an AddUserViewModel class, we can use [StringLength] and [Required].\n1 2 3 4 5 6 7 [Required(ErrorMessage = \"Username is required\")] [StringLength(12, MinimumLength = 3, ErrorMessage = \"Username must be between 3 and 12 characters long\")] public string? Username { get; set; } [Required(ErrorMessage = \"Password is required\")] [StringLength(20, MinimumLength = 6, ErrorMessage = \"Sorry, but the given password is too short. Passwords must be at least 6 characters long.\")] public string? Password { get; set; } We will see how to ensure these error messages are properly displayed in the next section, [Validating Models in a Controller]({% relref “../controller-validation/index.md” %}).\nApplying Validation Attributes To configure validation on the model-side, we begin by adding validation attributes to each field to which we want to apply constraints.\nFor our AddEventViewModel class:\nAdd [StringLength] and [Required] to the Name property. Starting with the [Required] attribute, create an error message that informs a user they need to provide the name of an event.\nFor the [StringLength] requirement, maybe put a max of 50 characters and minimum of 3. A message to inform the user of these requirements could be nice.\nFor the Description property, make it [Required] and have a longer [StringLength] than Name. Provide an error message for the [Required] statement that informs a user it is important to provide some description of the event.\n[StringLength] for Description should be longer than for Name. However, you should set a limit on how many words a user can provide. Make sure that you provide an error message that will inform them if they add too much. Check Your Code 8 9 10 11 12 13 14 [Required(ErrorMessage = \"Name is required.\")] [StringLength(50, MinimumLength = 3, ErrorMessage = \"Name must be between 3 and 50 characters.\")] public string? Name { get; set; } [Required(ErrorMessage = \"Please enter a description for your event.\")] [StringLength(500, ErrorMessage = \"Description is too long!\")] public string? Description { get; set; } Not adding a [Required] attribute onto a property would make the field optional to the form submission.\nThe required MaximumLength and optional MinimumLength parameters for [StringLength] specify the maximum and minimum number of allowed characters, respectively. Omitting the minimum length requirement means that no min or max will be applied for the field.\nEach of our attributes also receives an ErrorMessage parameter. This parameter provides a user-friendly message to display to the user if the particular validation rule fails. We will see how to display these in a view a bit later.\nNext, we add a new property to store a contact email for each event. This is a string named ContactEmail. Validating email addresses by directly applying each of the rules that an email must satisfy is extremely difficult. Thankfully, there is an [EmailAddress] validation attribute that we can apply to our new field.\nCheck Your Code 16 17 [EmailAddress] public string? ContactEmail { get; set; } Before we can start up our application, we need to add a new input to our form in Events/Add.cshtml to take in the contact email for an event organizer. We want to provide the text a user will see for providing us with a contact email. The reflected value would not include the space between “Contact” and “Email”.\nCheck Your Code 14 15 16 17 \u003cdiv class=\"form-group\"\u003e \u003clabel asp-for=\"ContactEmail\"\u003eContact Email\u003c/label\u003e \u003cinput asp-for=\"ContactEmail\" /\u003e \u003c/div\u003e We also need to add a new column to the Events/Index.cshtml template to make ContactEmail visible.\nCheck Your Code ",
    "description": "Within the ViewModel or model of a C# web application, we can define validation rules using attributes. Validation attributes can be applied to model fields.\nCommon Attributes We’ll use only a few of these attributes, but you can find a full list in the documentation .\nAnnotation Description Syntax [Required] Specifies that a field cannot be null [Required] [Range] Specifies the range of potential values of a numeric field. [Range(0,100)] [StringLength] Specifies the maximum length of a string field.",
    "tags": [],
    "title": "Validation Attributes",
    "uri": "/viewmodels/reading/validation-attributes/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 14: Models and Model Binding \u003e Reading",
    "content": "To effectively work with data, we need to add another element to our MVC application. Say for example, we want to remove an event from our list. If two events both have the same name, we can’t yet identify which of the events to delete.\nIn CodingEvents, we add a unique identifier field to Events to better handle and track distinct Event instances. Next, we’ll also create another model class called EventData. This allows us to encapsulate data storage and prepare ourselves for decoupling the Event model from the controller.\nAdd a Unique Id Identifying data by a user-defined string called name is not a sustainable or scalable method of handling data in most situations. Consider the address book example. How can we distinguish between two contact entries with the same name field? It is a frequent practice to add a unique identifier field (sometimes called, or even labelled, uid) to a class responsible for modelling data. This ensures that our address book can contain two separate entries for our contacts who have the same name as one another.\nTo accomplish the same data clarity with events, we’ll add a few things to the event model class:\nA readonly id field.\nA static counter variable, nextId.\nAdditional constructor code that:\nSets id to the nextId value. Increments nextId. The result in Models/Event.cs:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 namespace CodingEvents.Models { public class Event { public string Name { get; set; } public string Description { get; set; } public int Id { get; } static private int nextId = 1; public Event(string name, string description) { Name = name; Description = description; Id = nextId; nextId++; } public override string ToString() { return Name; } } } Note Here’s a closer look at what’s going on in line 8.\nId is created as a get-only auto-implemented property. You’ve seen this syntax a few times before. The backing field, id is readonly because no setter method has been written for the field. The only place id’s value may be assigned is in a constructor (as it is on line 15).\nYou will also need to override the Equals() method and the GetHashCode() method to use the Id property.\n1 2 3 4 5 6 7 8 9 public override bool Equals(object? obj) { return obj is Event @event \u0026\u0026 Id == @event.Id; } public override int GetHashCode() { return HashCode.Combine(Id); } Finally, try to update the Events/Index.cshtml view to display the value of Id in the table of events.\nWith these additions, every time a new event object is created it is assigned a unique integer to its id field.\nCreate a Data Layer Now that we’ve begun building a model, it’s a good time to remind ourselves that models are not designed to be data storage containers. Rather, models are meant to shape the data stored in another location. They shape data into objects that fit into the logic of our applications. As we work our way into learning about database usage and service calls, however, we’ll use a C# class to store some data temporarily.\nA data layer adds abstraction between models and the data we want to store. As we’ll see, a data layer allows us to pass on responsibility of exactly how our data is stored.\nTo get started with a data layer, create a new directory called Data at the root of your project, on the same level as the rest of the MVC components. Inside of Data/, add a class EventData. Whereas Event is responsible for organizing user-inputted information into a C# object, EventData is responsible for maintaining those objects once they are created. EventData is itself a C# class that stores events. It contains several methods for managing and maintaining the event data that simply extend System-provided collection methods.\nThe contents of Data/EventData.cs:\n6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 namespace CodingEventsDemo.Data { public class EventData { static private Dictionary\u003cint, Event\u003e Events = new Dictionary\u003cint, Event\u003e(); // GetAll public static IEnumerable\u003cEvent\u003e GetAll() { return Events.Values; } // Add public static void Add(Event newEvent) { Events.Add(newEvent.Id, newEvent); } // Remove public static void Remove(int id) { Events.Remove(id); } // GetById public static Event GetById(int id) { return Events[id]; } } } With EventData now managing a collection of events, we must once again refactor EventsController to update the items stored in the dictionary. In keeping with the objective to remove data handling from the controller, we’ll remove the list of events at the top of the class. Consequently, for the Index() action method, we’ll now use events from EventData to populate a ViewBag.events property:\n17 ViewBag.events = EventData.GetAll(); And back to NewEvent, we’ll make use of the .add() method from EventData:\n33 EventData.Add(new Event(name, desc)); Delete an Event Now that we’ve refined our events storage method, we are able to tackle the task of deleting an object. To delete an event object from storage, we’ll grab the event’s id and use that information to call the Remove() method of EventData. Since the delete event is user-initiated, a controller will be involved to pass the information from the user-accessible view to the data layer. So our first step with this task is to create an action method to return a view designed to delete events.\nOnto the end of EventsController, add the following method:\n39 40 41 42 43 44 public IActionResult Delete() { ViewBag.events = EventData.GetAll(); return View(); } We’ll now need to create a new view for the path mapped in the method above. Add a new template, Views/Events/Delete.cshtml. This view will reference event id fields in order to distinguish which items the user will request to delete via checkbox inputs.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u003ch1\u003eDelete Event\u003c/h1\u003e \u003cform method=\"post\"\u003e @foreach (var evt in ViewBag.events) { \u003cdiv class=\"form-group\"\u003e \u003clabel\u003e \u003cspan\u003e@evt.Name\u003c/span\u003e \u003cinput type=\"checkbox\" name=\"eventIds\" value=\"@evt.Id\" class=\"form-control\"\u003e \u003c/label\u003e \u003c/div\u003e } \u003cinput type=\"submit\" value=\"Delete Selected Events\" class=\"btn btn-danger\"\u003e \u003c/form\u003e We also need a POST handler to take care of what to do when the delete event information is submitted by the user. We’ll have this post handler redirect the user back to the events home page once they have selected which event, or events, to remove from storage.\nIn EventsController, add another controller method:\n47 48 49 50 51 52 53 54 55 56 [HttpPost] public IActionResult Delete(int[] eventIds) { foreach (int eventId in eventIds) { EventData.Remove(eventId); } return Redirect(\"/Events\"); } Check Your Understanding Question In CodingEvents, which method can we call to list every event object?\nEvents.Get() EventData.GetEvery() Event.GetAll() EventData.GetAll() Question In CodingEvents, breaking up the event storage from the Event model is an example of which object-oriented concept?\nInheritance Polymorphism Encapsulation MVC design ",
    "description": "To effectively work with data, we need to add another element to our MVC application. Say for example, we want to remove an event from our list. If two events both have the same name, we can’t yet identify which of the events to delete.\nIn CodingEvents, we add a unique identifier field to Events to better handle and track distinct Event instances. Next, we’ll also create another model class called EventData.",
    "tags": [],
    "title": "Models and Data",
    "uri": "/aspdotnet-model-classes/reading/data-layer/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 14: Models and Model Binding",
    "content": "For this studio you will add functionality to allow users to sign up for your SpaDay app.\nThe starter code has been modified from where you left off last class. Grab the refactored code on the user-signup-starter branch .\nYou’ll notice in this branch that the name has been removed from the service selection form. Once we implement user-signup functionality, we can use a given user’s name to identify the spa client. We’ve also moved data into a Client model and out of the SpaController class.\nIn this studio, we’ll ask you to write another model, User. User and Client may at first appear redundant, but in the future as you develop your spa application, you may find a scenario where a user is logging in and is not also Client.\nGetting Ready Within SpaDay, create the following files.\nCreate a UserController in Controllers. Create a new folder, User, within Views. Create Index.cshtml and Add.cshtml templates within Views/User/. Create a User class within Models. Creating the Model Your User class should have a few properties: Username, Email, and Password.\nRendering the Add User Form In the UserController, create an action method Add() to render the form. This action method should correspond to the path /user/add, and for now, it can just return the Add.cshtml view.\nTip Don’t forget to add /user/add to your path when you test your new features.\nWithin the Add.cshtml template, create a form that accepts inputs for each of the User class properties. Include an additional password input field to verify the password input. The form should be set up to POST to /user.\nBe sure to set type=\"password\" for the password and verify inputs, to ensure the passwords are not visible when being typed into the form. You can also set type=\"email\" on the email input, which will enable some basic client-side validation. We’ll tackle validation in more detail in the next lesson.\nProcessing Form Submission Within the UserController, create an action method with this signature:\npublic IActionResult SubmitAddUserForm(User newUser, string verify) { // add form submission handling code here }This will use model binding to create a new user object, newUser, and pass it into your action method.\nNote You don’t need to store the User object anywhere for this studio. We’re focusing on form handling and validation in this exercise. If you want to keep track of users using the method we employed in the models lesson video, check out the Bonus Missions below.\nCheck that the verify parameter matches the password within the newUser object.\nIf it does, store the user’s name in a ViewBag property and render the User/Index.cshtml view by returning View(\"Index\"). If the passwords don’t match, render the form again. Refining Form Submission Once registered, we want the user to access the form selecting their spa services and see a personalized welcome message!\nIn User/Index.cshtml, add an h1 element with a welcome message. Use the ViewBag property containing the user’s name to personalize the message! Also in User/Index.cshtml, add an a element to take the user back to the path, /spa, where the Spa/Index.cshtml template will be rendered. If the form is re-rendered when a password is not verified, we should let the user know that their form was not properly submitted. Add an error property to ViewBag letting the user know that their passwords should match. This property will need to correspond to an element in the template that will only render the error text when the passwords do not match.\nIf we send a user back to re-populate the form, it would be nice to not clear their previous submission. We won’t need to save the password entries in this fashion.\nIn the form submission action method, add the username and email fields of the submitted user as ViewBag properties.\nBack in the form, add a value attribute to these form fields and make them equal to the ViewBag properties.\nBonus Missions Add a Date property in User, and initialize it to the time the user joined (i.e. when the User object was created). At the bottom of User/Index.cshtml, add a div. Inside that element, add account details such as the user’s email and the date they joined. ",
    "description": "For this studio you will add functionality to allow users to sign up for your SpaDay app.\nThe starter code has been modified from where you left off last class. Grab the refactored code on the user-signup-starter branch .\nYou’ll notice in this branch that the name has been removed from the service selection form. Once we implement user-signup functionality, we can use a given user’s name to identify the spa client.",
    "tags": [],
    "title": "Studio: Spa User Signup",
    "uri": "/aspdotnet-model-classes/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 12: Tools in Visual Studio \u003e Reading",
    "content": "Some of the features that you will find yourself leaning on the most as you further your career in tech is the Visual Studio debugging tools.\nNote The links for each debugging feature below are for Windows users. Mac users will find that Visual Studio for Mac has the same exact features, but those features may look slighlty different or be in a slightly different location. We have provided some extra tips for Mac users at the end in case you haven’t been able to locate these tools in your copy of Visual Studio for Mac.\nOpen up your examples repo and find the HelloMethods project. Read through each item, make note of how the debugging tools work for each item, and practice using the tool on HelloMethods:\nRight-click in the text editing window to add a breakpoint to your code.\nStart debug mode with the run button as you might normally run your program.\nMake note of the debugger panes and how you might make use of them:\nAutos pane shows the values of parameters and variables on the line that the debugger is currently sitting on, as well as the line above. Locals pane shows the value of local variables and parameters within the program being debugged. Add variables, parameters, and expressions to the Watch pane to monitor their values while debugging. Call Stack pane displays the record of the methods that have been called in the program being debugged. View a list of breakpoints in the Breakpoints pane. You may also disable and enable breakpoints from here. Debugger Code Stepping Buttons:\nStep over button moves debugger to the next line to be executed within a method. Step out button brings the debugger out of the execution of a method. Step into button makes the debugger enter the method at which it is currently paused. Note that you can’t step into System defined methods, only those defined by your program. Right-click on the breakpoint to set conditional logic for when you want the breakpoint to run.\nStop debug mode wth the stop button.\nVisual Studio for Mac Extra Tips Your IDE may not default to Debug mode. To select for it, in the top menu, select Debug \u003e Start Debugging. To view the debugging panes, select Debug in the top menu and scroll down to Windows. Select the items you wish to view, ie. Breakpoints, Watch, etc. To add conditions to a breakpoint, right click on the breakpoint and select Edit Breakpoint. From menu that opens, use the Advanced Conditions section to set your conditions for when you want the breakpoint to be executed. For more information on using the Debugger in Visual Studio for Mac, check out this guide . Check Your Understanding Question True or False: Breakpoints on Console.WriteLine() are helpful because stepping into them reveals what is printed in the console.\nQuestion Define a breakpoint.\nA point in our code where the debugger will stop running and provide information about the current state. A point in our code that we anticipate will result in an exception or error. A point in our code where we include a print statement to see what’s going on. A point in our code where we want to throw the computer out of a window because nothing works. ",
    "description": "Some of the features that you will find yourself leaning on the most as you further your career in tech is the Visual Studio debugging tools.\nNote The links for each debugging feature below are for Windows users. Mac users will find that Visual Studio for Mac has the same exact features, but those features may look slighlty different or be in a slightly different location. We have provided some extra tips for Mac users at the end in case you haven’t been able to locate these tools in your copy of Visual Studio for Mac.",
    "tags": [],
    "title": "Debugger",
    "uri": "/vstools/reading/debugger/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views",
    "content": "After all of the hard work we have put into learning about Razor templates, it is time for a spa day. Let’s make an application to select some spa services.\nOur application needs to do the following:\nDisplay the user’s name and skin type under their customer profile. Display the appropriate facial treatments for their skin type. Display the description of the spa’s manicures or pedicures depending on the user’s interest. As always, read through the whole page before starting to code.\nSetup Fork and clone the starter code .\nOnce you have the project opened in your IDE, and run it and click the SpaDay link that appears in the upper left of the home page. You should see a small form at the /Spa route.\nThe Customer Profile In Controllers, we have a controller called SpaController. Inside SpaController are three methods.\nCheckSkinType() method: Contains the logic to determine which facial treatments are appropriate for which skin type.\nIndex() action method: Returns the Spa/Index view when GET requests are made to /spa/.\nMenu() action method: Returns the Spa/Menu view when POST requests are made to /spa/.\nIn Views/Spa, we have a Razor template called Menu. Inside Menu.cshtml, there are two div elements. Let’s add some children to the div with the id, clientProfile.\nAdd an h3 that says “Client profile”.\nNext, display the value of the name parameter from the form.\nTip This is a two step process.\nIn the controller, add a ViewBag property to hold the name value.\nIn the view, use that ViewBag property to display the name in a p tag.\nRun the application and head to localhost:5001/spa to see the results. When we fill out the form, we should see a new page with the client profile heading and name at the top.\nList All Appropriate Facial Treatments To provide treatment suggestions, SpaController.Menu() uses the CheckSkinType() method and fills a list with facial treatments that benefit the user’s skin type. Now, we just need to use Razor to display the contents of the appropriateFacials list.\nAdd the client’s skintype and the appropriateFacials list as a ViewBag property.\nNow, head back to Menu.cshtml and checkout the empty div with the id, servicesMenu.\nPass in the skintype variable to the \u003cp\u003e tag.\nIteratively add the values in appropriateFacials to an unordered list. If you need a quick reminder of the syntax, review the @foreach section .\nMani or Pedi? We want to display a description for the nail service the user selects. Inside the servicesMenu div, use @if to determine if the value of manipedi is \"manicure\" or \"pedicure\".\nIf the value of manipedi is \"manicure\", display this description:\nOur manicure is a great way to spend 30 minutes of your day! We use shea butter hand cream and the finest gel polish.\nIf the value of manipedi is \"pedicure\", display this description:\nRelax for 45 minutes in pure luxury! Our massage chairs and experienced nail techs are here to get your feet in shape for sandal season!\nEnd Result After you are done with the studio, you should be able to fill out the form, click “Submit”, and see your profile page.\nBonus Mission Try adding an element to the bottom of the page with square shaped div elements. Each square should be a different color for different available nail polishes. At the base of the project is a folder called wwwroot. Inside of that is another folder called css. Modify the site.css file inside of it to get some CSS practice. There are already a number of style rules present so remember to be give your div elements class identifiers to give your elements specificity.\nModify the form to allow the user to select either a manicure or pedicure or both. If the user selects both, display both the manicure and pedicure descriptions in the Menu view.\nWork with routes and paths to display the spa menu page on a separate route from the form.",
    "description": "After all of the hard work we have put into learning about Razor templates, it is time for a spa day. Let’s make an application to select some spa services.\nOur application needs to do the following:\nDisplay the user’s name and skin type under their customer profile. Display the appropriate facial treatments for their skin type. Display the description of the spa’s manicures or pedicures depending on the user’s interest.",
    "tags": [],
    "title": "Studio: Spa Day!",
    "uri": "/razor-views/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 11: Exceptions \u003e Reading",
    "content": "Below is a summary of some of the more commonly used exception types in C#. As we mention before, all exceptions extend the System.Exception class.\nNote It is also possible to write your own exception type that inherits from System.Exception. You may find that your particular cause of error elicits a custom exception type. We won’t cover how to write custom exception objects in this book, but you can read about how to define your own exception here .\nThe examples in this table are excerpted from this page , where you can find several other commonly used exception types.\nCommon Exception Types in C# ArgumentOutOfRangeException Thrown by methods that verify that arguments are in a given range.\nExample:\nString s = \"string\"; s.Substring(s.Length+1); ArgumentNullException Thrown by methods that do not allow an argument to be null.\nExample:\nString s = null; \"Calculate\".IndexOf(s); IndexOutOfRangeException Thrown when an array is indexed improperly.\nExample:\n//Indexing an array outside its valid range: arr[arr.Length+1] InvalidOperationException Thrown by methods when in an invalid state.\nExample:\n//Calling an Enumerable method on an empty collection: Enumerator.MoveNext() NullReferenceException Thrown when a null object is referenced.\nExample:\nobject o = null; o.ToString(); As with catching, be specific with which types of exceptions you throw. Never throw an instance of the base Exception class. If a built-in exception type works well based on it’s documented intended use, then use it! If there isn’t a built-in exception that matches your needs, then you can use a custom exception type.\nCheck Your Understanding Question When should you write your own exception class?\nThe error your code encounters is very specific and targeted. You know your code will produce an error, but you’re not sure which exception is the best fit. Writing custom exception classes is done by .NET developers only. Never, don’t do it. Question Suppose you have created an empty array of Temperature objects :\nTemperature[] temps = new Temperature[] { };What, if any, exception would you expect to encounter when the following line executes:\ndouble firstTemp = temps[0].Fahrenheit; No exception will be thrown — temps[0].Fahrenheit will return null. NullReferenceException — the object at temps[0] is null. InvalidOperationException — cannot access the object’s property. IndexOutOfRangeException — the array is empty. ",
    "description": "Below is a summary of some of the more commonly used exception types in C#. As we mention before, all exceptions extend the System.Exception class.\nNote It is also possible to write your own exception type that inherits from System.Exception. You may find that your particular cause of error elicits a custom exception type. We won’t cover how to write custom exception objects in this book, but you can read about how to define your own exception here .",
    "tags": [],
    "title": "Common Exception Objects",
    "uri": "/exceptions/reading/common-exceptions/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 10: Controllers and Routing \u003e Reading",
    "content": "Sending Form Data What if we want to send over some form data? To send data via a simple form in ASP.NET, we’ll set things up like this:\nWe have an action method that generates a form at index and responds to a GET request. We will modify the Index() method we have already written like so and comment out any attributes we have been using:\n1 2 3 4 5 6 7 8 9 public IActionResult Index() { string html = \"\u003cform method='post' action='/hello/welcome'\u003e\" + \"\u003cinput type='text' name='name' /\u003e\" + \"\u003cinput type='submit' value='Greet Me!' /\u003e\" + \"\u003c/form\u003e\"; return Content(html, \"text/html\"); } With conventional routing, we know that the Index() method currently responds to localhost:5001/hello. On form submission, we want to send the data down another path, /hello/welcome, which we specified in the action attribute in the form tag. This is the path to our Welcome() method. On line 4 above, we have given the text input the same name as the argument of the Welcome() method, which happens to be name. By giving the route to the Welcome() method in action, specifying POST as the method attribute, and matching the argument to the input, we have set up the Welcome() method to handle the form submission.\nWith the Index() method rewritten and our Welcome() method handling form submission, we can run our app and see what happens!\nOnce we hit Greet Me, the value of name, \"Tillie\", is submitted to the Welcome() method.\nWith our form working, we can add some attribute routing to streamline our code and specify routes and request types. For the Index() method, we want the method to respond to a GET request at localhost:5001/helloworld.\n1 2 3 4 5 6 7 8 9 10 11 [HttpGet] [Route(\"/helloworld\")] public IActionResult Index() { string html = \"\u003cform method='post' action='/hello/welcome'\u003e\" + \"\u003cinput type='text' name='name' /\u003e\" + \"\u003cinput type='submit' value='Greet Me!' /\u003e\" + \"\u003c/form\u003e\"; return Content(html, \"text/html\"); } Now we also want to add attributes to the Welcome() method. Welcome() should respond to a POST request so we will add an [HttpPost] attribute. We also want to use a [Route(\"path\")] attribute to specify the route to be localhost:5001/helloworld/welcome.\n1 2 3 4 5 6 [HttpPost] [Route(\"/helloworld/welcome\")] public IActionResult Welcome(string name = \"World\") { return Content(\"\u003ch1\u003eWelcome to my app, \" + name + \"!\u003c/h1\u003e\", \"text/html\"); } Now when we run our app, we can navigate to localhost:5001/helloworld and see our form. Once we fill out the form and hit Greet Me!, the app redirects to localhost:5001/hello/welcome and breaks. We didn’t update action in our \u003cform\u003e tag in the Index() method. Once we change the value of action to /helloworld/welcome, we can re-run our app and see it fully functioning.\nNote The Welcome() method can respond to a POST request and the Index() method can respond to a GET request at the same URL. To make this happen, we change the route in the action attribute in the \u003cform\u003e tag and change the route in the [Route(\"path\")] attribute above the Welcome() method to /helloworld. Re-running the app, we can submit the form and the page reloads to display our welcome message.\nCheck Your Understanding Question Which type of request should the Index() method respond to?\nGET request POST request PUT request DELETE request Question Which type of request should the Welcome() method respond to?\nGET request POST request PUT request DELETE request Question True/False: two different action methods cannot respond to different request types at the same URL.",
    "description": "Sending Form Data What if we want to send over some form data? To send data via a simple form in ASP.NET, we’ll set things up like this:\nWe have an action method that generates a form at index and responds to a GET request. We will modify the Index() method we have already written like so and comment out any attributes we have been using:\n1 2 3 4 5 6 7 8 9 public IActionResult Index() { string html = \"\u003cform method='post' action='/hello/welcome'\u003e\" + \"\u003cinput type='text' name='name' /\u003e\" + \"\u003cinput type='submit' value='Greet Me!",
    "tags": [],
    "title": "Controllers with Forms",
    "uri": "/aspdotnet-controllers-and-routes/reading/controllers-forms/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 10: Controllers and Routing",
    "content": "Wouldn’t it be nice to have a small tracker to show us what programming skills we are working on? Let’s build something that would let us do just that!\nAs always, read through the whole studio before starting.\nAt the end of the studio, your final project should be able to take input from a user via a form and post the information in a way that is easy to read.\nCreate the MVC Project In Visual Studio, create a new ASP.NET project using the Web Application (Model-View-Controller) option. Name your new project SkillsTracker. Once created, run the project and go to localhost:5001 to ensure that there are no underlying build errors to fix before coding. Now you are ready to start tracking skills.\nCreating Controllers In your project, add a controller class called SkillsController inside the Controllers folder. Inside SkillsController, you will add several methods to accomplish the following:\nAt localhost:5001/skills, add text that states the three possible programming languages someone could be working on. You need to have an h1 with the title “Skills Tracker”, an h2, and an ol containing three programming languages of your choosing.\nAt localhost:5001/skills/form, add a form that lets the user enter a date and choose their learning progress in each of the programming skills listed at /skills.\nTip Use the date input type . Note that the value is a string type.\nFor each of the skills, use select elements for selecting a description of progress.\nAlso at localhost:5001/skills/form, use [HttpPost] and request parameters to update the HTML with an h1 stating the submitted date and a list showing the user’s learning progress in the three programming languages they chose.\nEnd Result At the end of the studio, when you navigate to localhost:5001/skills, you should see the following:\nWhen you navigate to localhost:5001/skills/form, you should see a blank form that looks something like:\nIf you fill out the form, your page may render like so:\nBonus Missions Reformat your form page to use a table instead of an ordered list. Add a new path to the site to display the information from the completed form. ",
    "description": "Wouldn’t it be nice to have a small tracker to show us what programming skills we are working on? Let’s build something that would let us do just that!\nAs always, read through the whole studio before starting.\nAt the end of the studio, your final project should be able to take input from a user via a form and post the information in a way that is easy to read.",
    "tags": [],
    "title": "Studio",
    "uri": "/aspdotnet-controllers-and-routes/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 8: Interfaces and Polymorphism \u003e Reading",
    "content": "We mentioned previously that interfaces share some characteristics with abstract classes. Recall that an abstract class is one declared with the abstract keyword. You may not create an object from an abstract class and, like an interface, an abstract class is allowed to contain methods that only have signatures (that is, methods that don’t have implementation code).\nThe main differences between interfaces and abstract classes are:\nYou implement an interface, while you extend an abstract class. The net effect of this is that a class may implement interfaces while also extending a class. Note that while you can implement more than one interface, you can only extend one class.\nAbstract classes may contain non-constant fields, while interfaces can only contain constant fields.\nAbstract classes should be used to collect and specify behavior by related classes, while an interface should be used to specify related behaviors that may be common across unrelated classes.\nExample Think about our IFeedable interface. If we want to add a Dog class to our application, we might implement the IFeedable interface for our Dog class. This makes sense as dogs are creatures that we feed. However, as dogs and cats are so different, it is unlikely that they would share many characteristics through a Pet class.\nCheck Your Understanding Question Check all statements that are TRUE about the differences between interfaces and abstract classes.\nYou extend an abstract class, but implement an interface. You can implement many interfaces and many classes. Interfaces cannot contain non-constant fields, but abstract classes can. Methods that use instance properties can be in both interfaces and abstract classes. ",
    "description": "We mentioned previously that interfaces share some characteristics with abstract classes. Recall that an abstract class is one declared with the abstract keyword. You may not create an object from an abstract class and, like an interface, an abstract class is allowed to contain methods that only have signatures (that is, methods that don’t have implementation code).\nThe main differences between interfaces and abstract classes are:\nYou implement an interface, while you extend an abstract class.",
    "tags": [],
    "title": "Interfaces and Abstract Classes",
    "uri": "/interfaces-and-polymorphism/reading/interfaces-and-abstract-classes/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 8: Interfaces and Polymorphism",
    "content": "Although they look the same, the old optical discs—CDs and DVDs—are quite different from each other. Let’s use them as the focus for creating a new interface.\nGetting Ready Set up a local copy of the project:\nVisit the repository page for this project and fork it to create a copy under your own GitHub account. Open up the solution in Visual Studio to get started. Disc Project Overview In this activity, you will pair up to design a new custom interface and an abstract class.\nTake a look at the prepared CD and DVD classes in the starter code. Neither class contains members and methods. You will add these by extending a base class and implementing your interface. Before you do this, however, you need to consider what code to place in the interface vs. the abstract class vs. each specific class.\nJust like you did with your Restaurant Menu studios , you will begin with pen and paper (or similar tools).\nConsider Generic Behaviors Here are a few behaviors that both CDs and DVDs share:\nThey both spin. They both store data. Data gets written to the discs by using a laser. The data on the discs can be read by using a laser. Once loaded, they both report information like name, capacity, contents, and disc type. With your partner, add one or two more behaviors to the list. Feel free to do some quick research online if needed. Note that information like storage capacity does NOT belong on this list, since it describes a property rather than a behavior.\nFor each behavior, identify if it depends on any type of instance variable. For example, the spinning behavior does not require any field information from the CD or DVD classes.\nThis collecting and sorting of behaviors is the first step toward designing your interface and abstract class. It prompts you to consider behaviors that can be generally applied vs. those that depend on data stored in a specific object.\nConsider Class-Specific Behavior and Data Next, you and your partner need to decide which behaviors go into the interface vs. an abstract class.\nBehaviors added to an interface do NOT have to be identical for every object that implements the interface. The key is that the methods require no object-specific data. The methods can accept parameters, but these should represent generic values like a search term rather than field data like the title of a DVD.\nFor example, even though CDs and DVDs both spin, they do so at different speeds. Their behavior (spinning) is the same, but the details of that behavior vary. Thus, a method like SpinDisc() fits well into an interface.\nFor the other behaviors you and your partner sorted, decide which ones belong in the interface.\nWrite down details about how these behaviors differ for CDs and DVDs. This guides your thinking about how each class should implement the methods.\nFor the behaviors that cannot go into the interface, decide if they could be placed in an abstract class or if they need to appear in the separate CD and DVD classes.\nFinally, write down the fields and properties needed to define the properties of a CD or DVD (e.g. StorageCapacity). Consider:\nWhich members are shared by both types of discs, and which ones are unique to each class? Do any of the members represent constants? Code the Interface Now that your team has completed the before-coding thinking, it’s time to start building!\nAdd an IOpticalDisc file for the interface. Refer back to creating an interface if you need a quick review of the syntax.\nDeclare and initialize any constants.\nAdd a method signature for each of the behaviors you identified for the interface. For example:\nvoid SpinDisc(); Good work. Now you need to step back from the interface for a moment and take care of the remaining methods and fields.\nCode the Abstract Class To streamline the field and constructor code for CD and DVD, you need to start with a base class.\nCreate an abstract BaseDisc class and declare the fields used by both CD and DVD. Code the shared constructors and required methods. OK. Now put your code to work.\nComplete the Disc Classes Extend the base class into the CD and DVD classes. Implement the interface in each class. Fill in the code for each of the interface methods. Add any other necessary methods needed by each class. Add Method Calls to Main In the Main method, declare and initialize a CD and DVD object, then run each of the behaviors you and your partner identified.\nExample 1 2 myCd.SpinDisc(); myDvd.SpinDisc(); Output\nA CD spins at a rate of 200 - 500 rpm. A DVD spins at a rate of 570 - 1600 rpm. Bonus Missions: Other Discs \u0026 Disks? CDs and DVDs are not the only flat, circular media that have been used to store and return data.\nAdd classes for vinyl records (LPs) and floppy disks. Does your interface apply to all four classes? If so, implement the interface and its methods in the LP and floppy classes. If your interface does NOT apply to all of the classes, modify it to do so. (Note: At the very least, you need to rename the interface). Does your abstract class apply to LPs and floppy disks? If so, extend it into the new classes. If not, should you modify it or extend a different abstract class? What about wheels and Frisbees? These are also spinning disks, but they are not used for data storage.\nAbstract class or interface? Which one can be applied to the Wheel and Frisbee classes? Discuss these questions with your peers, then code one of the classes just for fun. ",
    "description": "Although they look the same, the old optical discs—CDs and DVDs—are quite different from each other. Let’s use them as the focus for creating a new interface.\nGetting Ready Set up a local copy of the project:\nVisit the repository page for this project and fork it to create a copy under your own GitHub account. Open up the solution in Visual Studio to get started. Disc Project Overview In this activity, you will pair up to design a new custom interface and an abstract class.",
    "tags": [],
    "title": "Studio: Spinning Discs",
    "uri": "/interfaces-and-polymorphism/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "Let’s revisit our Cat and HouseCat friends. In Visual Studio, open the csharp-web-dev-example solution and examine the two classes inside the Cats project.\nInheriting Fields and Properties Notice that Cat has a property called Family, representing the biological family of all cats.\n9 public string Family { get; } = \"Felidae\"; The family field is not directly accessible by HouseCat and can only be accessed by the get accessor of the Family property. However, there is no set accessor for Family, so the value of the family field may only be changed within Cat. It makes sense that a subclass should not be able to change the biological family of a cat, since this property should rarely, if ever, change.\nMethods of the base class Cat may be called on instances of the subclass HouseCat as if they were defined as part of the HouseCat.\nTry it out. In your project, open up Program.cs and create an instance of HouseCat. Be sure to call some of the methods it inherits from Cat.\n1 2 3 HouseCat garfield = new HouseCat(\"Garfield\", 12.0); garfield.Eat(); Console.WriteLine(garfield.Tired); // prints true The Eat method was defined in Cat, but may be called on all HouseCat instances as well. We say: “HouseCat inherits the method Eat() from Cat.” We know we have successfully called Eat() on garfield because the printed statement indicates the cat is now tired.\nbase We mention above that a subclass inherits all non-constructor methods from its base class. Indeed, when extending a class, we will not be able to create new instances of our subclass HouseCat using any constructors provided by Cat.\nThe base class Cat has a constructor that takes a single parameter of type double.\n11 12 13 14 public Cat(double weight) { Weight = weight; } But because HouseCat does not have such a constructor, the following code does not compile:\n11 HouseCat mittens = new HouseCat(8.4); Cat constructors are not inherited by HouseCat. If we want to use a Cat constructor in this subclass, we must explicitly provide it.\nTo do so, look at the constructor included in HouseCat:\n10 11 12 13 public HouseCat(string name, double weight) : base(weight) { Name = name; } Here, we use the : syntax again with the base keyword on the constructor signature. This combination allows the constructor to extend the base class constructor that takes a weight parameter. In this case, the subclass constructor also sets the value of the name field. The call to the base class constructor must be on the subclass’s constructor signature.\nIf a base class constructor takes no arguments, then the no-argument constructor is implicitly called for you in the subclass. A no-argument, or no-arg constructor, is just as the name implies, a constructor that takes no arguments.\nFor example, we can add an additional constructor in Cat:\n16 17 18 19 public Cat() { Weight = 13.0; } Then in HouseCat, we can simply define another constructor as this:\n15 16 17 18 public HouseCat(string name) { Name = name; } Even though we don’t explicitly specify that we want to call a constructor from Cat, the no-argument constructor will be called. Now, we can initialize a new HouseCat with only a name field and the Cat no-argument constructor will still be applied. Back in Program.cs, you can confirm that the base class constructor has been called:\n1 2 HouseCat spike = new HouseCat(\"Spike\"); Console.WriteLine(spike.Weight); // prints 13 As a consequence of this constructor syntax, we can easily expose any constructor from the base class by providing a subclass constructor that has the same signature, no method body, and calls the base class constructor with : base.\n20 21 22 23 public HouseCat(double weight) : base(weight) { // This is all there is to this constructor! } Warning This constructor is a bad one, and is included merely to introduce syntax and usage. We would not want to have a constructor for HouseCat that didn’t initialize an essential field such as name.\noverride Sometimes when extending a class, we’ll want to modify behavior provided by the base class. This can be done by replacing the implementation of an inherited method by a completely new method implementation. For a given method, we can do this via method overriding.\nIn our example, the Noise method of HouseCat overrides the method of the same name in Cat. When we override it, we should use override in the signature of the method in the subclass and virtual in the signature of the base class.\nHere are the methods in question.\nIn Cat:\n34 35 36 37 public virtual string Noise() { return \"Meow!\"; } In HouseCat:\n22 23 24 25 public override string Noise() { return \"Hello, my name is \" + Name + \"!\"; } If we have a HouseCat object and call its Noise() method, we will be using the method defined in HouseCat.\n1 2 3 4 5 Cat plainCat = new Cat(8.6); HouseCat cheshireCat = new HouseCat(\"Cheshire Cat\", 26.0); Console.WriteLine(plainCat.Noise()); // prints \"Meow!\" Console.WriteLine(cheshireCat.Noise()); // prints \"Hello, my name is Cheshire Cat!\" Warning When overriding a method from a base class, the method name, access level, type and number of parameters, and return type must be exactly the same.\nIn this example, the parts of our method that we have to match are:\npublic string Noise(); When overriding a method, we may call the method from the base class that we are overriding by using base. Modify your HouseCat.Noise() method as follows:\n22 23 24 25 26 27 28 29 30 31 32 public override string Noise() { if (IsSatisfied()) { return \"Hello, my name is \" + Name + \"!\"; } else { return base.Noise(); // prints \"Meow!\" } } This calls the overridden method in the base class via base.Noise(), carrying out the original behavior if the given conditional branch is reached.\nObject Class In a previous lesson, we introduced the special methods : Equals and ToString. All classes contain default implementations of these methods that can be overridden.\nIn fact, these default methods are part of a class called Object. All classes we create in C# have access to the methods and members of the Object class, because it is the base class in all .NET class hierarchies. In the case of Cat and HouseCat, Cat implicitly extends Object. Since Cat is a subclass of the Object class and HouseCat is a subclass of the Cat class, HouseCat and Cat can both access different methods and members of the Object class. So the default implementations of Equals and ToString (along with a few other methods ) are made available to us via inheritance.\nNote that we should use the override keyword when we provide new implementations of these methods as well.\nCheck Your Understanding Question For this question, refer to the code block below.\npublic class Message { public bool Friendly { get; } = true; public string Language { get; } public string Text { get; } public Message(string language, string text) { Language = language; Text = text; } }A class called Greeting extends Message. Greeting and Message are both defined within a package called Speech. Select all of the fields, properties, and methods that are inherited by Greeting.\nFriendly Language Text Message friendly language text Question For this question, refer to the code block below.\npublic class Message { public bool Friendly { get; } = true; public string Language { get; } public string Text { get; } public Message(string language, string text) { Language = language; Text = text; } }A class called Greeting extends Message. What would a constructor for Greeting need to be to call the Message constructor?\npublic Greeting(string language, string text, bool friendly) { super(language, text); Friendly = friendly; } public Greeting(string language, string text) : base(language, text) { } public Greeting() : base(language, text) { } public Greeting(string language, string text) { Language = language; Text = text; } ",
    "description": "Let’s revisit our Cat and HouseCat friends. In Visual Studio, open the csharp-web-dev-example solution and examine the two classes inside the Cats project.\nInheriting Fields and Properties Notice that Cat has a property called Family, representing the biological family of all cats.\n9 public string Family { get; } = \"Felidae\"; The family field is not directly accessible by HouseCat and can only be accessed by the get accessor of the Family property.",
    "tags": [],
    "title": "A Tale of Two Cats",
    "uri": "/inheritance/reading/cats-inheritance/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 5: Classes Part 2",
    "content": "You will find these exercises in Classes-Part-2 project of the exercises repo. You will update your Student.cs file by implementing the AddGrade and GetGradeLevel methods that were sketched out in the Instance Methods section.\nThe GetGradeLevel Method This method returns the student’s level based on the number of credits they have earned: Freshman (0-29 credits), Sophomore (30-59 credits), Junior (60-89 credits), or Senior (90+ credits).\nCheck your solution public string GetGradeLevel(int credits) { if (credits \u003c= 29) { return \"Freshman\"; } else if (credits \u003c= 59) { return \"Sophomore\"; } else if (credits \u003c= 89) { return \"Junior\"; } else { return \"Senior\"; } } The AddGrade Method This method accepts two parameters—a number of course credits and a numerical grade (0.0-4.0). With this data, you need to update the student’s GPA.\nGPA Information GPA is computed via the formula:\ngpa = (total quality score) / (total number of credits)\nThe quality score for a class is found by multiplying the letter grade score (0.0-4.0) by the number of credits.\nThe total quality score is the sum of the quality scores for all classes.\nFor example, if a student received an “A” (worth 4 points) in a 3-credit course and a “B” (worth 3 points) in a 4-credit course, their total quality score would be: 4.0 * 3 + 3.0 * 4 = 24. Their GPA would then be 24 / 7 = 3.43.\nDetermine the New GPA To update the student’s GPA:\nCalculate their current total quality score by using the formula gpa * numberOfCredits.\nUse the new course grade and course credits to update their total quality score.\nUpdate the student’s total numberOfCredits.\nCompute their new GPA.\nCheck your solution public void AddGrade(int courseCredits, double grade) { // Update the appropriate properties: NumberOfCredits, Gpa double totalQualityScore = Gpa * NumberOfCredits; totalQualityScore += courseCredits * grade; NumberOfCredits += courseCredits; Gpa = totalQualityScore / NumberOfCredits; } ToString and Equals Add custom Equals() and ToString() methods to the Student class. Add custom Equals() and ToString() methods to the Course class which you started in the exercises for the previous chapter. Check your solution public override string ToString() { return Name + \" (Credits: \" + NumberOfCredits + \", GPA: \" + Gpa + \")\"; } public override bool Equals(object obj) { if (obj == this) { return true; } if (obj == null) { return false; } if (obj.GetType() != GetType()) { return false; } Student studentObj = obj as Student; return StudentId == studentObj.StudentId; } ",
    "description": "You will find these exercises in Classes-Part-2 project of the exercises repo. You will update your Student.cs file by implementing the AddGrade and GetGradeLevel methods that were sketched out in the Instance Methods section.\nThe GetGradeLevel Method This method returns the student’s level based on the number of credits they have earned: Freshman (0-29 credits), Sophomore (30-59 credits), Junior (60-89 credits), or Senior (90+ credits).\nCheck your solution public string GetGradeLevel(int credits) { if (credits \u003c= 29) { return \"Freshman\"; } else if (credits \u003c= 59) { return \"Sophomore\"; } else if (credits \u003c= 89) { return \"Junior\"; } else { return \"Senior\"; } } The AddGrade Method This method accepts two parameters—a number of course credits and a numerical grade (0.",
    "tags": [],
    "title": "Exercises: Objects and Classes, Part 2",
    "uri": "/classes-part-2/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 5: Classes Part 2 \u003e Reading: Classes Part 2",
    "content": "Every class has a few special methods that belong to it, regardless of whether or not we define them. Exactly how every class obtains these methods will be explored in a future lesson. For now, let’s look at two important examples of these methods.\nToString The ToString method returns a string representation of a class. Calling ToString on a class that you’ve written will result in something like this:\nExample 1 2 Student person = new Student(\"Violet\"); Console.WriteLine(person.ToString()); Here, we called ToString on a Student object. The default ToString implementation is generally not very useful. Most of the time, you’ll want to write your own ToString method. To override the default ToString, you can define new behavior for the method and provide better results.\nHere’s how we might do it for Student to produce a much more friendly message:\nExample 1 2 3 4 5 6 public override string ToString() { return Name + \" (Credits: \" + NumberOfCredits + \", GPA: \" + Gpa + \")\"; } Student person = new Student(\"Violet\"); Console.WriteLine(person.ToString()); Console Output\nViolet (Credits: 0, GPA: 0.0) In the example, we define the ToString method to return a string that reports the values of the name, numberOfCredits, and gpa fields in a clear manner.\nNote that ToString is often implicitly called for you. For example, the output above could have been generated by the following code, which calls ToString on person within Console.WriteLine().\n1 2 Student person = new Student(\"Violet\"); Console.WriteLine(person); The Equals Method Suppose we have two objects of type Student, say student1 and student2, and we want to determine if the two are equal. If we try to compare the objects using ==, we will likely get a result we did not expect. This is because student1 and student2 are reference variables , which means they hold a reference to, or the address of, the actual Student objects. student1 and student2 evaluate as equal only when they have the same memory address.\nTo state that again: student1 and student2 will be equal (==) only when they refer to, or point at, the exact same object. Consider the example below, which creates two Student objects:\nExample 1 2 3 4 5 6 Student student1 = new Student(\"Maria\", 1234); Student student2 = new Student(\"Maria\", 1234); Console.WriteLine(student1.Name + \", \" + student1.StudentId + \": \" + student1); Console.WriteLine(student2.Name + \", \" + student2.StudentId + \": \" + student2); Console.WriteLine(student1 == student2); Even though the objects have the exact same keys and values, student1 and student2 point to different memory locations. Therefore, the == check returns false.\nThis is not usually how we want to compare objects. For example, we might want to consider two Student objects equal if they have the same name, email, or student ID.\nThe Equals() method determines if one object is equal to another in this sense. We introduced the method when discussing strings as it is a method on the object class and String is the object class in C#.\nThe code below shows how to use Equals() to compare two students. Note that they have different names but the same student ID, indicating they are actually the same student by our definition above.\nExample 1 2 3 4 5 6 7 Student bono1 = new Student(\"Paul David Hewson\", 4); Student bono2 = new Student(\"Bono\", 4); if (bono1.Equals(bono2)) { Console.WriteLine(bono1.Name + \" is the same as \" + bono2.Name); } If we don’t provide our own Equals() method, the default option only considers two objects equal if they are the exact same object, which means they point to the same memory address. This is identical to the behavior we see when using the == operator: bono1 == bono2.\nIn the example above, we created two different Student objects, so the expression bono1.Equals(bono2) evaluates to false. In order to compare two objects based on their fields, rather than their memory references, we need to define our own Equals() method.\nThe difference between the comparison carried out by the default Equals() method (and by the == operator), and how we would like to compare our classes, is the difference between identity and equality.\nTwo objects are identical if they both point to the same memory address. In essence, they are the same object. If object1 and object2 are identical, then changing one property value in object1 also changes that value for object2.\nTwo objects are equal if the values they store are the same at the time of comparison. student1 and student2 point to different memory addresses, but their values are all the same. Thus, we can consider them equal, even though they are not identical.\nThe default Equals() method and the == operator test for identity, whereas we want to test for equality instead. We can do so by overriding the Equals() method. We will discuss overriding in more detail later, but for now just recognize that it involves defining different behavior for an existing method.\nTwo things can be considered equal even if they do NOT have all the same values. In the case of the Student class, we might specify that two Student objects are equal if they have the same ID numbers. We would then be tempted to write a new method definition for Equals() returning the result of comparing one studentId value to another studentId value for equality. Now if we evaluated such a method with bono1 and bono2 we could get a result of true, since the student IDs match.\nOne catch of working with Equals() is that its input parameter must be of type object, even if we’re working in a class like Student. The reason why will become more clear in a later lesson, when we introduce the object class. For now, the practical implication is that we must confirm that we can convert, or cast, the input parameter to be of type Student with the as keyword. Then we compare the converted student’s ID (bono2.StudentId) to that of the current student (bono1.StudentId).\nEquality\nWhen you test for equality, you look at two different objects and compare some aspect of them to each other.\nIdentity\nWhen you test for identity, you look at two variables to see if they reference the exact same object.\nCoding a New Equals Method You’ll often want to implement Equals() yourself. When you do, be sure you understand the best practices around how the method should behave. These are a little more involved compared to coding a new ToString method.\nIn fact, the Equals() method we defined above isn’t very good by most C# programmers’ standards. Let’s improve it.\nProblem #1\nThe method argument cannot be converted to a Student instance.\nWhen we attempt to cast the argument ToBeCompared to type Student, we’ll get an exception if ToBeCompared can’t be properly converted. This happens if something other than a Student object gets passed into Equals(). To prevent this from happening, we’ll return false if ToBeCompared was not created from the Student class. To check this, we use the GetType method, which is available to every object (similarly to ToString).",
    "description": "Every class has a few special methods that belong to it, regardless of whether or not we define them. Exactly how every class obtains these methods will be explored in a future lesson. For now, let’s look at two important examples of these methods.\nToString The ToString method returns a string representation of a class. Calling ToString on a class that you’ve written will result in something like this:\nExample 1 2 Student person = new Student(\"Violet\"); Console.",
    "tags": [],
    "title": "Special Methods",
    "uri": "/classes-part-2/reading/special-methods/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 5: Classes Part 2",
    "content": "We began designing and implementing our Menu and MenuItem classes in the last studio . Let’s continue working on these classes by adding some methods.\nDesign To review, here are the details you have from the restaurant owner:\nThe menu consists of several menu items. Each menu item has a price, description, and category (appetizer, main course, or dessert). It should be possible to display whether or not a menu item is new. The app should know when the menu was last updated, so visitors can see that the restaurant is constantly changing and adding exciting new items. Based on these details, you need to include some instance methods:\nA way to add and remove menu items from the menu. A way to tell if a menu item is new. A way to tell when the menu was last updated. A way to print out both a single menu item as well as the entire menu. A way to determine whether or not two menu items are equal. Starting with pen and paper (or your favorite notes application on your laptop), sketch out the methods that you need to add to these classes. List the method names and access levels, along with the types of all input and return parameters. Also, consider whether any methods should be static.\nShare Your Design Once you have sketched out your methods, pair with a classmate and take turns presenting your designs. Class design can be subjective, so it’s important to properly think and talk through your choices before coding.\nWhile your partner is presenting their design, ask questions about why they made the decisions they did. Consider other use cases that might come up, and see if their design fits with those.\nImplementation In Visual Studio, open your RestaurantMenu project. Create a branch in your repository for your Lesson 4 Studio solution. For the studio, make sure all of your work is in that branch. Within the project, add the methods you designed to your Menu and MenuItem classes. Test your classes inside Program.cs: Create several items and add them to a menu. Print the entire, updated menu to the screen. Print an individual menu item to the screen. Delete an item from a menu, then reprint the menu. Commit Your Work In the previous studio, you should have created a repository on GitHub for your restaurant project. Since you just modified that project in this studio, commit your changes and push them up to the same repository.\nBonus Mission If a user tries to add an item that is already on the menu, print a message that warns the user about the duplicate. Also, prevent the duplicate from being added to the menu.",
    "description": "We began designing and implementing our Menu and MenuItem classes in the last studio . Let’s continue working on these classes by adding some methods.\nDesign To review, here are the details you have from the restaurant owner:\nThe menu consists of several menu items. Each menu item has a price, description, and category (appetizer, main course, or dessert). It should be possible to display whether or not a menu item is new.",
    "tags": [],
    "title": "Studio: Restaurant Menu Continued ",
    "uri": "/classes-part-2/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives After completing this chapter, you should be able to do the following:\nBecome familiar with C# Operators ==, !=, \u003c, \u003e, \u003c=, and \u003e= Write conditionals using: if, else, if/else statements switch, break, and continue statements Create loops and know when to use them for, foreach, while, and do...while Know how and when to use list, array, and dictionary collections. Key Terminology Throughout this lesson, you will see lots of new vocabulary. Here is everything that you should make note of:\nConditionals == != \u003c \u003e \u003c= \u003e= if else if else else if switch case break default fallthrough Loops for loop foreach loop in while loop do-while loop continue StringBuilder Collections data structure List Dictionary KeyValuePair Array Table of Contents Reading Exercises Studio Next Steps ",
    "description": "Learning Objectives After completing this chapter, you should be able to do the following:\nBecome familiar with C# Operators ==, !=, \u003c, \u003e, \u003c=, and \u003e= Write conditionals using: if, else, if/else statements switch, break, and continue statements Create loops and know when to use them for, foreach, while, and do...while Know how and when to use list, array, and dictionary collections. Key Terminology Throughout this lesson, you will see lots of new vocabulary.",
    "tags": [],
    "title": "Chapter 3: Control Flow \u0026 Collections",
    "uri": "/flow-collections/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 3: Control Flow \u0026 Collections \u003e Reading",
    "content": "Data Structures A data structure lets us hold on to lots of data in a single place. It is a programming construct to aggregate many values into one value. Many types of data structures exist in various languages. A few examples are lists, dictionaries, arrays, tuples, etc.\nC# Collections Namespace C# provides powerful and flexible structures to store data, known as collections. The C# collections namespace refers to the various interfaces the language provides for implementing collection types. When working with collection types, we often have to use the collections namespace.\nHere, we’ll discuss a collection called List and compare it to the Array class. We’ll then introduce a third collection type called Dictionary. These three collection types will be sufficient for our basic C# needs. For more, refer to the official C# documentation on collections .\nusing System.Collections.Generic;Gradebook, Three Ways We’ll explore collections in C# by looking at different versions of the same program. The program functions as a gradebook, allowing a user (a professor or teacher) to enter the class roster for a course, along with each student’s grade. It then prints the class roster along with the average grade. In each variation of this program, the grading system could be anything numeric, such as a 0.0-4.0 point scale, or a 0-100 percentage scale.\nA test run of the program might yield the following:\nEnter your students (or ENTER to finish): Chris Jesse Sally Grade for Chris: 3.0 Grade for Jesse: 4.0 Grade for Sally: 3.5 Class roster: Chris (3.0) Jesse (4.0) Sally (3.5) Average grade: 3.5We’ll look at the gradebook using a List first.",
    "description": "Data Structures A data structure lets us hold on to lots of data in a single place. It is a programming construct to aggregate many values into one value. Many types of data structures exist in various languages. A few examples are lists, dictionaries, arrays, tuples, etc.\nC# Collections Namespace C# provides powerful and flexible structures to store data, known as collections. The C# collections namespace refers to the various interfaces the language provides for implementing collection types.",
    "tags": [],
    "title": "Collections",
    "uri": "/flow-collections/reading/collections/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 6: Unit Testing",
    "content": "For this studio, you will be writing unit tests to help you find errors in the BalancedBrackets.cs file in the starter code.\nDiscuss with your fellow students and IA how the given class should behave. What are some examples of input? What would the desired output be for each input?\nGetting Started Fork and clone the studio repository .\nIn Visual Studio, check out your repository.\nWrite unit tests to find the errors in BalancedBrackets.cs.\nThe tests you write should guide how you revise the sourcecode. Use TDD to first write tests that will work for the desired behavior of BalancedBrackets. When your tests fail, correct the class to pass your tests. The content of your tests is up to you, but you should write at least 12 tests. Tip Here’s a first test to help get you started. Assert that brackets in the correct order, \"[]\", return true.\n[TestMethod] public void OnlyBracketsReturnsTrue() { Assert.IsTrue(BalancedBrackets.HasBalancedBrackets(\"[]\")); } Note BalancedBrackets is essentially a wrapper class for a method. And because it’s only method is static, we don’t need to create an instance to test HasBalancedBrackets().\nUploading Your Work Push up your work to save your solution in your remote repository.",
    "description": "For this studio, you will be writing unit tests to help you find errors in the BalancedBrackets.cs file in the starter code.\nDiscuss with your fellow students and IA how the given class should behave. What are some examples of input? What would the desired output be for each input?\nGetting Started Fork and clone the studio repository .\nIn Visual Studio, check out your repository.\nWrite unit tests to find the errors in BalancedBrackets.",
    "tags": [],
    "title": "Studio",
    "uri": "/unit-testing/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "Our discussion of classes and objects is integral to us using object-oriented programming. Object-oriented programming stands on four pillars: abstraction, encapsulation, inheritance, and polymorphism.\nEncapsulation Encapsulation is the bundling of related data and behaviors that operate on that data, usually with restricted access to internal, non-public data and behaviors. In object-oriented programming, classes and objects allow us to encapsulate, or isolate, data and behavior to only the parts of our program to which they are relevant. Restricting access allows us to expose only that data and behavior that we want others to be able to use.\nLet’s take a look at this by developing a new class called Student.\nStudent Class Fields We previously defined a field as a variable, or piece of data, that belongs to a class. For our Student class, let’s think about the data that is typically associated with a student (in the sense of a high school or college student). There are a lot of possibilities, but here are the most important:\nName Student ID Number of credits GPA In order to declare these fields within our class, we’ll need to determine the best data type for each. A field may be of any primitive or object type. In this case, the following types will work best:\nName: string Student ID: int Number of credits: int GPA: double Let’s put these inside of a class. While they may be declared anywhere within a class, fields should always be declared at the top of the class. When we’re ready to add methods, we’ll add them below the fields.\n1 2 3 4 5 6 7 public class Student { string name; int studentId; int numberOfCredits; double gpa; } Like variables within a method, fields may be initialized when they are declared. For example, we could provide default values for numberOfCredits and gpa (default values for name and studentId don’t make sense since they should be different for each student).\nint numberOfCredits = 0; double gpa = 0.0;Class members default to private if no access modifier is provided. This means that our Student fields are inaccessible to code outside of the Student class. As a rule-of-thumb, fields should always be private unless you have a very, very, very good reason to not make them so. As we mention on the previous page, it is best practice to think carefully about what access to give fields and methods. So, let’s explicitly declare our fields to be private.\n1 2 3 4 5 6 7 public class Student { private string name; private int studentId; private int numberOfCredits = 0; private double gpa = 0.0; } Getters and Setters In order to provide access to private fields, getter and setter methods are used. Getters and setters do what you might guess: get and set a given field. If we make the getter and/or setter method for a given property public, then others will be able to access or modify the field in that way.\nNote Getter setter methods are also often called accessors.\nHere is a getter/setter pair for name (you can imagine how the others would be written).\n1 2 3 4 5 6 7 private string name; public string Name { get { return name; } set { name = value; } } Here, within get and set, name refers to the private field that stores the value of the property. In set, the special variable value will contain the value that the user is trying to set within the property.\nWe can then get or set the value of Name anywhere else (since it’s public) using dot-notation:\n1 2 3 4 5 6 7 Student josh = new Student(); // set the Name josh.Name = \"Josh\"; // get the Name Console.WriteLine(josh.Name); When you use properties in this way, the get/set methods are called implicitly when assigning or reading the property.\nAn astute question to ask at this point would be, “Why make the fields private if you’re just going to allow people to get and set them anyway!?” Great question. There are lots of reasons to use getters and setters to control access. Here are just a few:\nGetters and setters allow you to implement behavior that happens every time a field is accessed (get) or changed (set). For example, you may want track the number of times a change is made to a field. With a private field and setter method, this can be done simply by incrementing a counter variable (e.g. i++.) With a publicly available field, the steps to track its changes would be much more diffuse, if not error-prone. You can perform validation within a setter. For example, we might want to ensure that a student’s name contains only certain characters, or that their student ID is positive. You can use different access modifiers on getters and setters for the same field, based on desired usage. For example, you might want to allow anyone to be able to read the value of a field, but only classes within the same assembly to modify it. You could do this with a public getter and an internal setter, but not as a field without getters and setters, which could only be public to everyone or internal to everyone. Note One of the four fields in our Student class is a prime candidate for the scenario described in item 3. Which one do you think it is?\nTo set access levels on accessors so that they are different than the access level of the property, use an access modifier next to get or set. Here’s how we would make Name readable by everyone, but modifiable only by code within the class’s assembly. Note that the get accessor does not have an access modifier in front of it and therefore it will have the same public access as the property Name.\n1 2 3 4 5 6 7 private string name; public string Name { get { return name; } internal set { name = value; } } As an example of setter validation, let’s take a short detour to look at a Temperature class. A valid temperature can only be so low (“absolute zero”), so we wouldn’t want to allow somebody to set an invalid value. In set, we throw an exception if an invalid value is provided (we’ll cover exceptions in detail later, but for now note that they are ways of signaling errors).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class Temperature { private double fahrenheit; public double Fahrenheit { get { return fahrenheit; } set { double absoluteZeroFahrenheit = -459.67; if (value \u003c absoluteZeroFahrenheit) { throw new ArgumentException(\"Value is below absolute zero\"); } fahrenheit = value; } } } Properties A property in C# is a characteristic that users can set. Most often, properties will correspond directly to a private backing field, but they don’t have to. Let’s look at an example of a property that doesn’t directly correspond to a field. If we wanted to add a Celsius property to the Temperature class above, we might do it as follows:\n1 2 3 4 5 public double Celsius { get { return (Fahrenheit - 32) * 5.0 / 9.0; } set { Fahrenheit = value * 9.0 / 5.0 + 32; } } Since there’s a link between Fahrenheit and Celsius, we want to make sure that when one is updated, so is the other. In this case, we only store one field value (fahrenheit) and make the appropriate calculation when getting or setting the Celsius property.\nAuto-Implemented Properties If a field has both a public getter and setter, and no additional logic is needed, we can use the shorthand:\npublic string Name { get; set; }This is referred to as an auto-implemented property. When a property is auto-implemented, the compiler creates a private field that can only be accessed through the property’s get and set accessors.\nNote that in this example, the private field is name (lowercase) while the property is Name. Since C# identifiers are case-sensitive, these are two distinct members. name is referred to as a backing field, and it stores the value of the property.\nAt this point you may be asking yourself, why would I use an auto-implemented property instead of just making a field public? It comes down to properties being more flexible to change in the future, such as changing the accessibility of only the getter or setter, and more capable when used in your user interface through data binding, which we will explore more in later chapters.\nWarning If you were to try to use the same identifier for both the backing field and the property, you’ll see a StackOverflowException due to infinite recursion – i.e., the property would infinitely call itself!\nUsing properties, getters/setters, and fields, we can encapsulate the information we need in our student class.\nCheck Your Understanding Question What is a method that is used to give a private field a value?\ngetter method property setter ",
    "description": "Our discussion of classes and objects is integral to us using object-oriented programming. Object-oriented programming stands on four pillars: abstraction, encapsulation, inheritance, and polymorphism.\nEncapsulation Encapsulation is the bundling of related data and behaviors that operate on that data, usually with restricted access to internal, non-public data and behaviors. In object-oriented programming, classes and objects allow us to encapsulate, or isolate, data and behavior to only the parts of our program to which they are relevant.",
    "tags": [],
    "title": "Encapsulation",
    "uri": "/classes/reading/encapsulation/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 4: Classes",
    "content": "Let’s practice designing classes using the following scenario. You’ve been hired to create a web application for a local restaurant. They want to both display their current menu and edit it through an admin panel.\nYou’re not going to build an actual application in this studio. Instead, you will focus on the design of a portion of this application. Object-oriented programming in C# requires intentional, up-front planning. While this may seem tedious, outlining your ideas before you code helps reduce the errors you need to fix later.\nDesign You know you’ll need to create classes within the web application to facilitate this behavior and represent the various components of the menu. After talking to the owner, you have these details:\nThe menu consists of several menu items Each menu item has a price, description, and category (appetizer, main course, or dessert) It should be possible to display whether a menu item is new or not The app should know when the menu was last updated, so visitors can see that the restaurant is constantly changing and adding exciting new items Starting with pen and paper (or your favorite notes application on your laptop), sketch out the design for two classes, Menu and MenuItem. List the fields that each should have, along with the data type and access level for each. Also consider what constructors the classes might need.\nNote For this studio, we are focusing on class design for these two classes. You do not need to be concerned with how the classes would be used in an application. At this stage, don’t think about how the application will work or behave; you should focus on the way that data will be represented within these classes, and how they should relate to each other.\nYou may find it useful to use one or more of the classes provided by C#, such as DateTime .\nPresenting Your Design Once you have sketched out your fields and properties, pair with a classmate and take turns presenting your designs. Class design can be subjective, so it’s important to properly think and talk through your choices before coding.\nWhile your partner is presenting their design, ask questions about why they made the decisions they did. Consider other use cases that might come up, and see if their design fits with those.\nImplementation In Visual Studio, create a new solution, RestaurantMenu. Add the Menu and MenuItem classes and code the design that you created above. Be sure to add getters and setters as appropriate.\nCommit Your Work Create a repository on your Github account and push up your project.",
    "description": "Let’s practice designing classes using the following scenario. You’ve been hired to create a web application for a local restaurant. They want to both display their current menu and edit it through an admin panel.\nYou’re not going to build an actual application in this studio. Instead, you will focus on the design of a portion of this application. Object-oriented programming in C# requires intentional, up-front planning. While this may seem tedious, outlining your ideas before you code helps reduce the errors you need to fix later.",
    "tags": [],
    "title": "Studio: Restaurant Menu",
    "uri": "/classes/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 2: Data Types \u003e Reading",
    "content": "Strings and Characters Immutability Strings in C# are immutable, which means that the characters within a string cannot be changed.\nSingle vs. Double Quotation Marks C# syntax requires double quotation marks when declaring strings.\nC# has another variable type, char, which is used for a single character. char uses single quotation marks. The single character can be a letter, digit, punctuation, or whitespace like tab ('\\t').\nstring staticVariable = \"dog\"; char charVariable = 'd';String Manipulation The table below summarizes some of the most common string methods available in C#. For these examples, we use the string variable string str = \"Rutabaga\".\nC# Syntax Description str.Substring(3,1) Returns the character in 3rd position, (a). str.Substring(2,3) Return substring from 2nd to 4th, i.e. substring starting at index 2 and 3 characters long, (tab). str.Length Tells us the length of the string, (8). str.IndexOf('a') Returns the index for the first occurrence of ‘a’, (3). str.Split('a') Splits the string into sections at each delimiter and stores the sections as elements in an array, ({Rut, b, g}). str + str Concatenate two strings together, (RutabagaRutabaga). str.Trim() Removes any whitespace at the beginning or end of the string, (Rutabaga — there’s not whitespace here). str.ToUpper(), str.ToLower() Changes all alphabetic characters in the string to UPPERCASE or lowercase, respectively,(RUTABAGA, rutabaga). Arrays Like a lot of programming languages, C# has multiple ways of storing ordered data. The most basic type of list in C# is that of the array.\nAn array is an ordered, fixed-size collection of elements. Since C# is statically typed, arrays may only store one type of object. We can create an array of integers or an array of strings, but we may not create an array that holds both integers and strings.\nThe syntax for creating an array capable of holding 10 integers is:\nint[] someInts = new int[10];Note the square brackets next to int. This indicates that we want someInts to store a collection of integers instead of a single number.\nTo create an array of a different size, replace the number 10 in the brackets with the desired size. To create an array holding a different type, replace int (on both sides of the assignment) with the desired type, like double or string.\nIn addition to the technique above, we can initialize an array using a literal expression:\nint[] someOtherInts = {1, 1, 2, 3, 5, 8};Here, the size is implicit in the number of elements in the literal expression {1, 1, 2, 3, 5, 8}. Also note the use of curly braces { } instead of square brackets [ ].\nTo access array elements, we use square brackets and zero-based indexing.\nint anInt = someOtherInts[4]; // anInt stores the integer 5.It is important to note that arrays in C# may not change size once created. This turns out to be not very practical, so thankfully C# provides more flexible ways to store data — objects that allow us to rearrange, add to, or remove data — which we’ll explore in a later lesson.\nAside from using arrays to build some simple loop examples, we’ll only use them in special cases. However, they are ubiquitous in C# programming, so it’s good to know how they work.\nCheck Your Understanding Question Name the C# method or property responsible for removing whitespace from a string value:\n.Length .Trim() .Split() .Strip() Question Assume that we declare the following C# array:\nstring[] someWords = new string[5];Which of the following shows a correct initialization for the array?\nsomeWords = {'hello', 'world', '123', 'LaunchCode ROCKS!'} someWords = {\"hello\", \"world\", \"123\", \"LaunchCode ROCKS!\", \"Java\"} someWords = {\"hello\", \"world\", 'a', \"LaunchCode ROCKS!\", \"Java\"} someWords = {\"hello\", \"world\", \"avocado\", \"LaunchCode ROCKS!\"} ",
    "description": "Strings and Characters Immutability Strings in C# are immutable, which means that the characters within a string cannot be changed.\nSingle vs. Double Quotation Marks C# syntax requires double quotation marks when declaring strings.\nC# has another variable type, char, which is used for a single character. char uses single quotation marks. The single character can be a letter, digit, punctuation, or whitespace like tab ('\\t').\nstring staticVariable = \"dog\"; char charVariable = 'd';String Manipulation The table below summarizes some of the most common string methods available in C#.",
    "tags": [],
    "title": "Strings, Characters, and Arrays",
    "uri": "/data-types-and-variables/reading/strings-chars-and-arrays/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 2: Data Types",
    "content": "To get started, create a new console application in Visual Studio for the studio.\nCalculate the Area of a Circle Write a program that prompts the user for the radius of a circle. Calculate the area of the user’s circle and print the result.\nTip Recall that the area of a circle is A = pi * r * r where pi is 3.14 and r is the radius.\nHere’s an example of how your program should work:\nEnter a radius: 2.5 The area of a circle of radius 2.5 is: 19.625 Some questions to ask yourself:\nWhat data type should the radius be? What is the best way to get user input into a variable radius of that type? Note Use the System.Math class in C# to get the value of pi and square the radius. The documentation has guidance on how to use the PI field and the Pow method.\nMore Calculations Using the same radius, calculate the circumference (2*pi*r) and diameter of the circle (2*r). Output the results. Road Trip! Ask the user for the miles per gallon of their car. If the radius that they entered is in miles, output how many gallons of gas they will use to go around this circle. Bonus Missions Think about how we could make this program more modular by breaking out some of the code into a separate class. For example, we could pull out the circle information into a Circle class and leave the user questions and console messages in Program. Take a look at the using statement for a refresher on how to reference another class file. Extend your program further by using a while or do-while loop , so that when the user enters a negative number they are re-prompted for a radius. Add additional validation to your program. If the user enters a non-numeric character or a empty string? Print an error message and quit. You’ll need to peek ahead to learn about conditional syntax in C# . ",
    "description": "To get started, create a new console application in Visual Studio for the studio.\nCalculate the Area of a Circle Write a program that prompts the user for the radius of a circle. Calculate the area of the user’s circle and print the result.\nTip Recall that the area of a circle is A = pi * r * r where pi is 3.14 and r is the radius.\nHere’s an example of how your program should work:",
    "tags": [],
    "title": "Studio: Area of a Circle",
    "uri": "/data-types-and-variables/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments",
    "content": "Introduction Your apprenticeship at LaunchCode is going well! Only a few weeks in and you’re regularly making contributions to code that will eventually be used by all LaunchCode staff.\nYour last task was to get the prototype Tech Jobs app in good shape. Now it’s time to advance the underlying structure of the program.\nYour mentor on this project is Sally, one of the developers at LaunchCode. She regularly supports coders who are just getting started with their careers.\nAfter seeing your strong work with your last project, Blake reported that you performed well and learned quickly. Because of your success, he and Sally feel comfortable assigning you to a set of tasks that are a notch up in difficulty.\nSally completed some initial work on the project and left you some TODOs.\nLearning Objectives In this project, you’ll show that you can:\nRead and understand code written by others. Work with objects to encapsulate data and methods. Use the generator in Visual Studio to automate routine tasks. Use unit testing and Test-Driven-Development (TDD) to verify and create new methods. Apply the concept of inheritance to streamline your classes (the DRY idea—Don’t Repeat Yourself). Getting Started Get the Starter Code. In Canvas, Graded Assignment #2: TechJobs (Object-Oriented Edition) contains a GitHub Classroom assignment invitation link, and then set up the project in Visual Studio. Refer back to the GitHub Classroom instructions from Assignment #0: Hello, World! for details. Open Visual Studio. If the app opens up to an existing project, close it. From the Visual Studio dialog box, open your copy of the starter code. TechJobs (Object-Oriented Edition) Sally has gotten the ball rolling by adding a Job class, along with classes to represent the individual properties of a job: Employer, Location, PositionType, and CoreCompetency. She completed the Employer class, and she left you the task of filling in the others.\nAs the team gets closer to deploying the app—and abandoning the test data they’ve been using—they’ll want an easy way to add and remove jobs via a user interface. Before that, however, you need to finish shifting the project to an object-oriented design.\nWhy Change to Object-Oriented? Working with data stored as strings in dictionaries and lists isn’t a good long-term solution, for reasons that we point out below.\nThe Job class introduces an object-oriented design to the application. It contains all of the properties you used in the console version of TechJobs: Name, EmployerName, EmployerLocation, JobType, JobCoreCompetency. There’s also an Id property which will be used to uniquely identify Job objects.\nThe main difference between the object representation of a job and the string-based representation is that the values of EmployerName, EmployerLocation, and the other non-ID properties are no longer strings. Instead, they are classes of their own.\nJob Members Open the Job class file.\nWarning The Job class is currently commented out. Leave it in this state. You can still explore the code.\nYou’ll see the following properties (among other class members):\n1 2 3 4 5 public string Name { get; set; } public Employer EmployerName { get; set; } public Location EmployerLocation { get; set; } public PositionType JobType { get; set; } public CoreCompetency JobCoreCompetency { get; set; } Of these, only Name is a string. Sally created classes to represent each of the other properties. These classes—Employer, Location, CoreCompetency, PositionType—have members to hold values and IDs.\nSo, for example, if you had a Job instance, you could get the name of the employer this way:\n// job is an instance of Job string employerName = job.EmployerName.Value;Additionally, the ToString() method of the Employer class is set up to return whatever the value field holds. Thus, using one of these objects in another string context like Console.WriteLine will print the data stored in value.\n// Prints the name of the employer Console.WriteLine(job.EmployerName);Why do we go through all of this trouble when we could store this job-related data as strings?\nThere are a couple of reasons.\nEliminate Duplication of Data In our app, we have multiple jobs that have the same value in a given field. For example, there are multiple jobs with position type “Web - Full Stack”, and each employer may list several jobs. If we store the values of these fields as strings directly within each Job object, that data would be repeated in several places across the application.\nBy using objects, we can have a single PositionType object with the value “Web - Full Stack”. Each job that wants to use that position type holds onto a reference to the given object. Similarly, we can have one Employer object for each employer.\nAside from reducing the amount of raw data/memory that the application uses, this will allow data to be updated more easily and properly. If we need to change the name of an employer (e.g. due to a typo or a name change at the company), we can change it in one place, the single Employer object that represents that company.\nAs you continue to work on the assignment, you will find further ways to streamline the application.\nEnable Extension While the four Job properties represented by objects will primarily be used for their string values, it’s easy to imagine adding new properties to address future needs.\nFor example, it would be useful for an Employer object to have an address, a primary contact, and a list of jobs available at that employer.\nFor a Location object, useful information includes a list of zip codes associated with that location, in order to determine the city and state for an employer or job.\nIf we were to store these four new properties as strings within the Job class, extending and modifying this behavior would be much more complicated and difficult moving forward.\nReview the Solution and the Auto-grading Tests Now that you have some understanding of why we want to use Object-Orientation principles in our code, let’s explore the code.\nProjects in Solution Explorer Inside the Solution Explorer, you should see the following three projects:\nThe TechJobs.Tests project is where you will write unit tests for Task 4. The TechJobsOO.Tests project contains auto-grading tests and 2 text files. The TechJobsOOAupoGraded6 project contains the code you will write and test. Test Projects in Test Explorer This assignment has many more tests than the previous assignments. We have created a test class for each assigned task.\nOpen the Test Explorer, you should see TechJobsOOAutoGraded6. Expand this to see the following test projects:\nTechJobs.Tests project is where you will write your own unit tests in this assignment. Right now, it contains an empty test method and will pass. TechJobsOO.Tests project contains the auto-graded tests for this assignment. In Test Explore, expand TechJobs.Tests project \u003e TechJobs.Tests namespace \u003e JobTests class \u003e TestMethod. This is an empty method that you will expand on in Task 4. For now, you can leave it alone.\nIn Test Explorer, expand the TechJobsOO.Tests project. Nothing will happen because the tests have been commented out. As you start each task, you will need to uncomment the auto-graded assignments. Many of these tests are dependent upon code that doesn’t exist right now. By the end of a task, you will have enough code written to run the task tests.\nSince we can’t see our tests in the Test Explorer, let’s look that them inside the Solution Explorer. Expand TechJobsOO.Tests inside the Solution Explorer and open TestTask2 tests class. You should see 8 tests listed by their names. These are all of the tests that will be run after you complete Task 2. You can run all your tests after you complete Task 2 or run individual tests as you go through Task 2.\nNote There is no TestTask1 since Task 1 does not require any coding.\nTask List in Visual Studio To help you keep track of your tasks, Sally added many TODO tasks. Use the Task List to as you work through the project.\nWindows Users : To open Task List, select View \u003e Task List\nMac Users : To open Task List, select View \u003e Tasks\nRunning the Auto-grading Tests If you need a refresher on running auto-graded tests, review Assignment #0: Hello, World! .\nEach task of the assignment will prompt you to uncomment and run the auto-graded tests. Once you have completed the task you can leave the tests active. They should all continue to pass as you continue through this assignment.\nAs you work on the components of the given tasks, continually re-run the tests to see the failing tests gradually pass. When all tests within the file pass, you’re ready to move on to the next task. As you expand your codebase, none of your earlier tests should fail.\nYour Assignment Your Tasks The list below provides a general overview of your assigned tasks. Specific details for each part appear in the following sections, so be sure to read them carefully as you solve each problem.\nReview Sally’s code in the Employer class to learn how to assign a unique ID. Add properties and custom methods as needed to the Location, CoreCompetency, and PositionType classes. Complete the Job class using what you learned in steps 1 and 2. Use unit testing to verify the constructors and Equals() methods for the Job class. Use TDD to design and code a custom ToString() method for the Job class. Use inheritance to DRY the code within Employer, Location, CoreCompetency, and PositionType. On to Task 1 .",
    "description": "Introduction Your apprenticeship at LaunchCode is going well! Only a few weeks in and you’re regularly making contributions to code that will eventually be used by all LaunchCode staff.\nYour last task was to get the prototype Tech Jobs app in good shape. Now it’s time to advance the underlying structure of the program.\nYour mentor on this project is Sally, one of the developers at LaunchCode. She regularly supports coders who are just getting started with their careers.",
    "tags": [],
    "title": "Assignment 2: TechJobs (Object-Oriented Edition)",
    "uri": "/assignments/tech-jobs-oo/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 2: TechJobs (Object-Oriented Edition)",
    "content": " Warning Due to the fact that this code is being auto-graded as you work through it, make sure that you use any and all names for classes, variables, methods, etc provided to you in these directions.\nSally needs you to build up the remaining classes. In each case, refer to the Employer class for hints on how to structure your code.\nThe Location Class Open the Location.cs file. Note that the methods for this class are done, as is the constructor for initializing the Id property.\nSally left you a TODO comment with instructions for coding a second constructor:\nIt should call the first constructor to initialize the id field. It must also initialize the value field for a new Location object. Note To locate all of the TODOs for Task 2, use the Task List feature in Visual Studio.\nWindows Users : To open Task List, select View \u003e Task List\nMac Users : To open Task List, select View \u003e Tasks\nThe CoreCompetency Class Open the class file. In this case, the constructors and custom methods are ready. Sally needs you to change the id and value fields to auto-implemented properties, but NOT nextId.\nThe PositionType Class Open the class file. This time the constructors are done. Sally’s comments direct you to where you need to add the custom methods.\nCode a ToString() method that just returns the value of a PositionType object. Use the Generate option again to add the Equals() and GetHashCode() methods. Refer to the final section of the “Classes and Objects, Part 2” chapter if you need a quick review. Assume that two PositionType objects are equal when their id fields match. Run TestTask2 tests Uncomment the tests inside the TestTask2class. Look for the TODOs to help you find the multi-line comments marks.\nRun your TestTask2 unit tests.\nRefactor your code as needed.\nDo not start Task 3 until you have passed all of Task 2’s auto-grading unit tests.\nTip Now would be a good time to save, commit, and push your work up to GitHub.\nOn to Task 3 .",
    "description": "Warning Due to the fact that this code is being auto-graded as you work through it, make sure that you use any and all names for classes, variables, methods, etc provided to you in these directions.\nSally needs you to build up the remaining classes. In each case, refer to the Employer class for hints on how to structure your code.\nThe Location Class Open the Location.cs file. Note that the methods for this class are done, as is the constructor for initializing the Id property.",
    "tags": [],
    "title": "Task 2: Complete the Support Classes",
    "uri": "/assignments/tech-jobs-oo/task-2/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 3: TechJobs MVC",
    "content": "Add a Results() action method to SearchController:\nThe Results() method should take in two parameters. Both parameters must be strings and the first one should be called “searchType” and the second one should be called “searchTerm”. First, you need to create a local variable called “jobs” that is of type List\u003cJob\u003e. If the user enters “all” in the search box, or if they leave the box empty, call the FindAll() method from JobData. Otherwise, send the search information to FindByColumnAndValue. In either case, store the results in a jobs List. Pass jobs into the Index.cshtml view. Pass ListController.ColumnChoices into the view, as the existing Index() action method does. Run the tests in TestTaskThree to see how you did!",
    "description": "Add a Results() action method to SearchController:\nThe Results() method should take in two parameters. Both parameters must be strings and the first one should be called “searchType” and the second one should be called “searchTerm”. First, you need to create a local variable called “jobs” that is of type List\u003cJob\u003e. If the user enters “all” in the search box, or if they leave the box empty, call the FindAll() method from JobData.",
    "tags": [],
    "title": "Task 3: Complete SearchController",
    "uri": "/assignments/techjobs-mvc/task-three/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 4: Tech Jobs Persistent",
    "content": "Using a many-to-many relationship, we can apply jobs to multiple skills, and a skill to multiple jobs. We want to create a table that will track the relationships between both Jobs and Skills. To do this, we need to tell the Modelbuilder which properties to use.\nUpdate the JobDbContext In the OnModelCreating method, we want to create a table called “JobSkills”. This table will use an Entity of type Job. It has many Skills with many Jobs. It will use Entity to create a table named ”JobSkills”. Run a new migration and update your database to see your new table. Test It with SQL Run your application and make sure you can create a new job with an employer and several skills. You should now also have restored full list and search capabilities.\nSQL Task: In queries.sql under “Task 3”, write a query to return a list of the skills that are attached to jobs in alphabetical order. If a skill does not have a job listed, it should not be included in the results of this query.\nTip You will need to make use of “is not null”.\nProgress Check Testing: Run the tests found in Task.Tests. These should all pass unless your database connections have been set incorrectly.\nYou will need to uncomment the code for the unit tests. Look for TODO statements in lines 1 and 304 in the DatabaseTesting.cs in Task.Tests.\nBuild: You should have a working website that allows you to make a job, employer, and skill and connect them. You should be able to see the connections in an the Job/Detail view.\nDatabase: and see data in MySQL database. You should see data in your JobSkills table. It should be a pairing of Job and Skill Ids.\nHow to Submit To turn in your assignment and get credit, follow the submission instructions .\nCongrats! You have successfully completed Graded Assignment 4 in C#!",
    "description": "Using a many-to-many relationship, we can apply jobs to multiple skills, and a skill to multiple jobs. We want to create a table that will track the relationships between both Jobs and Skills. To do this, we need to tell the Modelbuilder which properties to use.\nUpdate the JobDbContext In the OnModelCreating method, we want to create a table called “JobSkills”. This table will use an Entity of type Job. It has many Skills with many Jobs.",
    "tags": [],
    "title": "Task 3: Creating a Many-To-Many Relationship",
    "uri": "/assignments/techjobs-persist/task-3/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 0: Hello, World!",
    "content": "According to the tests we just ran, we expected the string Hello, World! to be printed. Edit the code in the SayHelloClass class, within the SayHello() method to reflect this. Verify your code with the auto-grading tests.\nWarning The auto-grading tests are VERY exacting. A difference of a single character will result in a failed test. The tests are also case-sensitive. You’ll need to pay attention to detail to correctly complete your assignments.\nRecommended Resources for Debugging Code Microsoft tools oftentimes have a built-in Debugger feature to help you troubleshoot your code. We will explore it more in later chapters. However, if you want to read through the guides and try things out early, you may find that this is a wonderful tool and skill-set to develop.\nHow to debug for absolute beginners Windows Users: Tutorial: Learn to debug C# code using Visual Studio Mac Uses: Debugging with C# Dev Kit You are now ready to move on to Task 4: Submitting Your Code .",
    "description": "According to the tests we just ran, we expected the string Hello, World! to be printed. Edit the code in the SayHelloClass class, within the SayHello() method to reflect this. Verify your code with the auto-grading tests.\nWarning The auto-grading tests are VERY exacting. A difference of a single character will result in a failed test. The tests are also case-sensitive. You’ll need to pay attention to detail to correctly complete your assignments.",
    "tags": [],
    "title": "Task 3: Start Coding",
    "uri": "/assignments/hello-world/start-coding/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 1: Tech Jobs Console",
    "content": "Complete the FindByValue() Method At this stage, the application will allow users to search a given column of the data for a given string. Your next task is to enable a search that looks for the search term in all of the columns.\nIn the JobData class, find the method FindByValue(). This method has been outlined for you but contains none of the code needed to work (leave the LoadData() call as the first line of the method). Here are a few observations:\nThe code that you write should not return duplicate jobs. For example, if a listing has position type “Web - Front End” and name “Front end web dev” then searching for “web” should not include the listing twice. As with PrintJobs(), write your code in a way that if a new column is added to the data, your code will automatically search the new column as well. Do NOT write code that calls FindByColumnAndValue() once for each column. Rather, utilize loops and collection methods. Reading and understanding FindByColumnAndValue(), will help as your code will look similar in some ways. You’ll need to call FindByValue() from somewhere in RunProgram(). We’ll leave it up to you to find where. You might have noticed that when you try to search all columns using the app, a message is printed, so that is a good clue to help you find where to place this new method call. Once you find where to call your new method, you can Run the program again to test your code.",
    "description": "Complete the FindByValue() Method At this stage, the application will allow users to search a given column of the data for a given string. Your next task is to enable a search that looks for the search term in all of the columns.\nIn the JobData class, find the method FindByValue(). This method has been outlined for you but contains none of the code needed to work (leave the LoadData() call as the first line of the method).",
    "tags": [],
    "title": "Task Two",
    "uri": "/assignments/techjobs-console/task-two/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 19: Authentication \u003e Reading",
    "content": "As a developer, you may find yourself wanting to add Identity in one of the two following situations:\nYou are creating a new project and you know that you need Identity in the project. You are working with an existing project and need to add Identity to continue your work. For this chapter, we are going to focus on the second situation and how we might add Identity to CodingEvents. The process of adding Identity to an existing code base is called scaffolding.\nNote Try and code along as you read more about Identity!\nThis page starts off with the code in the orm2 branch of the CodingEvents repository. The final code for this page is in the authentication branch of the CodingEvents repository.\nBefore You Start Before getting started, you need to make note of the version of .NET Core SDK your project is using. Inside the project directory, run the following command:\ndotnet --infoWhen you run this command, the output may look something like the following:\n.NET SDK (reflecting any global.json): Version: 6.0.403 Commit: 2bc18bf292 Runtime Environment: OS Name: Mac OS X OS Version: 12.4 OS Platform: Darwin RID: osx.12-x64 Base Path: /usr/local/share/dotnet/sdk/6.0.403/ global.json file: Not found Host: Version: 6.0.11 Architecture: x64 Commit: 943474ca16If the .NET Core SDK listed on line 2 does not match the SDK specified in your csproj file, you may need to open up your global.json and edit it so that the SDK used by the project matches.\nNote If you do not have a global.json file, but the .NET Core SDK is still not matching your csproj file, you can create a new global.json file with the following command:\ndotnet new globaljson --sdk-version 6.0.403 You need to install six NuGet packages before getting started with this process:\nMicrosoft.EntityFrameworkCore.Design Microsoft.AspNetCore.Identity.UI Microsoft.AspNetCore.Identity.EntityFrameworkCore Microsoft.EntityFrameworkCore.SqlServer Microsoft.VisualStudio.Web.CodeGeneration.Design Microsoft.EntityFrameworkCore.Tools You can install these packages using the NuGet package manager or the .NET Core CLI :\nBelow you will find examples of how to install them using the .NET Core CLI\nNote Make sure to execute the following commands within your project directory inside of the solution.\nWhen installing these packages, make sure that the versions are the same as the .NET Core version your project is using. You can confirm this is the case by reviewing the code in your csproj file. The below examples are all using dotnet 6\ndotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design --version 6.0dotnet add package Microsoft.EntityFrameworkCore.Design --version 6.0dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 6.0dotnet add package Microsoft.AspNetCore.Identity.UI --version 6.0dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 6.0dotnet add package Microsoft.EntityFrameworkCore.Tools --version 6.0With these packages installed, you are ready to go!\nScaffolding Identity in an Exisiting Project In both Visual Studio for Mac and Visual Studio for Windows, you have the option to add new scaffolded items through the UI and through the terminal.\nAdding Identity Through the UI Right click on the project folder at the top of the solution. Select Add \u003e New Scaffolded Item. From the menu, select Identity. Note This approach is the simpler of the two approaches. However, for some Mac users, you may not find Identity as an option when you use this approach. If that is the case, use the cli method.\nAdding Identity through the Command Line All of these commmands should be run in the project directory inside of the solution.\nUse the following command to make sure you have the necessary code generator tools installed. dotnet tool install --global dotnet-aspnet-codegenerator --version \u003cYOUR .NET VERSION\u003eIf the tool is installed, check the version before proceeding to make sure it works with your .NET version.\nNow you are ready to add Identity to your project! You can configure Identity in any number of ways to fit the project requirements. To see all of the options use this command: dotnet aspnet-codegenerator identity -hWhen you use this command, you will see a menu of options in your terminal and can configure from there.\nUsage: aspnet-codegenerator [arguments] [options] Arguments: generator Name of the generator. Check available generators below. Options: -p|--project Path to .csproj file in the project. -n|--nuget-package-dir -c|--configuration Configuration for the project (Possible values: Debug/ Release) -tfm|--target-framework Target Framework to use. (Short folder name of the tfm. eg. net46) -b|--build-base-path --no-build Selected Code Generator: identity Generator Options: --dbContext|-dc : Name of the DbContext to use, or generate (if it does not exist). --files|-fi : List of semicolon separated files to scaffold. Use the --listFiles option to see the available options. --listFiles|-lf : Lists the files that can be scaffolded by using the '--files' option. --userClass|-u : Name of the User class to generate. --useSqLite|-sqlite : Flag to specify if DbContext should use SQLite instead of SQL Server. --force|-f : Use this option to overwrite existing files. --useDefaultUI|-udui : Use this option to setup identity and to use Default UI. --layout|-l : Specify a custom layout file to use. --generateLayout|-gl : Use this option to generate a new _Layout.cshtml --bootstrapVersion|-b : Specify the bootstrap version. Valid values: '3', '4'. Default is 4. Configuration of Identity is dependent on you and your project requirements. In the case of CodingEvents, you would want to continue to use EventDbContext. This is how your final generation command would look:\ndotnet aspnet-codegenerator identity --dbContext EventDbContext --files \"Account.Register;Account.Login;Account.Logout;Account.RegisterConfirmation\" Note In the above command, we used the option for files. Identity is a Razor Class Library so it comes with Razor pages preconfigured for registration, login, etc. This option means that we want the scaffolder to generate these files and add them to the solution, making it easier for us to customize these files in the future. The option for defaultUI means that we have no need to have these files in the solution and so we won’t have the ability to customize them.\nOnce we run this series of commands, we will have successfully scaffolded Identity code onto our existing project. Note If you do not see any new scaffolding, try using the command dotnet restore. This will restore our NuGet packages manually as opposed to them automatically restoring.\nDbContext If you tried to run the application right now, you would encounter some build errors. While we specified in our scaffolding commands that we wanted to use EventDbContext, we need to open up EventDbContext and make some changes.\nIn order to use Identity, we need to change what EventDbContext extends. Currently, it extends DbContext. Let’s change that to IdentityDbContext like so:\npublic class EventDbContext : IdentityDbContext\u003cIdentityUser, IdentityRole, string\u003eWe also need to add an additional line to OnModelCreating():\nbase.OnModelCreating(modelBuilder);With these changes made, EventDbContext will look like the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 using CodingEvents.Models; using Microsoft.EntityFrameworkCore; using Microsoft.AspNetCore.Identity; using Microsoft.AspNetCore.Identity.EntityFrameworkCore; namespace CodingEvents.Data { public class EventDbContext : IdentityDbContext\u003cIdentityUser, IdentityRole, string\u003e { public DbSet\u003cEvent\u003e Events { get; set; } public DbSet\u003cEventCategory\u003e Categories { get; set; } public DbSet\u003cTag\u003e Tags { get; set; } public EventDbContext(DbContextOptions\u003cEventDbContext\u003e options) : base(options) { } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity\u003cEvent\u003e() .HasOne(p =\u003e p.Category) .WithMany(b =\u003e b.events); modelBuilder.Entity\u003cEvent\u003e() .HasMany(p =\u003e p.Tags) .WithMany(p =\u003e p.Events) .UsingEntity(j =\u003e j.ToTable(\"EventTags\")); base.OnModelCreating(modelBuilder); } } } You may note that we didn’t add any DbSet for IdentityUser like we did for other models in the application. This is not an oversight! With EventDbContext properly set up, we can run a migration and the database will add the appropriate tables for our authentication data.\nAdd the following line to your Program.cs file:\nbuilder.Services.AddRazorPages(); Note While you are editing your Program.cs file, you may need to also add a default identity user. We will learn more about how to configure this user in a later section. For now, you can add code to Program.cs to address this:\n1 2 3 4 5 6 7 8 9 10 builder.Services.AddDefaultIdentity\u003cIdentityUser\u003e (options =\u003e { options.SignIn.RequireConfirmedAccount = true; options.Password.RequireDigit = false; options.Password.RequiredLength = 10; options.Password.RequireNonAlphanumeric = false; options.Password.RequireUppercase = true; options.Password.RequireLowercase = false; }).AddEntityFrameworkStores\u003cEventDbContext\u003e(); You will also need to add a couple lines of code below app.UseAuthorization();\napp.MapRazorPages(); app.MapControllers();app.MapRazorPages(); specifies to the app that the Identity pages should follow the routing laid out in _LoginPartial.cshtml.\nThese initial steps were to make sure that the application is still using EventDbContext for its connection to the database now that we have added Identity. However, if you take a look inside the Areas/Identity/Data directory, you will find a file also called EventDbContext. Delete that generated file and continue to use the one we initially created for CodingEvents.\nYou will also need to remove the following line from your Program.cs file:\nusing CodingEvents.Areas.Identity.Data;The CodingEvents application already has a connection string in addition to using our builder to add database context configured. Since we also configured our own default identity user earlier in the walkthrough we can also safely remove that as well. You will need to remove the following lines of code from your Program.cs file that were generated when adding our identity scaffolding:\nvar connectionString = builder.Configuration.GetConnectionString(\"EventDbContextConnection\");builder.Services.AddDbContext\u003cEventDbContext\u003e(options =\u003e options.UseSqlServer(connectionString));builder.Services.AddDefaultIdentity\u003cIdentityUser\u003e (options =\u003e optionsSignInRequireConfirmedAccount = true).AddEntityFrameworkStores\u003cEventDbContext\u003e(); Note If you do not delete the above file you will most likely receive warnings about having two Database Context classes.\nNote If you do not immediately see Identity scaffolding, that is okay! Sometimes it takes a moment to appear.\nViews In your solution, you will find a new view inside the Views/Shared directory called _LoginPartial.cshtml. This partial view contains the logic for the links to actions that the users need, such as registration forms, login forms, sign out actions, and so on. If you peek inside the file, you will find these links live inside a conditional.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 @using Microsoft.AspNetCore.Identity @using CodingEventsDemo.Data @inject SignInManager\u003cIdentityUser\u003e SignInManager @inject UserManager\u003cIdentityUser\u003e UserManager \u003cul class=\"navbar-nav\"\u003e @if (SignInManager.IsSignedIn(IdentityUser)) { \u003cli class=\"nav-item\"\u003e \u003ca id=\"manage\" class=\"nav-link text-dark\" asp-area=\"Identity\" asp-page=\"/Account/Manage/Index\" title=\"Manage\"\u003eHello @UserManager.GetUserName(IdentityUser)!\u003c/a\u003e \u003c/li\u003e \u003cli class=\"nav-item\"\u003e \u003cform id=\"logoutForm\" class=\"form-inline\" asp-area=\"Identity\" asp-page=\"/Account/Logout\" asp-route-returnUrl=\"@Url.Action(\"Index\", \"Home\", new { area = \"\" })\"\u003e \u003cbutton id=\"logout\" type=\"submit\" class=\"nav-link btn btn-link text-dark\"\u003eLogout\u003c/button\u003e \u003c/form\u003e \u003c/li\u003e } else { \u003cli class=\"nav-item\"\u003e \u003ca class=\"nav-link text-dark\" id=\"register\" asp-area=\"Identity\" asp-page=\"Account/Register\"\u003eRegister\u003c/a\u003e \u003c/li\u003e \u003cli class=\"nav-item\"\u003e \u003ca class=\"nav-link text-dark\" id=\"login\" asp-area=\"Identity\" asp-page=\"/Account/Login\"\u003eLogin\u003c/a\u003e \u003c/li\u003e } \u003c/ul\u003e UserManager deals with the user information in the database. We can use the properties and methods to perform operations on user objects such as adding a new user or fetching user information. On line 11 in the code above, UserManager is used to fetch the signed-in user’s username so we greet them by name! SignInManager deals with users signing in. On line 8, SignInManager is used to check if the user is signed in. If the user is signed in, then the links that will be displayed are to manage the account or log out of the account. If the user is not signed in, then the links are to either log in or register for an account on the site.\nThis partial view can be placed anywhere you need it, but we recommend starting with placing it in _Layout.cshtml so that a signed-in user can easily access the necessary links from any page. To add it to the navbar, use the following syntax:\n\u003cpartial name=\"_LoginPartial\" /\u003eAdd the above line of code to the following code block:",
    "description": "As a developer, you may find yourself wanting to add Identity in one of the two following situations:\nYou are creating a new project and you know that you need Identity in the project. You are working with an existing project and need to add Identity to continue your work. For this chapter, we are going to focus on the second situation and how we might add Identity to CodingEvents. The process of adding Identity to an existing code base is called scaffolding.",
    "tags": [],
    "title": "Getting Started with Identity",
    "uri": "/authentication/reading/getting-starting-identity/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 1: Introduction and Setup \u003e Setup for C#",
    "content": "Before you start the installation guide, read through each step below. You will find the recommended features and functionality to install listed in each step.\nWarning Allow ample time for the installation process.\nInstallation Steps Prerequisites Before you start installing anything, you should first make sure that you can install this on your computer.\nInstall C# Dev Kit You will need to install Microsoft’s C# Dev Kit for Visual Studio Code. You can do so by going to the left sidebar in Visual Studio Code and selecting Extensions (the icon appears to be a stack of boxes with one being added to the group). Search for “C# Dev Kit” and click the Install button. Alternatively, you can check out the Marketplace Extension website to install C# Dev Kit Extension for VSC .\nYou may be required to sign in with a Microsoft account. Creating a Microsoft account is free and it can be used for other Microsoft products.\nA Tour of Your New Extension Microsoft has created a walkthrough of this Visual Studio Code. We recommend you read through this to learn the location of key components of this extension.\nTroubleshooting If you encounter any issues with this extension, check out the FAQs to get started troubleshooting.",
    "description": "Before you start the installation guide, read through each step below. You will find the recommended features and functionality to install listed in each step.\nWarning Allow ample time for the installation process.\nInstallation Steps Prerequisites Before you start installing anything, you should first make sure that you can install this on your computer.\nInstall C# Dev Kit You will need to install Microsoft’s C# Dev Kit for Visual Studio Code.",
    "tags": [],
    "title": "Mac Users: C# Dev Kit for Visual Studio Code",
    "uri": "/introduction-and-setup/reading/mac-install/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST \u003e Reading",
    "content": "Here’s a takeaway of the abstract ideas we covered on the last page:\nState: data that can change (transition) through interactions between an API and its client\nRepresentation: the convertible format that enables state to be transferred and used by the client and API\nResource: the representation of a type of state (as an entity or collection) that the API exposes to its client for interaction\nNow that you have an understanding of these concepts, let’s turn our attention to the practical details of working with REST APIs. The following sections reference the CodingEvents MVC project we’ve been creating over the last several lessons to illustrate the capabilities of an alternative CodingEvents API project.\nShapes Shape describes the input or output of an API in terms of its fields and data types. There are no rules for how shapes should be defined. However, the goal should be to describe shapes in a way that is easy to understand. For this reason, shapes are typically shown in a way that is similar to the representation format. Because we use JSON as the representation format, the JSON data types are used.\nYou can think of shape like a class definition in an object-oriented codebase:\nExample 1 2 3 4 5 6 public class CodingEvent { public int Id { get; set; } public string Title { get; set; } public string Description { get; set; } public DateTime Date { get; set; } } Notice, the class called CodingEvent is equivalent to the Event class in our MVC application.\nThe output resource shape of a CodingEvent entity:\n1 2 3 4 5 6 CodingEvent { Id: integer Title: string Description: string Date: string (ISO 8601 date format) } The JSON representation of the resource that the API sends out is then based on the shape. This is like how an object is based on the blueprint of its class.\nHere’s a CodingEvent JSON Representation:\nExample 1 2 3 4 5 6 { \"Id\": 1, \"Title\": \"Halloween Hackathon!\", \"Description\": \"A gathering of nerdy ghouls to work on GitHub Hacktoberfest contributions\", \"Date\": \"2020-10-31\" } We can think of inputs as a partial state provided by the client during create and update operations. Only some of the fields are included because the API is responsible for providing the others.\nConsider the following example of an input shape used to create an event. Notice that the Id field is not included:\nExample 1 2 3 4 5 CodingEvent { Title: string Description: string Date: string (ISO 8601 date format) } Some of the common fields the API is responsible for managing:\nthe unique identifier (Id) the “created on” or “last updated” timestamp links for relationships between resources Endpoints An API endpoint refers to the HTTP path and method that defines the location of a resource and the action to take on its state.\nEndpoints are what an API exposes to its consumers. Each endpoint is made up of two components:\npath: the noun that identifies the resource method: the verb, or action, to take on the resource’s state Identifying the Resource Paths are used to identify the resource being interacted with. Recall the hierarchal nature of resources where an entity only exists within a collection. RESTful APIs separate the resources they expose into one or more resource entry-points.\nLet’s consider two resources exposed by a RESTful API:\nExample The CodingEvents API would have the following familiar resources (among others):\nResource Path Coding Event /events Tag /tags The name of the path is arbitrary but should follow these rules of thumb to maintain consistency:\nis lowercase and separated by underscores if necessary adequately describes the resource in as few characters as necessary is a plural noun (actions are described by the method of the endpoint) Let’s see this in action with a CodingEvents API. Using what we have learned so far, we can expect the state of the resource collection to be represented in a JSON array:\nExample Here is a response from a request to the GET /events endpoint:\n1 2 3 4 [ CodingEvent { ... }, ... ] The state of the CodingEvent collection is made up of the collective state of each CodingEvent entity within it.\nExample Here is a response from a request to the GET /tags endpoint:\n1 2 3 4 [ Tag { ... }, ... ] A request to the endpoint of the Tag collection would include its respective Tag entity representations (JSON objects).\nSuppose we wanted to interact with an individual resource entity. We would need to identify it within its collection.\nThe path to identify a resource entity would need to include:\nthe collection identifier, or resource entry-point (/collection) the unique resource entity identifier (/{entityId}) within the collection Because the unique identifier of the entity is variable, we use a path variable ({entityId}) to describe it in a generic way.\nTip The hierarchy of collections and entities is similar to directories and files. To identify an entity is like identifying a file within a directory. You need both the directory (collection) name and a sub-path that uniquely identifies the file (entity).\nExample The generic path to identify a CodingEvent resource is noted as /events/{codingEventId}.\nLet’s assume a CodingEvent entity exists with an Id of 12.\nWe could make a request to the GET /events/12 endpoint to read its current state and receive this response:\n1 2 3 4 5 6 { \"Id\": 12, \"Title\": \"Halloween Hackathon!\", \"Description\": \"A gathering of nerdy ghouls...\", \"Date\": \"2020-10-31\" } CRUD Operations \u0026 HTTP Methods As we saw in the previous article, state is something that can be interacted with using CRUD operations. By convention, each of these operations corresponds to an HTTP method:\nHTTP Method CRUD Operation POST Create GET Read PUT/PATCH Update DELETE Delete The use case of an API dictates the design of its contract. This includes which actions the client can take on each resource. In other words, not every action must be exposed for each resource the API manages.\nNote If a client tries to take an action on a resource that is not supported by the API, they will receive a 405 status code or Method not allowed error response.\nEndpoint Behavior Depending on the endpoint, the effect of a request can differ. In other words, the behavior of an endpoint is dependent on the subject – an entity or the collection as a whole.\nOperating On Collections HTTP Method Behavior with resource state POST create a new entity in the collection GET view the current list of all entities in the collection PUT/PATCH bulk update of entities in the collection DELETE remove all entities in the collection Note Exposing the ability to modify or delete all of the entities in a collection at once can be risky. In many cases, the design of a RESTful API will only support GET and POST endpoints for collections.\nLet’s consider a request for creating a resource entity. Recall that this operation acts on the state of the collection by adding a new entity to it.\nExample As we saw earlier, the input shape for creating an event only includes the fields the consumer is responsible for. The Id field is then managed internally by the API.\nWe refer to this shape as a NewCodingEvent to distinguish it from the CodingEvent resource shape:\n1 2 3 4 5 NewCodingEvent { Title: string Description: string Date: string (ISO 8601 date format) } We can describe this request in a shorthand:\nPOST /events (NewCodingEvent) -\u003e 201, CodingEvent\nThis shorthand includes:\nThe endpoint method: POST The endpoint path: /events The name of the request body: (NewCodingEvent) The returned status code: 201 The returned response body: CodingEvent After sending this request, the response includes:\na 201, or Created, status code a Location response header the representation of the created resource entity state (including an assigned Id field) Operating On Entities HTTP Method Behavior with resource state POST N/A (created inside a collection) GET view the current entity state PUT/PATCH update the entity state DELETE remove the entity from the collection When removing a resource, the client is requesting a transition to an empty state. This means that both the request body and response body that are transferred (the representations of state) are empty. We can see this behavior in action with a request to the DELETE endpoint for a single resource entity in our example API:\nExample Let’s once again assume a CodingEvent resource exists with an Id of 12. If we want to remove this entity, we need to issue a request to its uniquely identified DELETE endpoint:\nDELETE /events/12 -\u003e 204\nIn this shorthand, you can see that this request has an empty request body. This is the empty state we are requesting a transition to. The 204, or No Content, status code in the response indicates that the action was successful and that the response body is empty. The API transfers back a representation of empty state (no response body) to the client.\nExample What would happen if we made another request to the endpoint of a resource entity that doesn’t exist, DELETE /events/999?\nWe would receive a404, or Not Found, status code that lets us know the request failed because of a client error (providing an Id for a nonexistent resource).\nHeaders \u0026 Status Codes A RESTful API uses HTTP response status codes and HTTP request and response headers. Response status codes inform the client if their request is handled successfully or if changes are needed to fix a request.\nHTTP headers are used to communicate additional information (metadata) about a request or response. Let’s take a look at the status codes now.\nStatus Codes Every RESTful API response includes a status code that indicates whether the client’s request has succeeded or failed.\nSuccess Status Codes When a request is successful, the 2XX status codes are used. These codes communicate to the consumer the type of success relative to the action that was taken. Below is a list of the common success codes you will encounter:\nCommon client success status codes for each action:\nHTTP Method Status Code Message Response POST 201 Created Resource entity and location header GET 200 OK Resource entity or collection DELETE 204 No Content empty response body .. list-table:: Common client success status codes for each action :header-rows: 1 :widths: 20 20 20 40\nFailure Status Codes Requests can fail. Status code groups categorize two types of failure:\nclient error: 4XX status code group server error: 5XX status code group Client errors indicate that a request can be reissued with corrections. Each of these status codes and messages notify the consumer of the changes needed for a success. In contrast, server errors cannot be remedied by the client sending the request.\nLet’s look at some of the common client error status codes:\nStatus Code Message Correction 400 Bad Request Client must fix errors in their request body 401 Unauthorized Client must authenticate first 403 Forbidden An Authenticated client in not allowed to perform the requested action 404 Not Found The path to identify the resource is incorrect or the resource does not exist A bad request will include an error message in its response. The message should indicate what the client must change in their request body to succeed. This failure is seen when creating or updating a resource entity:\nExample In the CodingEvents API, the state of a CodingEvent is validated using the following criteria:\nTitle: 10-100 characters Description: less than 1000 characters Imagine a client sending a PATCH request to update the CodingEvents resource entity with an Id of 6.\nPATCH /events/6 (PartialCodingEvent) -\u003e CodingEvent\nIf their request body contains a Title field that is too short, the request will receive a 400 status code:\nHere is a portion of an invalid request to the PATCH /events/6 endpoint:\n1 2 3 { \"Title\": \"Foo\" } Foo does not contain enough characters to be a valid CodingEvent title. The CodingEvents API response to such a request therefore includes a 400 status code. This alerts the client that they must correct their data representation. The response body indicates which aspects of the request are invalid. This is a 400 failed response body:\n{ \"error\": \"invalid fields\", \"fields\": [ { \"Title\": \"must be between 10 and 100 characters in length\" } ] }Using the information in the response, the client can fix their request body and reissue the request successfully.\nNote The 401, or Unauthorized, status code actually indicates that the consumer is not authenticated. This means the consumer has not proven their identity to the API. The 403, or Forbidden, status code is a more accurate description of being unauthorized. After authenticating, the consumer’s authorization can determine if they are allowed or forbidden from taking the requested action.\nHeaders In RESTful design, HTTP headers communicate metadata about each interaction with a resource.\nCommon request/response headers in REST:\nRequest/Response Header Meaning Example Both Content-Type The attached body has the following media type application/json Request Accept The client expects the requested resource representation in the given media type application/json Response Location The created resource representation can be found at the given URL value /resources/{id} Tip The Authorization request header is also commonly used.\nLearning More These articles have covered the fundamental aspects of the RESTful mental model and practical usage. However, RESTful design is a deep topic that even extends beyond the web and use of HTTP!\nIf you want to learn more, the following links are a good start:\nPractical Understanding Craig Dennis: APIs for beginners (YouTube) REST sub-collections, relationships and links OpenAPI specification \u0026 Swagger REST tools The GitHub API and Stripe (payment processing) API are excellent examples of RESTful design (and fantastic documentation) Deep Understanding the REST constraints The Richardson REST maturity model the original REST doctoral thesis by Roy Fielding Check Your Understanding Question A POST request performs which type of action?\nCreate\nRead\nUpdate\nDelete\nQuestion The _________ portion of a RESTful URL identifies the resource.\npath\nquery\nhost\nuser",
    "description": "Here’s a takeaway of the abstract ideas we covered on the last page:\nState: data that can change (transition) through interactions between an API and its client\nRepresentation: the convertible format that enables state to be transferred and used by the client and API\nResource: the representation of a type of state (as an entity or collection) that the API exposes to its client for interaction\nNow that you have an understanding of these concepts, let’s turn our attention to the practical details of working with REST APIs.",
    "tags": [],
    "title": "REST: Practical Fundamentals",
    "uri": "/web-api-rest/reading/rest-fundamentals/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "The following video walkthrough is all of the steps included in the one-to-many section.\nThe one-to-many video uses the following github repository orm-1 branch ",
    "description": "The following video walkthrough is all of the steps included in the one-to-many section.\nThe one-to-many video uses the following github repository orm-1 branch ",
    "tags": [],
    "title": "Walkthrough: One-to-Many",
    "uri": "/relationships-or-mapping/reading/o2m-walkthrough/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping \u003e Reading",
    "content": "With our data store and persistent class configured, we are ready to realize the full power of ORM.\nData Stores in the Controller Since our data store, EventDbContext, extends DbContext, we have access to all of the methods defined by DbContext. There are quite a few such methods (see the documentation for details), but we will only use SaveChanges.\nWe will make more extensive use of the Events property of EventDbContext, which is of type DbSet. As mentioned in the previous section, this property allows us to query for objects directly from the database. It too has quite a few methods , and we will demonstrate usage of Add, Remove, ToList, and Find.\nAdding the Data Store To access data from the database in a controller, we’ll need an instance of EventDbContext. Adding the following code to the top of EventsController will make one available as an instance variable of the controller.\n16 17 18 19 20 21 private EventDbContext context; public EventsController(EventDbContext dbContext) { context = dbContext; } We can now reference context anywhere within our controller in order to query the database.\nNote It may not be obvious how this code works, since we never explicitly call the constructor for EventsController. When we run our application, ASP.NET will call this constructor for us, and will pass in an instance of EventDbContext. This is an example of the concept of dependency injection, a topic which is fairly complex and beyond the scope of this course.\nUsing Data Store Methods Let’s refactor our controller to replace each usage of the in-memory store EventData with our instance of EventDbContext.\nIndex Action Method The first such usage is in the Index method, which displays a listing of all of the events. We are currently calling EventData.GetAll(). To carry out the equivalent action on context, we can use its Events property.\nInstead we want to send the data as a list to EventDbContext through the DbSet.\nCheck Your Code ",
    "description": "With our data store and persistent class configured, we are ready to realize the full power of ORM.\nData Stores in the Controller Since our data store, EventDbContext, extends DbContext, we have access to all of the methods defined by DbContext. There are quite a few such methods (see the documentation for details), but we will only use SaveChanges.\nWe will make more extensive use of the Events property of EventDbContext, which is of type DbSet.",
    "tags": [],
    "title": "Working with Data Stores",
    "uri": "/orm-part-1/reading/data-stores/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping",
    "content": "Next Steps This lesson covered the basics of Object-Relational Mapping, connecting CodingEvents to a database, and persistent data.\nCheck out these resources if you want a deeper learning journey on these topics.\nWhat is a Relational Database (RDBMS)? Pomelo.EntityFrameworkCore.MySql Troubleshoot and debug ASP.NET Core projects Websites using ASP.NET Core in the United States Code First to a New Database ",
    "description": "Next Steps This lesson covered the basics of Object-Relational Mapping, connecting CodingEvents to a database, and persistent data.\nCheck out these resources if you want a deeper learning journey on these topics.\nWhat is a Relational Database (RDBMS)? Pomelo.EntityFrameworkCore.MySql Troubleshoot and debug ASP.NET Core projects Websites using ASP.NET Core in the United States Code First to a New Database ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/orm-part-1/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 15: Viewmodels and Model Validation",
    "content": "Next Steps This lesson covered the basics of ViewModels, validation attributes, and side-server validation.\nCheck out these resources if you want a deeper learning journey on these topics.\nPart 3: Views and ViewModels Use ViewModels to manage data \u0026 organize code in ASP.NET MVC applications Tag Helpers in forms in ASP.NET Core Model validation in ASP.NET Core MVC and Razor Pages How validation works Strongly Typed Models and the @model Keyword Adding Validation Rules to the Movie Model ",
    "description": "Next Steps This lesson covered the basics of ViewModels, validation attributes, and side-server validation.\nCheck out these resources if you want a deeper learning journey on these topics.\nPart 3: Views and ViewModels Use ViewModels to manage data \u0026 organize code in ASP.NET MVC applications Tag Helpers in forms in ASP.NET Core Model validation in ASP.NET Core MVC and Razor Pages How validation works Strongly Typed Models and the @model Keyword Adding Validation Rules to the Movie Model ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/viewmodels/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 15: Viewmodels and Model Validation \u003e Reading",
    "content": "Validation involves both model and controller components of an MVC application. After we have defined validation rules using attributes on the model, we must also update the controller to ensure that the rules are checked and appropriate action is taken when validation fails.\nValidation Flow Before diving into the details of the code, let’s consider the logical flow of control for validating data in a request. Let’s check out our POST action method for processing the Add Event form. Remember that this method uses model binding to create new AddEventViewModel objects from form submissions.\nCheck Your Code 32 33 34 35 36 37 38 39 40 41 42 43 44 45 [HttpPost] public IActionResult Add(AddEventViewModel addEventViewModel) { Event newEvent = new Event { Name = addEventViewModel.Name, Description = addEventViewModel.Description, ContactEmail = addEventViewModel.ContactEmail }; EventData.Add(newEvent); return Redirect(\"/Events\"); } The flow of this request can be described as follows:\nServer receives POST request Server creates newEvent object using request parameters Add() is called with addEventViewModel newEvent is saved A redirect response is returned, redirecting the user to /Events The request creates an Event object using data from the incoming request. Regardless of what the data looks like, the new object is saved to the data layer. The user could submit an empty form, with no name or description filled in, and our code would be happy to create an Event and save it. Similarly, a user could submit the full text of the any novel as the description. This isn’t great.\nNote Technically, submitting a request containing a full length novel would fail with most applications. This is because web servers typically set a limit on the maximum size of a POST request. However, our application code is willing to take requests of any size, at this point.\nNow that we have added validation attributes to the ViewModel, we want to refactor our controller to and handle errors in form submission. Our modest validation rules for a new AddEventViewModel object are as follows:\nThe Name property must contain between 3 and 50 characters,\nThe Description property may contain no more than 500 characters, and\nThe ContactEmail property must satisfy email formatting rules.\nWith these rules in place, conceptually, the flow of our controller code should look more like the following:\nServer receives POST request\nServer creates addEventViewModel object using request parameters\nAdd() (POST request type) is called with addEventViewModel\nController checks for validation errors in the ViewModel object. If errors are found, return the user to the form. Otherwise, proceed.\naddEventViewModel is used to create a new Event object called newEvent, which is saved to the data store.\nA redirect response is returned, redirecting the user to /Events\nLet’s look at how we can practically do this within ASP.NET Core MVC.\nHandling Validation Errors When using model binding, we can use tools to validate new model objects before they are saved to a data layer or database.\nUsing ModelState.IsValid Within EventsController, the Add() action method uses model binding to receive an AddEventViewModel object when the form is posted. That ViewModel instance is created using form data. This object is NOT validated automatically, even if validation attributes are present on its fields.\nRecall that both the model and controller play a role in validation. The model’s responsibility is simply to define validation rules. The controller must check that those rules are satisfied.\nModelState.IsValid will check if the constraints on the model properties are met. If these constraints are met, ModelState.IsValid equates to true and we want to create and add an Event object to our list of events. If these constraints are not met and the ViewModel object is not valid, we want to redirect the user back to the Add Event form.\nNote One of the constraints that ModelState.IsValid checks for is nullability. If a value is null, it will not pass this check. This is why we declared the members of the Event model and AddEventViewModel ViewModel as nullable with the ?. Without ? then the controller considers this false and will not update the form.\nOnce we are done refactoring the Add() action method to use ModelState.IsValid, our action method will look like the code below.\nCheck Your Code ",
    "description": "Validation involves both model and controller components of an MVC application. After we have defined validation rules using attributes on the model, we must also update the controller to ensure that the rules are checked and appropriate action is taken when validation fails.\nValidation Flow Before diving into the details of the code, let’s consider the logical flow of control for validating data in a request. Let’s check out our POST action method for processing the Add Event form.",
    "tags": [],
    "title": "Validating Models in a Controller",
    "uri": "/viewmodels/reading/controller-validation/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 14: Models and Model Binding \u003e Reading",
    "content": "We now introduce a useful technique to auto-create model instances, called model binding. Model binding takes place when a whole model object is created by the ASP.NET framework on form submission. This saves us the effort, and the code, needed to pass in each form field to a controller.\nModel binding reduces the amount of code we need to write to create an object and helps with validation (which we’ll explore further in the next section). With a few modifications to our project, ASP.NET creates an Event object for us when the New Event form is posted.\nHow to Use Model Binding When submitting new event information, rather than passing in each field used to instantiate a model, we can instead pass in Event newEvent as a parameter of the controller method.\nFirst, we need to add a parameterless constructor to Event:\n1 2 3 4 5 public Event() { Id = nextId; nextId++; } Then, we can revise the NewEvent() method in EventsController:\n29 30 31 32 33 34 35 36 [HttpPost] [Route(\"Events/Add\")] public IActionResult NewEvent(Event newEvent) { EventData.Add(newEvent); return Redirect(\"/Events\"); } This is the essence of model binding. The model instance is created on form submission. With only two fields needed to create an event, the value of this data binding may not be particularly apparent right now. You can imagine, though, with a larger form and class, that the practice of model binding is pretty potent.\nFor binding to take place, we must use the model field names as the form field names. So back in the create form HTML, we update the form fields to match the event fields.\nViews/Events/Add.cshtml:\n4 5 6 7 8 9 10 11 12 13 \u003cdiv class=\"form-group\"\u003e \u003clabel\u003e Name \u003cinput type=\"text\" name=\"name\" class=\"form-control\"\u003e \u003c/label\u003e \u003clabel\u003e Description \u003cinput type=\"text\" name=\"description\" class=\"form-control\"\u003e \u003c/label\u003e \u003c/div\u003e If a form field name does NOT match up with a model field, then binding will fail for that piece of data. It is critically important to ensure these names match up.\nTip The basics of model binding require that model property names match form field names. If they don’t, you still have the option to bind the model with attributes. We could have left the description field in the Add Event form with name=\"desc\". Then back in the Event class, we could modify the description property as such:\n10 11 [FromForm(Name=\"desc\")]\tpublic string Description { get; set; } The changes above only scratch the surface of what can be done with model binding. We address more aspects and advantages of this technique in the coming pages If you’d like to read more on the topic now, take a look at the documentation .\nCheck Your Understanding Question Complete this sentence (Check all that apply): Model binding …\nrequires the use of attributes. helps with form validation. reduces controller code. makes your code more rigid and vulnerable to errors. Question In CodingEvents, we add an additional property, NumberOfAttendees, to the Event class. What other change must we make to ensure the user of our application can determine this value? (Assume we are using model binding to process form submission.)\nPass in a numberOfAttendees parameter to the form submission handler. Add another input element to the create event form with a name=\"numberOfAttendees\" attribute. Add a getAttendees method to EventData. All of the above. ",
    "description": "We now introduce a useful technique to auto-create model instances, called model binding. Model binding takes place when a whole model object is created by the ASP.NET framework on form submission. This saves us the effort, and the code, needed to pass in each form field to a controller.\nModel binding reduces the amount of code we need to write to create an object and helps with validation (which we’ll explore further in the next section).",
    "tags": [],
    "title": "Model Binding",
    "uri": "/aspdotnet-model-classes/reading/model-binding/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 14: Models and Model Binding",
    "content": "Next Steps The next chapter covers ViewModels. Before you continue your learning, if you need any additional resources on models and model binding, here are a few of our favorites:\nOverview of ASP.NET Core MVC Add a Model to an ASP.NET Core MVC app ",
    "description": "Next Steps The next chapter covers ViewModels. Before you continue your learning, if you need any additional resources on models and model binding, here are a few of our favorites:\nOverview of ASP.NET Core MVC Add a Model to an ASP.NET Core MVC app ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/aspdotnet-model-classes/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 14: Models and Model Binding \u003e Reading",
    "content": "This is a video walkthrough of all the steps taken during the chapter. To follow along, make sure to fork and clone CodingEvents . The video starts on the models-start branch and ends on the models branch. The video includes timestamps that correspond to each page in the reading in case you want to revisit a specific task or technique.\nNote If you completed the exercises from the chapter on Views, then your version of CodingEvents will look a lot like the models-start branch. Some of the elements from the exercises will help you out with making your version of CodingEvents the best it can be!",
    "description": "This is a video walkthrough of all the steps taken during the chapter. To follow along, make sure to fork and clone CodingEvents . The video starts on the models-start branch and ends on the models branch. The video includes timestamps that correspond to each page in the reading in case you want to revisit a specific task or technique.\nNote If you completed the exercises from the chapter on Views, then your version of CodingEvents will look a lot like the models-start branch.",
    "tags": [],
    "title": "Video Walkthrough",
    "uri": "/aspdotnet-model-classes/reading/video-walkthrough/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 12: Tools in Visual Studio",
    "content": "Before you move on to reading about views, play around with using the various debugging tools on HelloASPDotNET. The more you use these tools and try and incorporate them into your coding routine, the better you will get at understanding them.",
    "description": "Before you move on to reading about views, play around with using the various debugging tools on HelloASPDotNET. The more you use these tools and try and incorporate them into your coding routine, the better you will get at understanding them.",
    "tags": [],
    "title": "Next Steps",
    "uri": "/vstools/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views \u003e Reading",
    "content": "Let’s revisit part of the non-efficient HTML from the introduction, where we hard-coded coffee options in a list.\n1 2 3 4 5 6 \u003col\u003e \u003cli\u003eFrench Roast\u003c/li\u003e \u003cli\u003eEspresso\u003c/li\u003e \u003cli\u003eKopi Luwak\u003c/li\u003e \u003cli\u003eInstant\u003c/li\u003e \u003c/ol\u003e If we want to add, remove, or edit the list items, we need to go in and change the individual tags, which is a poor use of our time. Fortunately, there is a way to streamline the process.\nIn C#, we use a foreach Loop to iterate through the items in a data collection.\n1 2 3 4 foreach (type item in items) { //...code here... } Razor templates allow us to use a foreach loop to display items in a collection.\n1 2 3 4 5 6 \u003col\u003e @foreach (type collectionItem in ViewBag.collectionProperty) { \u003cli\u003e@collectionItem\u003c/li\u003e } \u003c/ol\u003e Let’s explore line 2 to better understand how we are using the foreach loop in the Razor View.\nThe @ specifies the C# portion of the template. The @foreach loop is initiated inside of a list element (either \u003col\u003e or \u003cul\u003e). collectionItem represents an individual item or element within the collection. ViewBag.collectionProperty represents any collection that has been assigned as a property on ViewBag. We can think of this syntax as saying, “For each item within the ViewBag property, collectionProperty, repeat this HTML tag, but use the current value of collectionItem.”\nLet’s apply this new concept to the HTML coffee list example. Assume that we store each of the coffee names as strings in a List called ViewBag.coffeeOptions.\n1 2 3 4 5 6 \u003col\u003e @foreach (string coffeeType in ViewBag.coffeeOptions) { \u003cli\u003e@coffeeType\u003c/li\u003e } \u003c/ol\u003e Some points to note:\ncoffeeOptions is accessible to the template because it is a property of the ViewBag object.\nIn the first pass through the loop, coffeeType takes the value of the first coffee name in the coffeeOptions list.\n@coffeeType displays the value of coffeeType in the view, so the li element will show the first coffee name.\nEach successive iteration, coffeeType takes the next value in the list, and Razor adds a new \u003cli\u003e\u003c/li\u003e element to display that data.\nWarning @foreach creates one HTML tag for each item in a collection. BE CAREFUL where you place it.\nConsider the following Razor code:\n1 2 3 4 5 6 7 8 9 \u003cdiv\u003e \u003ch3\u003eCoffee Types\u003c/h3\u003e @foreach (string coffeeType in ViewBag.coffeeTypes) { \u003col\u003e \u003cli\u003e@coffeeType\u003c/li\u003e \u003c/ol\u003e } \u003c/div\u003e The final HTML produced is one heading, 4 ordered lists, and 4 coffee names. When this view is rendered, each coffee type is labelled with “1”.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u003cdiv\u003e \u003ch3\u003eCoffee Types\u003c/h3\u003e \u003col\u003e \u003cli\u003eFrench Roast\u003c/li\u003e \u003c/ol\u003e \u003col\u003e \u003cli\u003eEspresso\u003c/li\u003e \u003c/ol\u003e \u003col\u003e \u003cli\u003eKopi Luwak\u003c/li\u003e \u003c/ol\u003e \u003col\u003e \u003cli\u003eInstant\u003c/li\u003e \u003c/ol\u003e \u003c/div\u003e Nested Loops Assume you have a collection of different CoffeeShop objects. Each object contains a string field for name and a field that is a list of of the brews available, coffeeOptions.\nBelow, we nest loops to display a list of the shop names and their brew options.\nSample Razor template:",
    "description": "Let’s revisit part of the non-efficient HTML from the introduction, where we hard-coded coffee options in a list.\n1 2 3 4 5 6 \u003col\u003e \u003cli\u003eFrench Roast\u003c/li\u003e \u003cli\u003eEspresso\u003c/li\u003e \u003cli\u003eKopi Luwak\u003c/li\u003e \u003cli\u003eInstant\u003c/li\u003e \u003c/ol\u003e If we want to add, remove, or edit the list items, we need to go in and change the individual tags, which is a poor use of our time. Fortunately, there is a way to streamline the process.",
    "tags": [],
    "title": "Iterating in a Template",
    "uri": "/razor-views/reading/iterating-templates/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views",
    "content": "Next Steps Views in ASP.NET Core MVC Views, Partial Views, and Layouts in ASP.NET Core MVC Ideas for expanding HelloASPDotNET\ncreate a new form create a new view incorporate previous exercises into HelloASPDotNET Git Resources\nFork a repo Git Checkout Remote Branch tutorial git branch Git Branches: List, Create, Switch to, Merge, Push, and Delete ",
    "description": "Next Steps Views in ASP.NET Core MVC Views, Partial Views, and Layouts in ASP.NET Core MVC Ideas for expanding HelloASPDotNET\ncreate a new form create a new view incorporate previous exercises into HelloASPDotNET Git Resources\nFork a repo Git Checkout Remote Branch tutorial git branch Git Branches: List, Create, Switch to, Merge, Push, and Delete ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/razor-views/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 11: Exceptions",
    "content": "You will find the starter code for the exercises in the csharp-web-dev-exercises repo in the Exceptions project.\nDivide By Zero! The professor you TA for, Professor Jackson, shared with you the code she uses to auto-grade students’ work. She and the other TAs have encountered some problems with the code in the past when they enter the total possible point value for an assignment. Occasionally, they accidentally enter 0 for the total number of possible points and the program encounters a fatal error when trying to divide by 0.\nTo help out with this issue, complete a function called Divide() in Program.cs.\nThe Divide() method takes in two parameters: x and y. Your function should return the result of x/y. However, if y is zero, you should throw an exception, such as ArgumentOutOfRangeException. Check your solution static double Divide(double x, double y) { if (y == 0.0) { throw new ArgumentOutOfRangeException(\"y\", \"You cannot divide by zero!\"); } else { return x / y; } } Checking Student Submissions After mentioning to Professor Jackson that you would like to get some more practice with exceptions, she offered to let you write some grading software! Before she gives you full control over auto-grading students’ work, she asked if you could write a function called CheckFileExtension().\nThe CheckFileExtension() function should do the following:\nTake in one parameter: fileName.\nReturn an integer representing the number of points a student receives for properly submitting a file in C#.\nIf a student’s submitted file ends in .cs, they get 1 point.\nIf a student’s submitted file doesn’t end in .cs, they get 0 points.\nIf the file submitted is null or an empty string, an exception should be thrown. What kind of exception is up to you!\nCheck your solution This example uses the ArgumentNullException to check for student submissions.\nstatic int CheckFileExtension(string fileName) { if (fileName == null || fileName == \"\") { throw new ArgumentNullException(\"fileName\",\"Student did not submit any work!\"); } else { if (fileName.Substring(fileName.Length - 3, 3) == \".cs\") { return 1; } else { return 0; } } } In Program.cs, Professor Jackson has provided a dictionary of students and the names of their submitted files for you to test out your work. If an exception is caught, make sure to print out the error message.",
    "description": "You will find the starter code for the exercises in the csharp-web-dev-exercises repo in the Exceptions project.\nDivide By Zero! The professor you TA for, Professor Jackson, shared with you the code she uses to auto-grade students’ work. She and the other TAs have encountered some problems with the code in the past when they enter the total possible point value for an assignment. Occasionally, they accidentally enter 0 for the total number of possible points and the program encounters a fatal error when trying to divide by 0.",
    "tags": [],
    "title": "Exercises: Exceptions",
    "uri": "/exceptions/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 11: Exceptions",
    "content": "Next Steps Now that you have created a few exceptions, here are some resources to explore.\nReplace Error Code with Exception Exception messages are for programmers Exceptions and Exception Handling ",
    "description": "Next Steps Now that you have created a few exceptions, here are some resources to explore.\nReplace Error Code with Exception Exception messages are for programmers Exceptions and Exception Handling ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/exceptions/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 9: Introduction to ASP.NET",
    "content": "Next Steps This chapter is only the introduction to MVC design and frameworks like ASP.NET. The resources below can provide you with more depth on these topics.\nGet started with ASP.NET Core MVC MVC Framework Introduction Understanding Models, Views, and Controllers (C#) .NET Core vs .NET Framework ASP.NET Core Overview ",
    "description": "Next Steps This chapter is only the introduction to MVC design and frameworks like ASP.NET. The resources below can provide you with more depth on these topics.\nGet started with ASP.NET Core MVC MVC Framework Introduction Understanding Models, Views, and Controllers (C#) .NET Core vs .NET Framework ASP.NET Core Overview ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/asp-net-intro/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 10: Controllers and Routing \u003e Reading",
    "content": "So far, we have been adding attributes to our methods as we go along for each specific use case. However, now our controller is rather unorganized and full of commented out attributes. We can use a couple tips and tricks from attribute routing to clean this controller up.\nOnce you have written several action methods within a class, you may notice some similar behavior. You may also want to expand upon the behavior that different action methods can make use of. So far, we have been adding multiple different [Route(\"path\")] attributes to each method to get every method to respond to a path that starts with localhost:5001/helloworld. We also want to use the Welcome() method to respond to GET requests and POST requests, not just one or the other. Time to DRY our code!\nClass-Level Attributes In addition to adding attributes above action methods, we can also add attributes for routing above the class. When we do so, we are designating class-wide behavior. In HelloController, we want every action method to respond to requests at paths that start with localhost:5001/helloworld. We can use [Route(\"path\")] once above the class to designate that every path for each action method needs to start with /helloworld.\n1 2 3 4 5 [Route(\"/helloworld\")] public class HelloController : Controller { // action methods here } Now that we have added that [Route(\"/helloworld\")] above the class, we can start to modify the attributes we placed above the Index() method.\n1 2 3 4 5 6 7 8 9 10 [HttpGet] public IActionResult Index() { string html = \"\u003cform method='post' action='/helloworld/welcome'\u003e\" + \"\u003cinput type='text' name='name' /\u003e\" + \"\u003cinput type='submit' value='Greet Me!' /\u003e\" + \"\u003c/form\u003e\"; return Content(html, \"text/html\"); } Since we want to map Index() to the path localhost:5001/helloworld, we removed the [Route(\"/helloworld\")] attribute above the method. If we hadn’t, we would have inadvertently mapped the Index() method to the path, localhost:5001/helloworld/helloworld. We want to leave the [HttpGet] attribute above the Index() method so we can still specify that Index() responds to GET requests.\nNow that just leaves us the Welcome() method!\nOne Method, Two Request Types When we modified the Welcome() method to respond to a POST request, we commented out the attributes that we added when we were working with route parameters. With attributes, we can DRY our code and create one method that can respond to two different request types at two different routes. Before we begin, we should note that we can add route info directly to [HttpGet] and [HttpPost].\n1 2 3 4 5 [HttpPost(\"welcome\")] public IActionResult Welcome(string name = \"World\") { return Content(\"\u003ch1\u003eWelcome to my app, \" + name + \"!\u003c/h1\u003e\", \"text/html\"); } On line 1, we modified the [HttpPost] attribute to include the end of our path. Now Welcome() still responds to POST requests at localhost:5001/helloworld/welcome. However, this is just the beginning of us DRYing our code.\nWe also want Welcome() to respond to GET requests. We can modify an [HttpGet] attribute to do so.\n1 2 3 4 5 6 [HttpGet(\"welcome/{name?}\")] [HttpPost(\"welcome\")] public IActionResult Welcome(string name = \"World\") { return Content(\"\u003ch1\u003eWelcome to my app, \" + name + \"!\u003c/h1\u003e\", \"text/html\"); } We added a different path to the [HttpGet] attribute on line 1. Now Welcome() can respond to GET requests at localhost:5001/helloworld/welcome, localhost:5001/helloworld/welcome?name=Tillie, and localhost:5001/helloworld/welcome/Tille. Welcome() can also still respond to the POST request at localhost:5001/helloworld/welcome upon submission of the form.\nNow when we run our code, our app will still have the same functionalities, but now we have a more refined and organized code base!\nCheck Your Understanding Question True/False: Routing attributes go below the class definition, but above the method signature.",
    "description": "So far, we have been adding attributes to our methods as we go along for each specific use case. However, now our controller is rather unorganized and full of commented out attributes. We can use a couple tips and tricks from attribute routing to clean this controller up.\nOnce you have written several action methods within a class, you may notice some similar behavior. You may also want to expand upon the behavior that different action methods can make use of.",
    "tags": [],
    "title": "Cleaning Up Your Controllers",
    "uri": "/aspdotnet-controllers-and-routes/reading/controllers-attributes/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 10: Controllers and Routing",
    "content": "Before moving on to learn more about exceptions and debugging processes, you should make sure that you feel comfortable with controllers and routing. If you need some additional resources, here are just a couple of our favorites:\nMicrosoft Documentation Dot Net Tutorials ",
    "description": "Before moving on to learn more about exceptions and debugging processes, you should make sure that you feel comfortable with controllers and routing. If you need some additional resources, here are just a couple of our favorites:\nMicrosoft Documentation Dot Net Tutorials ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/aspdotnet-controllers-and-routes/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 8: Interfaces and Polymorphism \u003e Reading",
    "content": "The first situations where you’ll want to use interfaces involve applying pre-defined interfaces and classes that are part of C#. In fact, you have already encountered implementations of several these System provided interfaces.\nIComparer\u003cT\u003e Purpose: A class implements this interface to compare two objects of a given class. This is a parameterized interface, which means that when using it, you need to specify the class that it will be comparing. For example, IComparer\u003cJob\u003e would compare Job objects.\nImportant Methods and Properties: Compare(T, T)\nIComparer.Compare Documentation This interface can be used to determine, given two objects of the given type, which one is greater than the other. It is also used by collections such as List to sort its contents with the Sort method.\nUsing IComparer\u003cT\u003e is a two step process. You must first create a class that implements the interface. Then, provide a custom implementation of the Compare method:\nExample\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class JobComparer : IComparer\u003cJob\u003e { public int Compare(Job x, Job y) { // ^^ This Compare method is an implementation of IComparer.Compare // Here, we write our own logic for comparing two job objects. // For example, if we want to compare Job objects by name values, we'd write: return string.Compare(x.Name, y.Name); // ^^ Note, this Compare method is the built-in string method // if we want to compare Jobs based on multiple fields, we can do so by expanding the custom logic // in this ``IComparer.Compare`` implementation } } Compare(T, T) returns an integer which determines which of the two objects comes before (in other words, “is less than”) the other. If the returned value is less than zero, then the first parameter comes before the second. If the integer is zero, then they are considered the same. If the integer is greater than zero, then the second parameter comes before the first.\nYou can think of the result of calling Compare(x, y) as being the value of subtracting, like x - y. If x is smaller than y, this value is negative. If x is larger than y, this value is positive.\nIEnumerable\u003cT\u003e Purpose: Enable iteration over a collection of objects using foreach.\nImportant Methods and Properties: MoveNext(), Current\nIEnumerable Documentation This interface is implemented by the List\u003cT\u003e class, which we’ve been using throughout this course.\nExample\n1 2 3 4 5 6 7 8 IEnumerable\u003cstring\u003e collection = new List\u003cstring\u003e(); // add items to the collection foreach (string item in collection) { // do something with the item } Indeed, if you so desire, you may replace other instances of List with this interface as long as those interfaces don’t require specifically List methods.\nIList\u003cT\u003e Purpose: Enable access to objects in a collection by index.\nImportant Methods and Properties: Add(T), Contains(T), Remove(T), Count\nIList Documentation This interface is also implemented by the List\u003cT\u003e class, which we’ve been using throughout this course. In fact, IList\u003cT\u003e extends IEnumerable\u003cT\u003e. An interface may extend another interface, in the same way that classes may extend each other.\nExample\n1 2 3 4 5 IList\u003cstring\u003e collection = new List\u003cstring\u003e(); // Add items to the collection string firstItem = collection[0]; IDictionary\u003cTKey, TValue\u003e Purpose: Represent a collection of key/value pairs.\nImportant Methods and Properties: Add(TKey, TValue), Contains(T), Remove(T), Count, Keys, Values\nIDictionary Documentation This interface is implemented by the Dictionary\u003cTKey, TValue\u003e class, which we’ve been using throughout this course.\nExample\n1 2 3 4 5 6 IDictionary\u003cstring, string\u003e collection = new Dictionary\u003cstring, string\u003e(); // Add items to the collection // Get item with key \"hello\" string hello = collection[\"hello\"]; Check Your Understanding Question True or False: An interface can extend another interface.",
    "description": "The first situations where you’ll want to use interfaces involve applying pre-defined interfaces and classes that are part of C#. In fact, you have already encountered implementations of several these System provided interfaces.\nIComparer\u003cT\u003e Purpose: A class implements this interface to compare two objects of a given class. This is a parameterized interface, which means that when using it, you need to specify the class that it will be comparing. For example, IComparer\u003cJob\u003e would compare Job objects.",
    "tags": [],
    "title": "Interfaces in the Wild",
    "uri": "/interfaces-and-polymorphism/reading/given-interfaces/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 8: Interfaces and Polymorphism",
    "content": "Now that you have learned all about interfaces, you are ready to tackle controllers and ASP.NET Core MVC! Large web application frameworks like ASP.NET Core MVC use interfaces so it is important to make sure you have a handle on them now. If you would like some additional resources on the topic, here are some of our favorites:\nMicrosoft Documentation C# Corner Tutorials Teacher ",
    "description": "Now that you have learned all about interfaces, you are ready to tackle controllers and ASP.NET Core MVC! Large web application frameworks like ASP.NET Core MVC use interfaces so it is important to make sure you have a handle on them now. If you would like some additional resources on the topic, here are some of our favorites:\nMicrosoft Documentation C# Corner Tutorials Teacher ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/interfaces-and-polymorphism/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "abstract Classes We noted in the introduction to this section that inheritance is a way to share behaviors among classes. You’ll sometimes find yourself creating a base class as a way to share behaviors among related classes. However, in such situations it is not always desirable for instances of the base class to be created.\nFor example, suppose we began coding two classes, HouseCat and Tiger. Upon writing the code, we realized that there was some common data and behaviors. For example, they both make a noise, come from the same biological family, and get hungry. In order to reduce code repetition, we combined those in Cat.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Cat { // Cat class definition } public class HouseCat : Cat { // HouseCat class definition } public class Tiger : Cat { // Tiger class definition } In reality, though, we might not want objects of type Cat to be created, since such a cat couldn’t actually exist (a real cat would have a specific genus and species, for example). We could prevent objects of type Cat from being created, while still enabling sharing of behavior among its subclasses, by making Cat an abstract class.\nChange the signature on Cat:\n4 5 6 7 public abstract class Cat { // Cat class definition } Now, in Program.cs, if you try creating a new Cat object,\nCat salem = new Cat(8);Visual Studio has your back with a handy error message that an abstract class cannot be instantiated.\nIn order to use the behavior of an abstract class, we must extend it.\nabstract Methods We have another tool that we may use here, which is an abstract method. An abstract method is a method in an abstract class that does not have a body. In other words, it does not have any associated code, only a signature. It must also be marked abstract.\nIn our abstract Cat class, it would make sense to make an abstract Noise method since all types of cats make noise. By creating this abstract method, we force any class that extends Cat to provide its own implementation of that behavior.\npublic abstract string Noise();Now, classes such as HouseCat and Tiger, which both extend Cat, must provide their own version of Noise, with the exact same method signature, but without the abstract keyword.\nCheck Your Understanding Question True/False: A class derived from an abstract class must implement all of the abstract methods it inherits.\nQuestion When might a programmer want to make a class abstract?\nWhen a class has no real data or behavior When expressionism just won’t cut it When that class needs to be instantiated in more than one package When shared behavior is desired among a group of non-abstract classes ",
    "description": "abstract Classes We noted in the introduction to this section that inheritance is a way to share behaviors among classes. You’ll sometimes find yourself creating a base class as a way to share behaviors among related classes. However, in such situations it is not always desirable for instances of the base class to be created.\nFor example, suppose we began coding two classes, HouseCat and Tiger. Upon writing the code, we realized that there was some common data and behaviors.",
    "tags": [],
    "title": "Inheriting from Abstraction",
    "uri": "/inheritance/reading/abstract-inheritance/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 5: Classes Part 2",
    "content": "Next Steps This lesson covered the basics of static fields, static methods, the ToSting method, and the Equals method. Check out these resources if you want a deeper learning journey on these topics.\nWorking with Static Classes and Static Methods in C# Object.ToString Method Object.Equals Method Casting and type conversions (C# Programming Guide) ",
    "description": "Next Steps This lesson covered the basics of static fields, static methods, the ToSting method, and the Equals method. Check out these resources if you want a deeper learning journey on these topics.\nWorking with Static Classes and Static Methods in C# Object.ToString Method Object.Equals Method Casting and type conversions (C# Programming Guide) ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/classes-part-2/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 5: Classes Part 2 \u003e Reading: Classes Part 2",
    "content": "Instead of cutting, pasting, and refactoring old code to ensure that you create a well-structured GetHashCode() method whenever you define your own Equals() method, you can use Visual Studio’s code generation tool! Just right-click in your class file on the class name and follow these prompts.\nLet’s use a Course class to demonstrate:\npublic class Course { public string Topic { get; set; } public Teacher Instructor { get; set; } public List\u003cStudent\u003e EnrolledStudents { get; set; } } In Visual Studio, right-click on the class name and select Quick Fix for Mac users or Quick Actions and Refactorings for Windows users from the menu. You can also skip this step by placing your cursor on the line with the class name and clicking on the screwdriver icon to the left.\nSelect the Generate Equals() and GetHashCode() option from the resulting menu:\nA new menu will appear where you can make selections about which class members you want to use for the Equals() and GetHashCode() methods. In the case of equality between two Course objects, we want to establish that two Course objects are equal if the Topic members and Instructor members are equal. Once you select the necessary members, click Ok!\nOnce you click Ok, Visual Studio generates the Equals() and GetHashCode() methods, resulting in the following class.",
    "description": "Instead of cutting, pasting, and refactoring old code to ensure that you create a well-structured GetHashCode() method whenever you define your own Equals() method, you can use Visual Studio’s code generation tool! Just right-click in your class file on the class name and follow these prompts.\nLet’s use a Course class to demonstrate:\npublic class Course { public string Topic { get; set; } public Teacher Instructor { get; set; } public List\u003cStudent\u003e EnrolledStudents { get; set; } } In Visual Studio, right-click on the class name and select Quick Fix for Mac users or Quick Actions and Refactorings for Windows users from the menu.",
    "tags": [],
    "title": "Visual Studio Generation Shortcut",
    "uri": "/classes-part-2/reading/vs-generator/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 3: Control Flow \u0026 Collections \u003e Reading",
    "content": "To write a List version of the program, we will have to introduce several new C# concepts, including the class List. We will also review different kinds of for loops used in C#.\nYou will find the ListGradebook project in csharp-web-dev-examples repo . Run the program, explore the code, and enter some grades.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 List\u003cstring\u003e students = new List\u003cstring\u003e(); List\u003cdouble\u003e grades = new List\u003cdouble\u003e(); string newStudent; string input; Console.WriteLine(\"Enter your students (or ENTER to finish):\"); // Get student names do { input = Console.ReadLine(); newStudent = input; if (!Equals(newStudent, \"\")) { students.Add(newStudent); } } while(!Equals(newStudent, \"\")); // Get student grades foreach (string student in students) { Console.WriteLine(\"Grade for \" + student + \": \"); input = Console.ReadLine(); double grade = double.Parse(input); grades.Add(grade); } // Print class roster Console.WriteLine(\"\\nClass roster:\"); double sum = 0.0; for (int i = 0; i \u003c students.Count; i++) { Console.WriteLine(students[i] + \" (\" + grades[i] + \")\"); sum += grades[i]; } double avg = sum / students.Count; Console.WriteLine(\"Average grade: \" + avg); Here we declare and initialize two objects, students and grades, which appear to be of type List\u003cstring\u003e and List\u003cdouble\u003e, respectively. A list in C# is very similar to an array. Like an array, we must let the compiler know what kind of objects our list is going to contain. In the case of students, the list will contain values of type string (representing the names of the students), so we use the List\u003cstring\u003e syntax to inform the compiler that we intend to fill our list with strings. Similarly, grades will hold exclusively values of type double and is declared to be of type List\u003cdouble\u003e.\nIn lines 1 and 2, we also initialize each List by creating a new, empty List. We could declare and initialize lists in one line like so:\nList\u003cstring\u003e newList = new List\u003cstring\u003e {\"Apples\", \"Oranges\", \"Avocados\"}; Note You will sometimes see the List class written as List\u003cT\u003e, where T represents a placeholder for the type that a programmer will declare a given List to hold. This is especially true in documentation. You can think of T as representing an arbitrary type.\nClasses like List\u003cT\u003e that take another type or class as a parameter are referred to as generic classes or generic types.\nList Iteration do-while We then use a do-while loop to collect the names of each of the students in the class.\n9 10 11 12 13 14 15 16 17 do { newStudent = Console.ReadLine(); if (!Equals(newStudent, \"\")) { students.Add(newStudent); } } while(!Equals(newStudent, \"\")); Recall that a do-while loop is very similar to a while loop, but the execution condition is checked at the end of the loop block. This has the net effect that the code block will always run at least once. In this example, we prompt the user for a name, which C# processes via Console.ReadLine() when the user hits the enter key. To finish entering names, the user enters a blank line.\nNote On lines 11 and 17, we use a method to compare the value of newStudent and \"\". The Equals(a,b) compares two strings, a and b, and returns true if the strings are the same. If the strings are not the same, the method returns false.\nFor each student that is entered (that is, each non-empty line), we add the new string to the end of our List with students.Add(newStudent). The .Add() method is provided by the List Class. There are lots of other List methods to get familiar with, some of which we will discuss in more detail below.\nforeach Below the do-while loop are two different loops that demonstrate two ways you can loop through a List in C#. Here’s the first, which collects the numeric grade for each student:\n22 23 24 25 26 27 28 // Get student grades foreach (string student in students) { Console.WriteLine(\"Grade for \" + student + \": \"); string input = Console.ReadLine(); double grade = double.Parse(input); grades.add(grade); } This, you may recall, is C#’s foreach loop syntax. You may read this in your head, or even aloud, as: for each student in students. As you might expect at this point, we must declare the iterator variable student with its data type.\nfor The next loop on display prints out each student’s name and grade:\n31 32 33 34 35 36 37 38 // Print class roster Console.WriteLine(\"\\nClass roster:\"); double sum = 0.0; for (int i = 0; i \u003c students.Count; i++) { Console.WriteLine(students[i] + \" (\" + grades[i] + \")\"); sum += grades[i]; } Here, we introduce the syntax students.Count which utilizes the Count property of List. This property holds the integer representing the number of items in the List. This is similar to string’s .Length property.\nIn this for loop, we use a loop index to define the starting point, ending point, and increment for iteration. It may be helpful for you to consider this kind of construction as something like, for integer i in the range of the number of items in students.... The first statement inside the parenthesis declares and initializes a loop index variable i. The second statement is a boolean expression that is our exit condition. In other words, we will keep looping as long as this expression evaluates to true. The third statement is used to increment the value of the loop index variable at the end of iteration through the loop.\nAgain, the syntax i++ is C# shorthand for i = i + 1. C# also supports the shorthand i-- to decrement the value of i. We can also write i += 2 as shorthand for i = i + 2.\nIn the final lines of the program, we compute the average grade for all students:\n40 41 double avg = sum / students.Count; Console.WriteLine(\"Average grade: \" + avg); List Methods Let’s gather up a few of the List methods that we’ve encountered so far, along with a few new ones. While these will be the most common methods and properties that you use with this class, they by no means represent a complete record. Refer to the official documentation on the List class )for such a record, and for more details.\nTo demonstrate the use of these methods, we’ll create a new List called planets.\nList\u003cstring\u003e planets = new List\u003cstring\u003e();Ok, we’ve got an empty List. We need to use the class’s .Add() method to populate this collection with items.\nUsing .Add() to populate planets:\nplanets.Add(\"Mercury\"); planets.Add(\"Venus\"); planets.Add(\"Earth\"); planets.Add(\"Mars\"); planets.Add(\"Jupiter\"); planets.Add(\"Saturn\"); planets.Add(\"Uranus\"); planets.Add(\"Neptune\");Thus, the first item in this table:\nList Methods in C# IndexOf() Looks for an item in a List, returns the index of the first occurrence of the item if it exists, returns -1 otherwise.\nplanets.IndexOf(\"Jupiter\");Returns 4 while\nplanets.IndexOf(\"Pluto\");Returns -1.\nAdd() Adds an item to the List\nplanets.Add(\"Pluto\");adds Pluto to planets\nContains() Checks to see if the List contains a given item, returning a Boolean.\nplanets.Contains(\"Earth\"); Returns true.\nSort() Rearranges the elements of a List into ascending order.\nplanets.Sort(); Produces {\"Earth\", \"Jupiter\", \"Mars\", \"Mercury\", \"Neptune\", \"Pluto\", \"Saturn\", \"Uranus\", \"Venus\"}\nToArray() Returns an Array containing the elements of the List\nplanets.ToArray();Returns {\"Earth\", \"Jupiter\", \"Mars\", \"Mercury\", \"Neptune\", \"Pluto\", \"Saturn\", \"Uranus\", \"Venus\"}\nExample In order to use ToArray(), we could first declare a planetsArray of the same size as planets or do it in one line of code.\n1 2 3 4 5 6 // Option A string[] planetsArray = new string[planets.Count]; planetsArray = planets.ToArray(); // Option B string[] planetsArray = planets.ToArray(); In addition to these different methods we can use, the List class has a number of properties that are very helpful. You may find yourself using the Count property quite a bit. This property holds the number of values in the List. In our example, after we add all of the planets in the solar system, planets.Count has a value of 8 (unless you also added Pluto to planets, in which planets.Count returns 9).\nSpeaking of arrays, let’s see the array version of Gradebook next.\nCheck Your Understanding Question The number of entries in a List may not be modified.\nTrue False Question Create a List called charStars containing a, b, and c.\n1 2 3 4 List\u003cstring\u003e charStars = new List\u003cstring\u003e(); charStars.Add('a'); charStars.Add('b'); charStars.Add('c'); 1 2 3 4 List\u003cchar\u003e charStars = new List\u003cstring\u003e(); charStars.Add('a'); charStars.Add('b'); charStars.Add('c'); 1 List\u003cchar\u003e charStars = new List\u003cchar\u003e(\"a\", \"b\", \"c\"); 1 2 3 4 List\u003cstring\u003e charStars = new List\u003cstring\u003e(); charStars.Add(\"a\"); charStars.Add(\"b\"); charStars.Add(\"c\"); ",
    "description": "To write a List version of the program, we will have to introduce several new C# concepts, including the class List. We will also review different kinds of for loops used in C#.\nYou will find the ListGradebook project in csharp-web-dev-examples repo . Run the program, explore the code, and enter some grades.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 List\u003cstring\u003e students = new List\u003cstring\u003e(); List\u003cdouble\u003e grades = new List\u003cdouble\u003e(); string newStudent; string input; Console.",
    "tags": [],
    "title": "List",
    "uri": "/flow-collections/reading/list/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 6: Unit Testing",
    "content": "Next Steps The next lesson dives into how C# handles inheritance. If you would like additional resources on unit testing and MSTest, check out these resources:\nMicrosoft Walkthrough Unit Testing Best Practices ",
    "description": "Next Steps The next lesson dives into how C# handles inheritance. If you would like additional resources on unit testing and MSTest, check out these resources:\nMicrosoft Walkthrough Unit Testing Best Practices ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/unit-testing/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives After completing this chapter, you should be able to do the following:\nUse access modifiers to customize fields and methods. Override built-in methods such as ToString and Equals. Understand equality and sameness in C#. Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page:\nClasses for C# class object fields methods members instance this keyword shadowing Modifiers in C# access level access modifier public private default access assembly world-level Encapsulation encapsulation accessor getter setter auto-implemented property backing field Constructors default constructor Methods instance method Content Links Reading Exercises Studio: Restaurant Menu Next Steps ",
    "description": "Learning Objectives After completing this chapter, you should be able to do the following:\nUse access modifiers to customize fields and methods. Override built-in methods such as ToString and Equals. Understand equality and sameness in C#. Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page:\nClasses for C# class object fields methods members instance this keyword shadowing Modifiers in C# access level access modifier public private default access assembly world-level Encapsulation encapsulation accessor getter setter auto-implemented property backing field Constructors default constructor Methods instance method Content Links Reading Exercises Studio: Restaurant Menu Next Steps ",
    "tags": [],
    "title": "Chapter 4: Classes",
    "uri": "/classes/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "We’ll often want to initialize, or set the initial value of, some of our fields when creating a new object from a class. Constructors allow us to do so.\nIn C#, constructors have the same name as the class and are most often declared public (though they can have any other valid access modifier). They are declared without a return type. Any function that is named the same as the class and has no return type is a constructor.\nHere is an example of a constructor definition within the HelloWorld class:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class HelloWorld { private string message = \"Hello World\"; public HelloWorld(string message) { this.message = message; } public void SayHello() { Console.WriteLine(message); } } This constructor allows us to create HelloWorld objects with custom messages. The assignment this.message = message assigns the value passed into the constructor to the field message. Here’s how we might use it:\nHelloWorld goodbye = new HelloWorld(\"Goodbye World\"); goodbye.SayHello(); // prints \"Goodbye World\"It’s not required that every class have a constructor. If you don’t provide one, the C# compiler will generate an empty constructor for you, known as a default constructor. For example, when we left out a constructor in our HelloWorld class above, the compiler created the following constructor for us:\npublic HelloWorld() {}While this can be convenient, you almost always want to provide a constructor to properly initialize your objects.\nOverloading Constructors We can provide multiple constructors for a given class in order to allow for different initialization scenarios. This is known as constructor overloading. When providing multiple constructors, we must ensure that each has a different collection of arguments, as determined by the number, order, and type of the constructor arguments.\nLet’s make some changes to our Student class.\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class Student { public string Name { get; set; } public int StudentId { get; set; } public int NumberOfCredits { get; set; } public double Gpa { get; set; } public Student(string name, int studentId, int numberOfCredits, double gpa) { Name = name; StudentId = studentId; NumberOfCredits = numberOfCredits; Gpa = gpa; } public Student(string name, int studentId) { Name = name; StudentId = studentId; NumberOfCredits = 0; Gpa = 0.0; } } The first constructor allows for the creation of Student objects where the code creating the object provides initial values for each of the fields. The second allows for the creation of Student objects with only name and studentId. The first constructor would be most useful for creating a transfer student, where credits and a GPA might already be non-zero. However, for all new students, it would be safe to initialize numberOfCredits and gpa to be 0.\nA better way to write the above constructors would be this:\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class Student { public string Name { get; set; } public int StudentId { get; set; } public int NumberOfCredits { get; set; } public double Gpa { get; set; } public Student(string name, int studentId, int numberOfCredits, double gpa) { Name = name; StudentId = studentId; NumberOfCredits = numberOfCredits; Gpa = gpa; } public Student(string name, int studentId) : this(name, studentId, 0, 0.0) {} } In the example above on line 17, we use : this() to invoke another constructor within the same class. In this case, the second constructor calls the first with default values for numberOfCredits and gpa. We haven’t seen this syntax before but we’ll discuss it more in inheritance .\nThis is a good practice not only because it makes your code shorter, but also because it allows any initialization behavior that may be carried out beyond just initializing variables to be contained in a smaller number of constructors. In other words, constructors can share initialization code. Notice from this example that a constructor doesn’t need to require an initial value for each field as an argument.\nWhen defining constructors, think about:\nWhich fields must be initialized for your class to work properly? Be sure you initialize every such field. Which fields should be initialized by the user creating an object, and which should be initialized by the class itself? What are the use-cases for your class that you should provide for? Check Your Understanding Question True or false, a constructor is required for every class.\nQuestion Let’s take a look at a class called Dog.\n1 2 3 4 5 6 7 8 9 10 11 12 public class Dog { public string Name { get; set; } public string Breed { get; set; } public Dog(string name, string breed) { Name = name; Breed = breed; } } What line of code would be appropriate for us to declare an instance of the Dog class called myDog and give it the name, “Bernie”, and the breed, “beagle”?\nDog myDog = new Dog(Bernie, beagle); Dog myDog = new Dog(\"Bernie\", \"beagle\"); Dog Bernie = new Dog(\"Bernie\", \"beagle\"); ",
    "description": "We’ll often want to initialize, or set the initial value of, some of our fields when creating a new object from a class. Constructors allow us to do so.\nIn C#, constructors have the same name as the class and are most often declared public (though they can have any other valid access modifier). They are declared without a return type. Any function that is named the same as the class and has no return type is a constructor.",
    "tags": [],
    "title": "Constructors",
    "uri": "/classes/reading/constructors/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 4: Classes",
    "content": "Next Steps This was just an introduction to classes in C#. We will continue to learn more in the next chapter. If you would like an additional review on this topic before starting the next chapter, check out the following articles.\nW3Schools Microsoft Documentation tutlane ",
    "description": "Next Steps This was just an introduction to classes in C#. We will continue to learn more in the next chapter. If you would like an additional review on this topic before starting the next chapter, check out the following articles.\nW3Schools Microsoft Documentation tutlane ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/classes/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 2: Data Types",
    "content": "After learning more about data types in C#, you are ready to read up on control flow and collections. If you need some additional resources on data types before going on to the next chapter, check out the following:\nMicrosoft Reference Sheet on all Built-In C# Types W3Schools Tutorial on C# Types GeeksforGeeks Article on C# Types ",
    "description": "After learning more about data types in C#, you are ready to read up on control flow and collections. If you need some additional resources on data types before going on to the next chapter, check out the following:\nMicrosoft Reference Sheet on all Built-In C# Types W3Schools Tutorial on C# Types GeeksforGeeks Article on C# Types ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/data-types-and-variables/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 2: Data Types \u003e Reading",
    "content": "There is a lot to say about objects in C# that we’ll cover in due time. Here, we highlight some introductory concepts of how C# works as an object-oriented programming language.\nObjects In C#, objects are structures that have a state and a set of behaviors. The state of an object includes properties/data that the coder can define and modify. Behaviors are actions that run when requested, and they can be used to evaluate, manipulate, or return data.\nAs we’ve said several times now, every variable in C# refers to an object.\nThe string data type is an object. For string language = \"C#\", the data would be the characters. The String Manipulation section gives several of the behaviors available to the language object. For example, language.Length is 2, which tells us how many characters are present in the string.\nAn array is also an example of an object. It contains data, which are the values stored as the individual elements. The behaviors are methods not unlike those listed in the string manipulation table that perform actions related to the elements in the array. We haven’t provided an array methods table, but you can explore array methods in the docs .\nStatic Methods In pure object-oriented languages like C# and Java, we don’t have functions in the sense you may be used to. Functions may not be declared outside of a class. Within the context of a class, functions are referred to as methods. We’ll adopt this terminology from now on.\nWe’ll dive into learning about classes and objects in C# soon enough, but first let’s learn a little about static methods, which behave somewhat similarly to stand-alone functions. A static method is one that can be called without creating an object instance of the class to which it belongs.\nExample Define the class Cat and include the static keyword before the makeNoise method name:\n1 2 3 4 5 public class Cat { public static void MakeNoise(String[] args) { // some code } } Since makeNoise is static, we do NOT need to create a Cat object to access it.\nInstead of doing this:\nCat myCat = new Cat(); // Create a new Cat object. myCat.MakeNoise(\"purr\"); // Call the MakeNoise method.We can call the method directly:\nCat.MakeNoise(\"roar\"); Until we get further into object oriented programming, every method you write should use the static keyword. Leaving off static will prevent or complicate the process of calling the methods you defined.\nWe will explore exactly what static does in more detail in later lessons.\nHelloMethods Let’s examine two classes in C# to explore defining and using methods. Open the HelloMethods project in csharp-web-development-examples.\nThe first class is defined in the HelloMethods/Program.cs file. The second class is defined in a separate HelloMethods/Message.cs file, and it contains a GetMessage method that we want to call from within Main.\nExample HelloMethods/Program.cs:\n1 2 3 string message = Message.GetMessage(\"fr\"); Console.WriteLine(message); Console.ReadLine(); HelloMethods/Message.cs:\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 namespace HelloMethods { public class Message { public static string GetMessage(string lang) { if (lang.Equals(\"sp\")) { return \"Hola Mundo\"; } else if (lang.Equals(\"fr\")) { return \"Bonjour le monde\"; } else { return \"Hello World\"; } } } } We won’t explore every new aspect of this example, but rather will focus on the GetMessage() method.\nTake a look at the Message class. It has one method that isn’t called within the class. Code within the Message class must be called from elsewhere in order to execute. The Message class contains the GetMessage() method. It has the static keyword and a return type of string. GetMessage() takes a single string parameter, lang. Since C# is statically typed, each method must declare its return type - that is, the data type of what it will return - along with the type of each parameter. One consequence of this that may not be immediately obvious is that methods in C# may not return different types of data. For example, we would not be able to replace the last return statement of GetMessage() with something like return 42;. This would be flagged as a compiler error.\nMain() Methods After Microsoft released .NET 6, the Program.cs class looked different. Prior to this release, Program.cs contained a Main() method and code was written inside the Main() method. Now at the time of compilation, your code in Program.cs is synthesized with a Main() method. This is important to know because in a C# project, only one Main method is allowed. When the project is compiled and run, the Main method indicates what should be executed, and if there were multiple Main methods this would be ambiguous. What you write in Program.cs becomes the body of the Main() method for the project.\nExample To get a sense for this, let’s revisit the code in Program.cs for the TempConverter project.\n1 2 3 4 5 6 7 8 9 10 11 double fahrenheit; double celsius; string input; Console.WriteLine(\"Temperature in F:\"); input = Console.ReadLine(); fahrenheit = double.Parse(input); celsius = (fahrenheit - 32) * 5 / 9; Console.WriteLine(\"The Temperature in C is: \" + celsius); Console.ReadLine(); In older C# code, with the Main() method made available to the developer, the same Program.cs file would look like:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 using System; namespace TempConv { class Program { public static void Main(string[] args) { double fahrenheit; double celsius; string input; Console.WriteLine(\"Temperature in F:\"); input = Console.ReadLine(); fahrenheit = double.Parse(input); celsius = (fahrenheit - 32) * 5 / 9; Console.WriteLine(\"The Temperature in C is: \" + celsius); Console.ReadLine(); } } } Public Methods Finally, let’s note how a static method is called. The first line of the Program class is:\nMessage.GetMessage(\"fr\");To call a static method, we must use the name of the class in which it is defined, followed by ., followed by the name of the method.\nClassName.methodName(arguments);We are able to call this method from another class because it is declared to be public. If we wanted to restrict the method from being called by another class, we could instead use the private modifier. We’ll explore access modifiers in more depth in coming lessons.\nNote As you have been following along with this example, you may have noticed that the class file, Message.cs, is named exactly the same as the class it holds.\nThere is NOT a rule in C# dictating that a file must be named the same as the class it contains, but it is considered best practice.\nTry It Poke around with the HelloMethods project in Visual Studio and experiment with the following:\nFigure out how to alter the HelloMethods code to change the message returned. Add another “Hello, World” language option. Change one public keyword to private to see what happens. Repeat for each occurrence of public. Check Your Understanding Question Which of the following defines a method that takes an integer as a parameter and returns a string value?\npublic static void MethodName(string parameterName) public static void MethodName(int parameterName) public static int MethodName(string parameterName) public static string MethodName(int parameterName) Question True/False: A C# project may contain more than one Main method, as long as at least one of those methods is marked private.",
    "description": "There is a lot to say about objects in C# that we’ll cover in due time. Here, we highlight some introductory concepts of how C# works as an object-oriented programming language.\nObjects In C#, objects are structures that have a state and a set of behaviors. The state of an object includes properties/data that the coder can define and modify. Behaviors are actions that run when requested, and they can be used to evaluate, manipulate, or return data.",
    "tags": [],
    "title": "Objects and Methods, a Primer",
    "uri": "/data-types-and-variables/reading/objects-primer/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 2: TechJobs (Object-Oriented Edition)",
    "content": " Warning Due to the fact that this code is being auto-graded as you work through it, make sure that you use any and all names for classes, variables, methods, etc provided to you in these directions.\nNow open the Job file and follow the TODO prompts to remove the comment markers.\nOOF! There are a lot of fields and properties declared and not much else.\nCode a constructor to initialize the id field with a unique value. This constructor should take no parameters. Code a second constructor that takes 5 parameters and assigns values to name, employerName, employerLocation, jobType, and jobCoreCompetency. Also, this constructor should call the first in order to initialize the id field. Generate the Equals() and GetHashCode() methods. Consider two Job objects equal when their id fields match. Run TestTask3 tests Uncomment the tests inside the TestTask3class. Look for the TODOs to help you find the multi-line comments marks.\nRun your TestTask3 unit tests.\nRefactor your code as needed.\nDo not start Task 4 until you have passed all of Task 3’s auto-grading unit tests.\nTip Now would be a good time to save, commit, and push your work up to GitHub.\nOn to Task 4 .",
    "description": "Warning Due to the fact that this code is being auto-graded as you work through it, make sure that you use any and all names for classes, variables, methods, etc provided to you in these directions.\nNow open the Job file and follow the TODO prompts to remove the comment markers.\nOOF! There are a lot of fields and properties declared and not much else.\nCode a constructor to initialize the id field with a unique value.",
    "tags": [],
    "title": "Task 3: Complete the Job Class",
    "uri": "/assignments/tech-jobs-oo/task-3/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments",
    "content": "Introduction Your first two tasks as an apprentice went well! You, Blake, and Sally built the TechJobs console prototype and then refactored the code to move it to an object-oriented format.\nAfter demonstrating the prototype for the Company Team at LaunchCode, it received the green light to be fully built out as a web application.\nThe first step in this process will be to quickly develop a minimum viable product , or MVP. The goal is to get a functioning web app up and running with as little work as possible. That way, additional feedback and testing can be done early in the development process. After that, additional behind-the-scenes work will be carried out to fully develop the model and data side of the application.\nFor this next step in the project, you’ll be working with Carly.\nCarly was once a LaunchCode apprentice as well, so she knows just what it’s like to be in your shoes. She’s done some initial work on the project and left you some TODO tasks that she knows you can handle.\nLearning Objectives In this project, you’ll show that you can:\nRead and understand code written by others. Work within the controller and view portions of a ASP.NET MVC application. Use Razor syntax to display data within a view. Create new action methods to process form submission. TechJobs (MVC Edition) You’ll start with some code that Carly has provided. The idea behind your current assignment is to quickly deliver a functioning ASP.NET MVC application, so you’ll focus on the controllers and views.\nIn order to do this, you’ll be reusing the JobData class and job_data.csv file from the console app. You will eventually have to go back and rewrite the data portion of the application to make a true, database-backed model. However, using the existing JobData class to provide some basic data functionality lets you focus on the views and controllers for now.\nYour Assignment The list below provides a general overview of your assigned tasks. Specific details for each part appear in the following sections, so be sure to read them carefully as you solve each problem.\nReview Carly’s code in the JobData file as well as in the existing controllers and views. Carly needs your help completing the code to display only certain jobs. She has the code to display all of the values that users can select to filter the jobs. Carly started working on the search feature, but only got as far as writing the code to display the search form. She’s handed the project to you to finish the rest. First, you’ll create a controller method to retrieve search results. Finally, you’ll display search results in the view. Throughout your work, refer to our demo app as needed to clarify questions about intended application behavior.\nGetting Started Set up a local copy of the project:\nFork and clone the starter code repository . Launch the application to make sure it starts up properly. Then shut it down. Run the autograding tests. The tests for this assignment are set up the same way as for Assignment 2. There are four tasks for this assignment, but the first doesn’t require any coding on your part. Therefore, there are 3 tests files (for tasks 2-4). As with Assignment 2 , we recommend that you only run the tests for the task you are currently working on. Here are the tasks you need to complete:\nTask 1: Review the Starter Code Task 2: Complete ListController Task 3: Complete SearchController Task 4: Display Search Results Task 5: Submit Your Code and Bonus Missions ",
    "description": "Introduction Your first two tasks as an apprentice went well! You, Blake, and Sally built the TechJobs console prototype and then refactored the code to move it to an object-oriented format.\nAfter demonstrating the prototype for the Company Team at LaunchCode, it received the green light to be fully built out as a web application.\nThe first step in this process will be to quickly develop a minimum viable product , or MVP.",
    "tags": [],
    "title": "Assignment 3: TechJobs MVC",
    "uri": "/assignments/techjobs-mvc/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 3: TechJobs MVC",
    "content": " Note Before starting this task, un-comment out the tests in TestTaskFour.\nOnce you have your Results() action method passing information to the view, you need to display the data.\nIn Index.cshtml, create a loop to display each job passed in from the controller. Put the job results into a set of tables, similar to what you did for the List/Jobs.cshtml view. Run the tests in TestTaskFour to make sure that you have passed everything properly to the view!",
    "description": "Note Before starting this task, un-comment out the tests in TestTaskFour.\nOnce you have your Results() action method passing information to the view, you need to display the data.\nIn Index.cshtml, create a loop to display each job passed in from the controller. Put the job results into a set of tables, similar to what you did for the List/Jobs.cshtml view. Run the tests in TestTaskFour to make sure that you have passed everything properly to the view!",
    "tags": [],
    "title": "Task 4: Display Search Results",
    "uri": "/assignments/techjobs-mvc/task-four/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 0: Hello, World!",
    "content": "Stage and Commit Once you pass all of the tests, add, commit and push your code to GitHub.\nVerify Visit your assignment repository page to see the results of your submission. A green checkmark means the submission has successfully passed the tests. If you see a red X, then your submission is not yet correct.\nContinue working on your code until you have a green checkmark.\nCongrats! You have successfully completed Graded Assignment 0 in C#!\nThis process will be the same for all of your assignments in this unit. Revisit this page as needed to review instructions on running tests in C# projects. If you get stuck reach out to your TA or fellow students on slack.",
    "description": "Stage and Commit Once you pass all of the tests, add, commit and push your code to GitHub.\nVerify Visit your assignment repository page to see the results of your submission. A green checkmark means the submission has successfully passed the tests. If you see a red X, then your submission is not yet correct.\nContinue working on your code until you have a green checkmark.\nCongrats! You have successfully completed Graded Assignment 0 in C#!",
    "tags": [],
    "title": "Task 4: Submitting Your Code",
    "uri": "/assignments/hello-world/submit-your-code/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 1: Tech Jobs Console",
    "content": "Make Search Methods Case-Insensitive You’ve completed your first two tasks!\nLet’s assume you demonstrated the updated application for the Company Team, and they noticed a feature that could be improved. When searching for jobs with the skill \"JavaScript\" some results were missing (e.g. the Watchtower Security job on line 31 of the CSV file). The search methods turn out to be case-sensitive, so they treat \"JavaScript\" and \"Javascript\" as different strings.\nThe Company Team strongly requested that this needs to be fixed, and of course you told them that you are up to the task.\nHere are some questions to ask yourself as you get started:\nWhich methods are called when searching? How is the user’s search string compared against the values of fields of the job Dictionary objects? How can you make this comparison in a way that effectively ignores the case of the strings? How can you do this without altering the capitalization of the items in AllJobs so that the data gets printed out the same way that it appears in job_data.csv? You might find it useful to review the String methods listed in the chapter.\nWhen this task is completed, you’re ready to submit your assignment.",
    "description": "Make Search Methods Case-Insensitive You’ve completed your first two tasks!\nLet’s assume you demonstrated the updated application for the Company Team, and they noticed a feature that could be improved. When searching for jobs with the skill \"JavaScript\" some results were missing (e.g. the Watchtower Security job on line 31 of the CSV file). The search methods turn out to be case-sensitive, so they treat \"JavaScript\" and \"Javascript\" as different strings.",
    "tags": [],
    "title": "Task Three",
    "uri": "/assignments/techjobs-console/task-three/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 1: Introduction and Setup \u003e Setup for C#",
    "content": "Following the “Hello World” trend, let’s create a new Visual Studio project.\nCreate a new folder to hold your C# practice files. Since you will be creating lots of small projects as you move through this course, we suggest that you also add sub-folders with names corresponding to the related chapters and projects. Something like csharp-practice/chapter-name/project-name.\nIn Visual Studio, from the project opener window, select the option to create a new Visual Studio project.\nYou next need to choose what project template to use. For this first project (and those in the next several lessons), select the .NET Core Console Application option for C#.\nMac Users: You can find this under Web and Console in the left menu. Select the App subdirectory. Select Console Application from the General menu option in the center menu pane and press Continue Windows Users: Select Console App. If you can’t find it easily, you can search “Console App”. Select .NET 6.0 as your Target Framework and press Continue.\nThen, give your new project a name. Following C# Naming Conventions, call your project HelloWorld. The solution name will be the same. Choose where you want this project to be saved, ideally somewhere inside the directory you created in Step 1 of this tutorial.\nMac Users: Pick the options for “Use git for version control.” and “Create a .gitignore file to ignore inessential files”. Visual Studio will now create a Solution to hold your console Project. The project is your current app. The project contains all of the files that app needs to build and run. The solution is a workspace that combines multiple projects, which are usually related to each other. The solution file type is .sln. Once created, Visual Studio opens a new project window that displays your Program.cs file.\nTo see the other files inside this solution, you will need to turn your attention to either the Solution (Mac Users) or the Solution Explorer (Windows Users) on the left. You’ll see the project file tree containing a file called Program.cs in a pane called Solution Explorer.\nYou are new to C# and we’ll go over the syntax present in Program.cs in time. For now, can you guess what line 2 accomplishes?\n1 2 // See https://aka.ms/new-console-template for more information Console.WriteLine(\"Hello, World!\"); Click on the Run button (a triangle button located above the Program.cs panel for Windows users and above the solution for Mac users) to run the project and see the output.\nA console window should pop up with the line “Hello World” printed. That’s it. You have created and executed your first C# application!\nTip The first time you run a console app in Visual Studio, you may be prompted to allow VS to access the terminal. This is ok. This may also take longer than a few seconds to run the very first time.\nTroubleshooting This app is printing to the terminal. If you are not able to see the output, look inside the project’s terminal.\nIf you would like more instructions on creating and running this project check out the following documentation:\nWindows Users Mac Users Hello, Solution! You’ve just created your first C# project. Congrats! In fact, you’ve also just created your own C# solution. A solution is a container that holds different projects like a folder that contains subfolders. Your HelloWorld project is nested within a solution called HelloWorld. It is normal for a project to have the same name as the solution.\nTip In the Solution Explorer, you may notice that next to the solution name is the name of the current branch in parantheses. As you create more branches, you may find this a helpful tip to keep track of which branch you are currently working on.\nA C# project contains all the code to run a particular application. Along with the Program.cs file you ran just a moment ago, you may have also noticed a Dependencies folder. Many applications require extra code like access to another project in the same solution or other compiling configurations, such as testing libraries, to execute.\nYou can create another project inside of the HelloWorld solution very easily. Right click on the solution name to add a new project, another console app as above, and name it Hello\u003cYourName\u003e. Change the starter code in Program.cs to greet you by name.\nNow that you have more than one project in your solution, you need to select which one you want to run. Select the project name from the menu next to the Run button.\nCheck Your Understanding The two questions will use the following code:\n1 2 // See https://aka.ms/new-console-template for more information Console.WriteLine(\"Hello, World!\"); Question Given the code above, which line is responsible for printing a message?\nLine 1 Line 2 None of the above Question Where does the code above print out?\nIn line 3 of the Program.cs file In the browser In the terminal None of the above ",
    "description": "Following the “Hello World” trend, let’s create a new Visual Studio project.\nCreate a new folder to hold your C# practice files. Since you will be creating lots of small projects as you move through this course, we suggest that you also add sub-folders with names corresponding to the related chapters and projects. Something like csharp-practice/chapter-name/project-name.\nIn Visual Studio, from the project opener window, select the option to create a new Visual Studio project.",
    "tags": [],
    "title": "Creating a C# Project",
    "uri": "/introduction-and-setup/reading/creating-a-project/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST",
    "content": "We’ve created a CodingEvents API application here . Before we ask you to fork and clone this, let’s first think conceptually about the kinds of requests a client application could make to this API.\nThe API The coding-events-api starts by only exposing a single resource, CodingEvent, and four endpoints for interacting with it. The CodingEvent resource is analogous to the Event model class we created in our CodingEvents MVC application.\nThe Resource The shape of the CodingEvent resource describes the general form of its properties and value types:\n1 2 3 4 5 6 CodingEvent { Id: integer Title: string Description: string Date: string (ISO 8601 date format) } In our case, the CodingEvent shape is just the properties and types (translated to portable JSON types defined in a CodingEvent model class in coding-events-api.\n1 2 3 4 5 6 public class CodingEvent { public int Id { get; set; } public string Title { get; set; } public string Description { get; set; } public DateTime Date { get; set; } } An example of a real CodingEvent JSON response to a GET request would look like this:\n1 2 3 4 5 6 { \"id\": 1, \"title\": \"Consuming the Coding Events API With Postman\", \"description\": \"Learn how to use Postman to interact with the Coding Events API!\", \"date\": \"2020-07-24\" } Notice how this JSON is just a representation of an instance of the CodingEvent model class. The data shape has been converted from a C# object representation to a JSON string representation so it can be transported over HTTP. Recall that we perform this conversion, or serialization, so that our API can output data in a portable format that is language-agnostic.\nThe Endpoints This branch of the API has four endpoints:\nGET Coding Events GET a Single Coding Event Create a Coding Event Delete a Coding Event Get Coding Events We’ll ask you to consider some details of how to describe these endpoints.\nRemember, an endpoint is made up of a path (to the resource) and a method (action to take on the resource). Because we only have one resource, each of our endpoints share a common entry-point path of /api/events. Request and response bodies are all in JSON, or more specifically, they have a Content-Type header value of application/json.\nMaking a GET request to the entry-point of a resource should return a representation of the state of the collection. In our case, this representation is a JSON array with CodingEvent elements:\n1 2 3 4 [ CodingEvent { ... }, ... ] If the current state of the collection is empty, then we will just get back an empty JSON array:\n1 [] Question Using our endpoint shorthand, how would we describe this action?\nSome items to consider:\nWhat is the HTTP request type being used? What is the resource path being requested? Is there a request body being sent? What is included in it? If the request is successful, what information can we expect to be included in the response? GET a Single Coding Event If you want to view the representation of a single entity, you need to provide information to uniquely identify it in the collection. Since the entry-point represents the collection, it can be followed by an Id value in the path to look inside the collection and return just the corresponding entity.\nWhen describing entity endpoints, we use a path variable notation, {variableName}, to symbolize where the value needs to be put in the path.\nIf an entity with the given codingEventId is found, we will get a single CodingEvent JSON object back. If it is not found, we will receive a response with a 404 status code to indicate the failed lookup.\nQuestion Using our endpoint shorthand, how would we describe this action?\nSome items to consider:\nWhat is the HTTP request type being used? What is the resource path being requested? Is there a request body being sent? What is included in it? If the request is successful, what information can we expect to be included in the response? If the request contains an error, what information can we expect to be included in the response? Create a Coding Event Think about what it means to create an entity. You need to provide the required data and the collection it belongs to. When we want to create a CodingEvent, we are asking the API to change the state of the collection (the list of entities) so our path must be /api/events. Recall that the “C” in CRUD stands for “create”. Putting the resource and the action together, we know we need to POST to the /api/events endpoint. Finally, as part of our request, we will need to send a request body containing the data required to create the entity.\nThe shape of the NewCodingEvent describes the JSON body that the endpoint expects:\n1 2 3 4 5 NewCodingEvent { Title: string Description: string Date: string (ISO 8601 date format) } When making a request, you would need to send a JSON body like this to satisfy the general shape:\n1 2 3 4 5 { \"Title\": \"Halloween Hackathon!\", \"Description\": \"A gathering of nerdy ghouls to work on GitHub Hacktoberfest contributions\", \"Date\": \"2020-10-31\" } Note We only provide the user editable fields, not the unique Id which the API handles internally when saving to the database.\nRecall that when a POST request is successful, the API should respond with the 201, or Created, HTTP status code. As part of the 2XX HTTP success status codes, it indicates a particular type of successful response with a special header.\nOne of the REST conventions states that when an entity is created, the response should include both this status and the Location header that provides the URL of the new entity:\n1 Location=\u003cserver origin\u003e/api/events/\u003cnew entity Id\u003e As an example:\n1 Location=http://localhost:5000/api/events/1 You can then issue a GET request to the Location header value and view the new entity.\nIf the request fails because of a client error, then it will respond with a 400 status code and a message about what went wrong. In the case of CodingEvent entities, the following validation criteria must be met:\nTitle: 10-100 characters Description: less than 1000 characters Question Using our endpoint shorthand, how would we describe this action?\nSome items to consider:\nWhat is the HTTP request type being used? What is the resource path being requested? Is there a request body being sent? What is included in it? If the request is successful, what information can we expect to be included in the response? If the request contains an error, what information can we expect to be included in the response? Delete a Coding Event Deleting a CodingEvent resource is an operation on a single entity. Just like the endpoint for getting a single entity, this endpoint requires a codingEventId path variable. When a resource is deleted, a RESTful API should respond with a 204 status code. Similar to the 201 status, this code indicates a success with no response body or special headers.\nIf you attempt to delete a resource that doesn’t exist (with an incorrect codingEventId), then the endpoint will respond with an expected 404 status and message.\nQuestion Using our endpoint shorthand, how would we describe this action?\nSome items to consider:\nWhat is the HTTP request type being used? What is the resource path being requested? Is there a request body being sent? What is included in it? If the request is successful, what information can we expect to be included in the response? If the request contains an error, what information can we expect to be included in the response? Install Postman Now that we’ve explored working with those endpoints, we’re almost ready to start running the API and test sending those requests. You’ll need to install Postman to work with this lesson’s studio and practice running these requests.",
    "description": "We’ve created a CodingEvents API application here . Before we ask you to fork and clone this, let’s first think conceptually about the kinds of requests a client application could make to this API.\nThe API The coding-events-api starts by only exposing a single resource, CodingEvent, and four endpoints for interacting with it. The CodingEvent resource is analogous to the Event model class we created in our CodingEvents MVC application.",
    "tags": [],
    "title": "Exercises: Web APIs and REST",
    "uri": "/web-api-rest/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 1: Introduction and Setup",
    "content": "Next Steps Now that you have Visual Studio set up, you are ready to start programming in C#. Before you dive in, make sure to bookmark Microsoft’s documentation for C#. Microsoft regularly updates the documentation to address common errors or to make sure you, as a developer, get the latest info after a new release. The next chapter is on how data types and variables work in C#. Before you start reading up on the next topic, here are a couple extensions you might enjoy experimenting with in Visual Studio:\nSpell Checker Visual Studio Theme Pack Developer News If you are struggling with your new install of Visual Studio, don’t hesitate to reach out to course staff for assistance so you can code along with the examples in the next chapter.",
    "description": "Next Steps Now that you have Visual Studio set up, you are ready to start programming in C#. Before you dive in, make sure to bookmark Microsoft’s documentation for C#. Microsoft regularly updates the documentation to address common errors or to make sure you, as a developer, get the latest info after a new release. The next chapter is on how data types and variables work in C#. Before you start reading up on the next topic, here are a couple extensions you might enjoy experimenting with in Visual Studio:",
    "tags": [],
    "title": "Next Steps",
    "uri": "/introduction-and-setup/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 19: Authentication \u003e Reading",
    "content": "In order for users to successfully navigate through the application, Identity will handle a number of functions related to both authentication and authorization. For the purposes of this book, we will focus on just two: registering for a new account and logging in.\nNote Razor Class Libraries do not have separate controllers like in the traditional MVC design pattern. The logic that we might be inclined to put in a controller for each of the actions that we look at is actually contained within a Razor page. Our goal is to locate the correct page and understand what is going on.\nThe pages we are looking at end with the file extension .cshtml.cs. Some Mac users may have to click on a small arrow on to expand the .cshtml pages to find the cshtml.cs files.\nRegistration Open up Register.cshtml.cs in Areas/Identity/Pages/Account and inspect it. Here are some things to note:\nThe return type of the action to register a new user is Task\u003cIActionResult\u003e. We have encountered IActionResult before. Task\u003cIActionResult\u003e is an asynchronous return type. The action of adding a new user to a database is asynchronous so our function must return an asynchronous action. We can still use ModelState.IsValid to make sure that the user’s input matches our validation requirements. UserManager comes back into play here for the addition of the new user to the database. The method used for that action is called CreateAsync(). The new user’s password is hashed as part of this method, so there aren’t any additional method calls here. If the new user row in the database is successfully created, then we want to direct the user to a page to start working. If not, the user registration form is reloaded, just as when the validation requirements are not met. Note If you are interested in learning more about asynchronous return types in C#, check out the documentation .\nLogin Open up Login.cshtml.cs in Areas/Identity/Pages/Account. Here are some things to note:\nTask\u003cIActionResult\u003e is back meaning the action of signing in is asynchronous. If the form input is valid, then we want to try and sign in the user. SignInManager has a method called PasswordSignInAsync() which takes in parameters like the inputted email and password and compares those values to the values stored in the database. If the action of signing in is successful, the user is directed on to a new page. If the action is not successful, then the user is redirected back to the login form with an error message explaining that they could not log in. Logout There are two main things to note about Logout.cshtml.cs in Areas/Identity/Pages/Account:\nTask\u003cIActionResult\u003e is the return type. SignInManager has a method called SignOutAsync() which ends the session. Once that action is completed, the user is redirected to an unrestricted page. These are the three main actions we want to focus on when it comes to authentication with user accounts. We could additional elements to these three actions such as 2FA or two factor authentication on log in as the authentication requirements of our project grow.",
    "description": "In order for users to successfully navigate through the application, Identity will handle a number of functions related to both authentication and authorization. For the purposes of this book, we will focus on just two: registering for a new account and logging in.\nNote Razor Class Libraries do not have separate controllers like in the traditional MVC design pattern. The logic that we might be inclined to put in a controller for each of the actions that we look at is actually contained within a Razor page.",
    "tags": [],
    "title": "Registrations and Logins",
    "uri": "/authentication/reading/registrations-and-logins/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments",
    "content": "Your Task You will once again work with the TechJobs application. This time around you’ll add ORM functionality by using Entity Framework. You will be responsible for completing the code to allow users to create new job data. Your final application will have the same list and search capabilities as your Tech Jobs (MVC Edition) but you’ll need to do the work to connect the project to a database for storing user-submitted job data. Each of the three sections of this assignment will also ask you to demonstrate your SQL skills under an item labeled SQL TASK. As you work through each part, refer to our demo app to clarify questions about intended application behavior.\nNote The List and Search functions in the demo app are not part of this current Assignment’s codebase at this time.\nGetting Started Set up a local copy of the project:\nFork and clone the starter code repository . You will need to complete Task 1 before you see a working MVC application. Checkout and Review the Starter Code You will be able to run your application without any build errors. However, you’ll likely see a host of errors relating to the Entity Framework annotations and classes when you attempt to add any data or load different pages. Some of these have already been added but the connection to the database has not been set up yet. That will be one of your tasks. You’ll need to complete Task 1 before you can thoroughly check out the project running in the browser.\nThat said, it’s a good idea to scan the classes and templates even before you’re able to run the application. Take a gander at the Job class. It will look somewhat similar to the model in Tech Jobs (MVC Edition) , with a few key differences.\nYou’re no longer using a CSV file to load job data, instead, we’ll be creating new Job objects via a user form. The job data will be stored in a MySQL database that you’ll set up in Task 1 of this assignment.\nAs you explore the starter code, you’ll notice that the JobField class is missing. You will focus on just two aspects of a job listing: the employer and the skills required. Your task for Task 2 is to add code to let a user create an employer object.\nThe Job class will also look different from how you have last seen it. In Task 3, you will use the many-to-many relationship between skills and jobs to make it easier for users to add skills to new jobs. In your ASP.NET project, you’ll see an empty file in the solution called queries.sql. After completing the C# updates for task 1, 2, and 3, we ask you to test your application updates with SQL statements.\nSince you are entering your own data, the queries we ask you to write will return unique result sets. For example, if you haven’t entered any data yet, there may be an empty result set. However, as the architect of the database, you have the knowledge to write the appropriate queries nonetheless.\nMove on to Task 1 .",
    "description": "Your Task You will once again work with the TechJobs application. This time around you’ll add ORM functionality by using Entity Framework. You will be responsible for completing the code to allow users to create new job data. Your final application will have the same list and search capabilities as your Tech Jobs (MVC Edition) but you’ll need to do the work to connect the project to a database for storing user-submitted job data.",
    "tags": [],
    "title": "Assignment 4: Tech Jobs Persistent",
    "uri": "/assignments/techjobs-persist/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "Before introducing many-to-many relationships in EntityFrameworkCore, we need to add a new model and view to our app.\nNote The starter code for this chapter is located within the orm-one-to-many branch .\nIn this section, we explore how we can work with many-to-many relationships in ASP.NET using EntityFrameworkCore. To do so, we need a class that we can relate to Event in a many-to-many fashion. This is the Tag class.\nThe Tag Model Class Between the last section and this one, we have added a new persistent model class to the code, Tag. This class represents a tag of the type used for blog or social media posts. For us, a tag will be a topical label that can be applied to any event. Thus, we’ll eventually relate Event and Tag to each other in a many-to-many way.\nThe steps to add this code follow the exact same process that we used to add a persistent EventCategory class , so we won’t go through them in detail here.\nThe Detail View Before working with tags, we will add a new view, along with the corresponding controller, ViewModel, and template. The new view will live at the route /Events/Detail/X, where X is the ID of a specific event. This view will display the details of a specific event on its own page.\nAdding a Detail view for events is relatively straightforward, but it also involves a couple of new concepts. We’ll start by creating a ViewModel to model the data we want to display in the view.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 using System; using System.Collections.Generic; using CodingEventsDemo.Models; namespace CodingEventsDemo.ViewModels { public class EventDetailViewModel { public int EventId { get; set; } public string Name { get; set; } public string Description { get; set; } public string ContactEmail { get; set; } public string CategoryName { get; set; } public EventDetailViewModel(Event theEvent) { EventId = theEvent.Id; Name = theEvent.Name; Description = theEvent.Description; ContactEmail = theEvent.ContactEmail; CategoryName = theEvent.Category.Name; } } } The model replicates the Name, Description, and Email properties of Event while storing Category.Name as a string. This is a minor variant of the Event class, but by the end of this section we’ll add more behavior to EventDetailViewModel that will make the benefits of using a ViewModel in this case more clear.\nWithin EventsController we add a handler method to display the view.\n1 2 3 4 5 6 7 8 9 public IActionResult Detail(int id) { Event theEvent = context.Events .Include(e =\u003e e.Category) .Single(e =\u003e e.Id == id); EventDetailViewModel viewModel = new EventDetailViewModel(theEvent); return View(viewModel); } There are two new concepts to introduce here. First, our method takes a parameter named id. You have worked with such parameters in the past, as query parameters mapped to method parameters. For example, we could reach this handler with the request path /Events/Detail?id=X. What’s new now is that we will use the same parameter mapping, but with a path parameter. A path parameter is a parameter that is part of the request path. In this case, we will be able to make requests to a path like Events/Detail/X.\nNote This parameter mapping works seamlessly because the of default path template specified in the Program.cs file.\n1 2 3 app.MapControllerRoute( name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\"); This template is \"{controller=Home}/{action=Index}/{id?}\". The last portion, {id?}, means that any path parameter following the action method will map to a method parameter named id.\nIf we wanted to use a different URL structure, or a different method parameter name, we would need to include additional configuration. See the documentation on routing for more details.\nThe other new concept here is the use of the EF method Single:\n1 2 3 Event theEvent = context.Events .Include(e =\u003e e.Category) .Single(e =\u003e e.Id == id); This method takes a boolean lambda expression and filters the Context.Events collection down to the one event that satisfies e.Id == id. In other words, it finds the single event with Id matching the path parameter.\nNote We use Single instead of Find here because we also need to call Include to eagerly fetch the Category property. Include can not be chained with Find.\nThe only remaining task is to create the view for the new event details. It should consist of a table displaying the properties of the Event. Create a new file within the /Views/Events folder named Detail.cshtml and add the following code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @model CodingEvents.ViewModels.EventDetailViewModel \u003ch1\u003e@Model.Name\u003c/h1\u003e \u003ctable class=\"table\"\u003e \u003ctr\u003e \u003cth\u003eDescription\u003c/th\u003e \u003ctd\u003e@Model.Description\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003eContact Email\u003c/th\u003e \u003ctd\u003e@Model.ContactEmail\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003eCategory\u003c/th\u003e \u003ctd\u003e@Model.CategoryName\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e That wraps up this section. In the next chapter we will create the many-to-many relationship between the Event and Tag class.",
    "description": "Before introducing many-to-many relationships in EntityFrameworkCore, we need to add a new model and view to our app.\nNote The starter code for this chapter is located within the orm-one-to-many branch .\nIn this section, we explore how we can work with many-to-many relationships in ASP.NET using EntityFrameworkCore. To do so, we need a class that we can relate to Event in a many-to-many fashion. This is the Tag class.",
    "tags": [],
    "title": "Some Setup",
    "uri": "/relationships-or-mapping/reading/some-setup/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 17: Introduction to Object-Relational Mapping \u003e Reading",
    "content": "Welcome to the walkthrough for creating and using templates in your CodingEvents project.\nYou will find a video walkthrough of the steps covered in the reading. Time stamps have been added to highlight the topics covered so far and their locations in the reading.\nVideo Walkthrough ",
    "description": "Welcome to the walkthrough for creating and using templates in your CodingEvents project.\nYou will find a video walkthrough of the steps covered in the reading. Time stamps have been added to highlight the topics covered so far and their locations in the reading.\nVideo Walkthrough ",
    "tags": [],
    "title": "Walkthrough: Connecting to the Database",
    "uri": "/orm-part-1/reading/walkthrough/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 15: Viewmodels and Model Validation \u003e Reading",
    "content": "While our application is properly handing errors, we need to display the error messages so that the users know what information they should be adding. Client-side validation like this can prevent faulty data submissions.\nDisplaying Error Messages in our View Create a separate span element in the form. In the \u003cspan\u003e tag, we can add asp-validation-for to specify which property’s validation error messages should be displayed if the conditions are not met.\nNote We don’t have to add anything else to display error messages, because that validation is already built in!\nNow when we run our application and enter a bad event name or forget our description, we get the error message displaying what we should be entering!\nIf we pass our validation, we should be redirected to the /Events view and see the new event added to the list!\nChanging the Color of Error Messages Making error messages a different color, such as red, is a common technique to catch the attention of the user. We can do that by using unobtrusive validation methods, such as using a third-party library.\nThe jQuery Unobtrusive Validation library. contains scripts that will perform validation tasks, such as updating the color of error messages. To utilize this library, we need to point to it in our _Layout.cshtml page and then add more attributes to our Views.\n_Layout.cshtml Updates To utilize the library, we need to add the following references to it within the \u003cmain\u003e area. Add This Code 1 2 3 4 5 6 \u003cmain\u003e @RenderBody() \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.js\"\u003e\u003c/script\u003e \u003c/main\u003e In the Add View, you will need to create more class attributes for the library to target.\nCheck Your Code ",
    "description": "While our application is properly handing errors, we need to display the error messages so that the users know what information they should be adding. Client-side validation like this can prevent faulty data submissions.\nDisplaying Error Messages in our View Create a separate span element in the form. In the \u003cspan\u003e tag, we can add asp-validation-for to specify which property’s validation error messages should be displayed if the conditions are not met.",
    "tags": [],
    "title": "Validation and Views",
    "uri": "/viewmodels/reading/view-validation/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views \u003e Reading",
    "content": "In addition to iteration, Razor can also add or remove content on a webpage based on certain conditions. Going back to the coffee example, we could generate the ordered list ONLY IF coffeeOptions contains data. If the list of coffee types is empty, then there is no need to include the \u003col\u003e element. Instead, the template could include a \u003cp\u003e element with text stating that there are no options to select.\nDisplay Content if/else To include conditional logic to display a Razor template element, we use a basic C# if clause.\nThe general syntax for including a conditional in Razor is:\n@if (condition) { // HTML element(s) to add or additional template logic }Above, condition represents any expression that can be evaluated to true or false (ie, a boolean).\nIf condition evaluates to true, then Razor adds the HTML element to the webpage and the content is displayed in the view. If condition is false, then Razor does NOT generate the element, and the content stays off the page.\nLet’s look at an example:\nExample Assume that userSelection represents a string property on ViewBag.",
    "description": "In addition to iteration, Razor can also add or remove content on a webpage based on certain conditions. Going back to the coffee example, we could generate the ordered list ONLY IF coffeeOptions contains data. If the list of coffee types is empty, then there is no need to include the \u003col\u003e element. Instead, the template could include a \u003cp\u003e element with text stating that there are no options to select.",
    "tags": [],
    "title": "Conditionals in a Template",
    "uri": "/razor-views/reading/conditionals-templates/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 10: Controllers and Routing \u003e Reading",
    "content": "This is a video walkthrough of all the steps taken during the chapter. To follow along, make sure to fork and clone HelloASPDotNET . The video starts on the main branch and ends on the controllers-and-routing branch. The video includes timestamps that correspond to each page in the reading in case you want to revisit a specific task or technique.",
    "description": "This is a video walkthrough of all the steps taken during the chapter. To follow along, make sure to fork and clone HelloASPDotNET . The video starts on the main branch and ends on the controllers-and-routing branch. The video includes timestamps that correspond to each page in the reading in case you want to revisit a specific task or technique.",
    "tags": [],
    "title": "Video Walkthrough",
    "uri": "/aspdotnet-controllers-and-routes/reading/video-walkthrough/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 8: Interfaces and Polymorphism \u003e Reading",
    "content": "After all that we have learned about interfaces, perhaps you are wondering, how do I write my unit tests with interfaces?\nThe best practices to testing interfaces are very similar to those of testing inheritance . You want to focus on testing the contract that the interface is supposed to be upholding as opposed to the interface itself.\nExample We have an IFeedable interface and a HouseCat class.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public interface IFeedable { string Eat() { return \"the feedable is eating\"; } } public class HouseCat : IFeedable { public string Name { get; set; } public HouseCat(string name) { Name = name; } } Based on the class above and the interface it implements, we should expect that a call to .Eat() on an instance of a HouseCat will return the default implementation.\n1 2 3 4 5 6 7 8 9 10 11 [TestClass] public class CatTests { [TestMethod] public void TestHouseCatImplementsEatMethod() { IFeedable test_cat = new HouseCat(\"test\"); Assert.AreEqual(\"the feedable is eating\", test_cat.Eat()); // This test passes. Don't believe us? Try it yourself! } } In this situation, we test the contract that the interface is supposed to be upholding, but not the interface itself. While there are strategies to test interface code itself using mock objects, we won’t approach those tactics in this course.\nCheck Your Understanding Question A class PetDog also implements IFeedable and contains its own Eat() method. Should we test that method’s results?\nNo, the interface contract will not be tested in this scenario. Yes, testing the class’s custom methods is always a worthy endeavor. ",
    "description": "After all that we have learned about interfaces, perhaps you are wondering, how do I write my unit tests with interfaces?\nThe best practices to testing interfaces are very similar to those of testing inheritance . You want to focus on testing the contract that the interface is supposed to be upholding as opposed to the interface itself.\nExample We have an IFeedable interface and a HouseCat class.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public interface IFeedable { string Eat() { return \"the feedable is eating\"; } } public class HouseCat : IFeedable { public string Name { get; set; } public HouseCat(string name) { Name = name; } } Based on the class above and the interface it implements, we should expect that a call to .",
    "tags": [],
    "title": "Unit Testing and Interfaces",
    "uri": "/interfaces-and-polymorphism/reading/testing-interfaces/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "When one class extends another, as HouseCat extends Cat, a field or local variable of the type of the base class may hold an object that is of the type of the child class.\nIn other words, this is allowed:\nCat suki = new HouseCat(\"Suki\", 8);This is acceptable because a HouseCat is a Cat. Furthermore, when we call methods on such an object, the compiler is smart enough to determine which method it should call. For example, the following call to Noise() will call the version defined in HouseCat:\n// Calls HouseCat's Noise() method suki.Noise(); // Hello, my name is Suki!This only works for methods that are declared in the base class, however. If we have a HouseCat object stored in a Cat variable or field, then it is not allowed to call methods that are only part HouseCat.\n// Results in a compiler error, since Cat // doesn't have such a method suki.IsSatisfied();Here, IsSatistfied() is defined in HouseCat, and there is not a corresponding overridden method in Cat. If we were really, really sure that we had a Cat that was actually a HouseCat, we could call such a method by first casting:\n// As long as suki really is a HouseCat, this works (suki as HouseCat).IsSatisfied();The danger here is that if suki is in fact not a HouseCat (it was declared only as a Cat, after all) then we’ll experience a runtime exception. A runtime exception is an error that occurs upon running the program, and is not found by the compiler beforehand. These are dangerous, and situations where these exeptions might come up should be avoided. So you should only cast an object to another type when you are very sure that it’s safe to do so.\nStoring objects of one type (e.g. HouseCat) in a variable or field of another compatible type (e.g. Cat) is an example of polymorphism. Polymorphism is another one of the pillars of OOP and we’ll have more to say about it in the next lesson.\nCheck Your Understanding Question For this question, refer to the code block below.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class Message { public bool Friendly { get; } = true; public string Language { get; } public string Text { get; } public Message(string language, string text) { Language = language; Text = text; } } public class Greeting : Message { public bool Waving { get; set;}; public Greeting(string language, string text) : base(language, text) { } public void Wave() { Waving = true; } } Which of the following does not contain an error:\n1 2 Message hello = new Greeting(\"English\", \"Hello Coder!\"); (hello as Greeting).Wave(); 1 2 Message hello = new Greeting(\"English\", \"Hello Coder!\"); hello.Wave(); 1 2 Greeting hello = new Message(\"English\", \"Hello Coder!\"); hello.Wave(); 1 2 Greeting hello = new Greeting(\"English\", \"Hello Coder!\"); (hello as Message).Wave(); Question Polymorphism refers to:\nOne object inheriting another An abstract class with many classes extending from it The practice of storing an object of one type in a variable of another type Shapeshifting ",
    "description": "When one class extends another, as HouseCat extends Cat, a field or local variable of the type of the base class may hold an object that is of the type of the child class.\nIn other words, this is allowed:\nCat suki = new HouseCat(\"Suki\", 8);This is acceptable because a HouseCat is a Cat. Furthermore, when we call methods on such an object, the compiler is smart enough to determine which method it should call.",
    "tags": [],
    "title": "Casting",
    "uri": "/inheritance/reading/casting/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives By the end of this chapter, you should understand:\nHow to customize fields with the keywords readonly and static. How to add methods to a class and call those methods. The difference between instance methods and static methods. How to override the default ToString and Equals methods for a class. How to auto-generate an Equals method in Visual Studio. Key Terminology Customizing Fields readonly field static field const Customizing Methods static method Class method Special Methods override ToString method Overriding Cast Equality Identity Equals method Content Links Reading: Classes Part 2 Exercises: Objects and Classes, Part 2 Studio: Restaurant Menu Continued Next Steps ",
    "description": "Learning Objectives By the end of this chapter, you should understand:\nHow to customize fields with the keywords readonly and static. How to add methods to a class and call those methods. The difference between instance methods and static methods. How to override the default ToString and Equals methods for a class. How to auto-generate an Equals method in Visual Studio. Key Terminology Customizing Fields readonly field static field const Customizing Methods static method Class method Special Methods override ToString method Overriding Cast Equality Identity Equals method Content Links Reading: Classes Part 2 Exercises: Objects and Classes, Part 2 Studio: Restaurant Menu Continued Next Steps ",
    "tags": [],
    "title": "Chapter 5: Classes Part 2",
    "uri": "/classes-part-2/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 3: Control Flow \u0026 Collections \u003e Reading",
    "content": "We learned about arrays in C# in a previous lesson , so let’s spend a moment comparing them to Lists. Lists are generally easier to use than C#’s Array. Let’s see why this is.\nWhy does C# have both Arrays and Lists? The answer is historical, at least in part. C# is a C-style language, and arrays are the most basic data structure in C. Using an Array over a List might be preferred in some circumstances, primarily for performance reasons (array operations are generally faster than List operations). Also note that Arrays are of fixed size. You cannot expand or contract an Array after it is created, so you must know exactly how many elements it will need to hold when you create it. This fact is reason enough to use Lists in most scenarios.\nTo illustrate Array usage, here is a version of the Gradebook program using Arrays instead of Lists. The ArrayGradebook project is in csharp-web-dev-examples repository.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // Allow for at most 30 students int maxStudents = 30; string[] students = new string[maxStudents]; double[] grades = new double[maxStudents]; string input; string newStudent; int numStudents = 0; Console.WriteLine(\"Enter your students (or ENTER to finish):\"); // Get student names do { input = Console.ReadLine(); newStudent = input; if (!Equals(newStudent, \"\")) { students[numStudents] = newStudent; numStudents++; } } while(!Equals(newStudent, \"\")); // Get student grades for (int i = 0; i \u003c numStudents; i++) { Console.WriteLine(\"Grade for \" + students[i] + \": \"); input = Console.ReadLine(); double grade = double.Parse(input); grades[i] = grade; } // Print class roster Console.WriteLine(\"\\nClass roster:\"); double sum = 0.0; for (int i = 0; i \u003c numStudents; i++) { Console.WriteLine(students[i] + \" (\" + grades[i] + \")\"); sum += grades[i]; } double avg = sum / numStudents; Console.WriteLine(\"Average grade: \" + avg); The ArrayGradebook project lives in the csharp-web-dev-controlflowandcollections repository. If you haven’t forked and cloned the repository, you should do so now.\nNote that we have to decide up front how large our arrays, students and grades, are going to be. Thus, this program sets an arbitrary maximum amount of students, likely larger than any user will enter. It may seem obvious, then, that Array has no equivalent Add() method. The only way to access and alter an element in an Array is with bracket notation, using an explicit index. For example, gradebook defines a counter variable, numStudents. When the first student is entered by the user, the value is stored in newStudent. If the value is not the empty string, then the value in students at position 0 is assigned the newStudent value. The next time the do-while loop executes, the value of students at position 1 will be assigned. This process continues until the user enters an empty string for newStudent. Because we must always access and assign Array elements using an explicit index, our code can seem littered with Array counter variables (like our friends i and j), making it more difficult to read (not to mention more error-prone).\nLike Lists, however, we can loop through an Array using a foreach loop as long as we don’t need to use the index of the current item. If we only wanted to print each student’s name, and not their grade, at the end of our program, we could do the following:\n1 2 3 foreach (string student in students) { Console.WriteLine(student); } We’ll use Arrays in C# from time-to-time, but for the most part you should rely on Lists to store collections of values, or ordered data.\nQuestion Array size and element values cannot be changed once defined.\nTrue False Question Given the Array below, which of the following options is a valid action?\nint[] randomNumbers = new int[5]; randomNumbers.Add(3); randomNumbers.Add(\"one\"); randomNumbers[0] = \"three\"; randomNumbers[0] = 1; ",
    "description": "We learned about arrays in C# in a previous lesson , so let’s spend a moment comparing them to Lists. Lists are generally easier to use than C#’s Array. Let’s see why this is.\nWhy does C# have both Arrays and Lists? The answer is historical, at least in part. C# is a C-style language, and arrays are the most basic data structure in C. Using an Array over a List might be preferred in some circumstances, primarily for performance reasons (array operations are generally faster than List operations).",
    "tags": [],
    "title": "Array",
    "uri": "/flow-collections/reading/array/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "Calling Methods on Objects A method is a function that belongs to a class. In C#, all procedures must be part of a class. Let’s revisit our HelloWorld class.\n1 2 3 4 5 6 7 8 9 10 11 public class HelloWorld { private string message = \"Hello World\"; public void SayHello() { Console.WriteLine(message); } } There is one method in this class, SayHello(). In order to call this method, we must have an object created from the HelloWorld class template. In other words, we must have an instance of HelloWorld.\nHere’s how you call methods on an object.\nHelloWorld hello = new HelloWorld(); hello.SayHello();It is not possible to call SayHello() without having a HelloWorld object. This begins to make more sense when you note that the message field is used within SayHello(), and unless we are calling SayHello() on an instantiated object, there will be no message field available to print.\nNote As mentioned before, class members should have the most restrictive level of access possible. This goes for methods as well as fields. For example, if you create a utility method that should only be used within your class, then it should be private. You can think of private methods as those that are not useful outside of the class, but that can contribute internally to helping the class behave as desired or expected.\nOn the contrary, public methods are code that other classes will want to use when they implement the class containing those public methods. So only make methods public when you expect other classes to use them, and when you are committed to maintaining those methods for other calling programs that may use them.\nInstance Methods So far, we’ve only looked at examples of methods that are relatively specialized: constructors, getters, and setters. Every class you create will have these methods. What will make your classes different from each other, and thus fulfill the purpose of creating each class, are the specific behaviors that are unique to your classes.\nLet’s say we want to add a method in our Student class that reports the GPA of a student. This method is an instance method since it will belong to each Student object created, and will use the data of each such object.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public class Student { private static int nextStudentId = 1; public string Name { get; set; } public int StudentId { get; set; } public int NumberOfCredits { get; set; } public double Gpa { get; set; } public Student(string name, int studentId, int numberOfCredits, double gpa) { Name = name; StudentId = studentId; NumberOfCredits = numberOfCredits; Gpa = gpa; } public Student(string name, int studentId) : this(name, studentId, 0, 0) {} public Student(string name) : this(name, nextStudentId) { nextStudentId++; } public string StudentInfo() { return (Name + \" has a GPA of: \" + Gpa); } } We will make use of instance methods more in the next chapter, but now you know the basics of how to add additional behaviors to our classes.\nNote Above, we’ve added some functionality to increment the studentId property, too.\nCheck Your Understanding Question Fill in the blanks with the appropriate terms.\nA _____________ gives a class property a field.\nA _____________ gives a programmer access to the value of a private class property.\nA _____________ creates a new instance of a class.\nA _____________ is a method that belongs to each occurrence of a class.",
    "description": "Calling Methods on Objects A method is a function that belongs to a class. In C#, all procedures must be part of a class. Let’s revisit our HelloWorld class.\n1 2 3 4 5 6 7 8 9 10 11 public class HelloWorld { private string message = \"Hello World\"; public void SayHello() { Console.WriteLine(message); } } There is one method in this class, SayHello(). In order to call this method, we must have an object created from the HelloWorld class template.",
    "tags": [],
    "title": "Methods",
    "uri": "/classes/reading/methods/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 2: TechJobs (Object-Oriented Edition)",
    "content": " Warning Due to the fact that this code is being auto-graded as you work through it, make sure that you use any and all names for classes, variables, methods, etc provided to you in these directions.\nThe solution currently contains a testing project called TechJobs.Tests. If you open this project, you will find a class called JobTests You will need to add the appropriate dependency to TechJobs.Tests to test the classes in the TechJobsOO project. The JobTests file will hold all of the tests for the `Job\nInitial Setup Inside JobTests,\nDelete the TestMethod test. Initialize 4 job objects starting at line 7. This will save you a lot of time while creating your unit tests. //Testing objects Job job1 = new Job(); Job job2 = new Job(); Job job3 = new Job(\"Product tester\", new Employer(\"ACME\"), new Location(\"Desert\"), new PositionType(\"Quality control\"), new CoreCompetency(\"Persistence\")); Job job4 = new Job(\"Product tester\", new Employer(\"ACME\"), new Location(\"Desert\"), new PositionType(\"Quality control\"), new CoreCompetency(\"Persistence\"));You can now use these testing objects in your unit tests.\nTest the Empty Constructor Each Job object should contain a unique ID number, and these should also be sequential integers.\nIn JobTests, define a test called TestSettingJobId. Using job1 and job2, compare two empty constructor Job objects. Use Assert.AreEqual, Assert.IsTrue, or Assert.IsFalse to test that the ID values for the two objects are NOT the same and differ by 1. How could you compare Id numbers? How could you test the incrementing amount? Run the test to verify that your Job() constructor correctly assigns ID numbers. If the test doesn’t pass, what should be your first thought? “I need to fix the unit test.” “I need to fix my Job() constructor code.” Warning Your test code might be incorrect, but that should not be your FIRST thought. TDD begins with writing tests for desired behaviors. If the tests fail, that indicates errors in the methods trying to produce the behavior rather than in the tests that define that behavior.\nTest the Full Constructor Each Job object should contain six properties—Id, Name, EmployerName, EmployerLocation, JobType, and JobCoreCompetency.\nIn JobTest, define a test called TestJobConstructorSetsAllFields. Select one of the Job objects with the full constructor to test that the object is assigned the correct properties. Use Assert statements to test that the constructor correctly assigns the value of each field as follows: \"Product tester\" for Name \"ACME\" for EmployerName \"Desert\" for JobLocation \"Quality control\" for JobType \"Persistence\" for JobCoreCompetency Note We are not testing Id at the moment.\nTest the Equals() Method Two Job objects are considered equal if they have the same id value, even if one or more of the other fields differ. Similarly, the two objects are NOT equal if their id values differ, even if all the other fields are identical.\nIn JobTest, define a test called TestJobsForEquality. Select any of the two Job objects. Test that Equals() returns false. It might seem logical to follow up the false case by testing to make sure that Equals() returns true when two objects have the same ID. However, the positive test is irrelevant in this case.\nThe way you build your Job class, each id field gets assigned a unique value, and the class does not contain a setter for the id field. You also verified that each new object gets a different ID when you tested the constructors. Without modifying the constructors or adding a setter, there is no scenario in which two different jobs will have the same ID number. Thus, we can skip the test for this condition.\nRun TestTask4 tests Uncomment the tests inside the TestTask4class. Look for the TODOs to help you find the multi-line comments marks.\nRun your TestTask4 unit tests.\nRefactor your code as needed.\nDo not start Task 5 until you have passed all of Task 4’s auto-grading unit tests.\nTip Now would be a good time to save, commit, and push your work up to GitHub.\nOn to Task 5 .",
    "description": "Warning Due to the fact that this code is being auto-graded as you work through it, make sure that you use any and all names for classes, variables, methods, etc provided to you in these directions.\nThe solution currently contains a testing project called TechJobs.Tests. If you open this project, you will find a class called JobTests You will need to add the appropriate dependency to TechJobs.Tests to test the classes in the TechJobsOO project.",
    "tags": [],
    "title": "Task 4: Use Unit Testing to Verify Parts of the Job Class",
    "uri": "/assignments/tech-jobs-oo/task-4/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 3: TechJobs MVC",
    "content": "Sanity Check At this point, all autograding tests should be passing. To be sure, run all the tests at once and if any are failing, evaluate the error message and go back and fix your code.\nHow to Submit To turn in your assignment and get credit, follow the submission instructions .\nBonus Missions Here are some additional challenges, for those willing to take them on:\nWhen we select a given field to search within and then submit, our choice is forgotten and returns to “All” by default. Modify the view template to keep the previous search field selected when displaying the results. In the tables displaying the full job data, find a way to manipulate the font, style, capitalization, etc. to further distinguish the labels from the data (e.g. Employer: LaunchCode). (Hint: We capitalize the title string in multiple templates, so have a look around). In the tables of the job results, make each value (except name) hyperlinked to a new listing of all jobs with that same value. For example, if we have a list of jobs with the JavaScript skill, clicking on a location value like Saint Louis will generate a new list with all the jobs available in that city. ",
    "description": "Sanity Check At this point, all autograding tests should be passing. To be sure, run all the tests at once and if any are failing, evaluate the error message and go back and fix your code.\nHow to Submit To turn in your assignment and get credit, follow the submission instructions .\nBonus Missions Here are some additional challenges, for those willing to take them on:\nWhen we select a given field to search within and then submit, our choice is forgotten and returns to “All” by default.",
    "tags": [],
    "title": "Task 5: Submit Your Code and Bonus Missions",
    "uri": "/assignments/techjobs-mvc/submit-your-code/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 1: Tech Jobs Console",
    "content": "Sanity Check Before submitting, make sure that your application:\nPrints each field of a job when using search functionality, and when listing all columns. If there are no search results, a descriptive message is displayed. Allows the user to search for a string across all columns. Returns case-insensitive results. Run the autograding tests to ensure that the tests pass. How to Submit To turn in your assignment and get credit, follow the submission instructions.\nReview Assignment 0 if you need a refresher on this process.\nBonus Missions If you want to take your learning a few steps further, here are some additional features the company team thinks would be nice to have in our app. We’re not providing you much guidance here, but we have confidence that you can figure how to implement these enhanced features!\nSorting list results: When a user asks for a list of employers, locations, position types, etc., it would be nice if results were sorted alphabetically. Make this happen. Returning a copy of AllJobs: Look at JobData.FindAll(). Notice that it’s returning the AllJobs property, which is a static property of the JobData class. In general, this is not a great thing to do, since the person calling our FindAll() method could then mess with the data that AllJobs contains. Fix this by creating a copy of AllJobs. Hint: Look at the methods of the List class listed in the Microsoft documentation. ",
    "description": "Sanity Check Before submitting, make sure that your application:\nPrints each field of a job when using search functionality, and when listing all columns. If there are no search results, a descriptive message is displayed. Allows the user to search for a string across all columns. Returns case-insensitive results. Run the autograding tests to ensure that the tests pass. How to Submit To turn in your assignment and get credit, follow the submission instructions.",
    "tags": [],
    "title": "Submission and Bonus Missions",
    "uri": "/assignments/techjobs-console/submission/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 1: Introduction and Setup \u003e Setup for C#",
    "content": "Follow along with the provided walkthroughs to learn how to clone repos into Visual Studio. Try it out on your own by forking and cloning the LaunchCodeEducation/csharp-web-dev-examples repository page. First, fork the repository into your own GitHub account by selecting Fork from the top right of the page and then clone the newly-created repository to your own machine to start working on it locally.\nWindows Users Clone a Git Repository in Visual Studio Note the path where you save this repo.\nMac Users Cloning an Existing Repo Be sure to note the Target Folder where this repo is saved.\nNote If you do not have an Open With Visual Studio button on Github, that is okay! On the documentation page above, they provide instructions in case you are using an alternate Git provider. Follow these instructions to clone your repository using menu options without having to go through Github.\nExploring the Cloned Repo in Your Terminal While you can do this through the Visual Studio interface, you should practice using the terminal as well. The interface may change or some places may test your comfort with the terminal. Keep practicing those command line skills!\nOnce you have cloned it in Visual Studio, locate the repo using your terminal.\nOn a Windows machine, it is a path you saved your repo at. On a Mac, it’s in the Target Folder.\nOnce you find the repo, cd into it. Look for the Solution file which uses the .sln file type.\nstudents-computer:csharp-web-development-examples student$ ls HelloMethods csharp-web-development-examples.sln TempConverter Note The csharp-web-development-examples solution contains 2 separate projects: HelloMethods and TempConverter. A single solution can hold multiple projects.\nTry to open the solution using the command line prompt:\nWindows Users: start *.sln\nMac Users: open *.sln\nNote It may take a while for Visual Studio to start up. Be patient! Sometimes just clicking on the icon can help bring the solution pane to the forefront of your screen.\nReturn to the terminal. Locate your Program.cs file for the HelloMethods project. This will be contained in the project directory of the same name.\nstudents-computer:csharp-web-development-examples student$ ls HelloMethods csharp-web-development-examples.sln TempConverter students-computer:csharp-web-development-examples student$ cd HelloMethods students-computer:csharp-web-development-examples student$ ls HelloMethods.csproj Message.cs Program.cs You have now stepped into the project files for HelloMethods. All of the files here are related to the HelloMethods project.\nAs you work with repos in this unit, some solutions may contain a single project and others may contain multiple.\nHow to Work with a Cloned Repo We recommend using the terminal to open and work with your repos. You will be able to interact with git easily this way.\nUse the terminal to locate the repo you wish to open. cd into the solution. You can verify this by looking for a file that has the .sln type. Use the command prompt above for your operating system.\nOpen the solution file tree in Visual Studio. If you see multiple projects, you can select which one to run two ways:\nRight-clicking on the name of the project and selecting the Run option. Open the project’s Program.cs file then use the run button in the menu bar. Check Your Understanding Question Which file is the solution?\nstudents-computer:csharp-web-development-examples student$ ls HelloMethods csharp-web-development-examples.sln TempConverter TempConverter HelloMethods csharp-web-development-examples.sln Program.cs Question Where would Willow find the Program.cs file for the TempConverter project?\nstudents-computer:csharp-web-development-examples student$ ls HelloMethods csharp-web-development-examples.sln TempConverter Inside the TempConverter project Inside the HelloMethods project Inside csharp-web-development-examples.sln None of the above ",
    "description": "Follow along with the provided walkthroughs to learn how to clone repos into Visual Studio. Try it out on your own by forking and cloning the LaunchCodeEducation/csharp-web-dev-examples repository page. First, fork the repository into your own GitHub account by selecting Fork from the top right of the page and then clone the newly-created repository to your own machine to start working on it locally.\nWindows Users Clone a Git Repository in Visual Studio Note the path where you save this repo.",
    "tags": [],
    "title": "Cloning a C# Project",
    "uri": "/introduction-and-setup/reading/cloning-a-project/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 19: Authentication \u003e Reading",
    "content": "With Identity in place, we can start to configure the settings of the library to meet our authentication requirements. The first place to start with configuring Identity to fit the needs of the project is in Program.cs.\nProgram.cs Now that we are getting to configure our user, let’s check out the code in Program.cs. Earlier you may have added the following:\n1 2 3 4 5 6 7 8 9 10 builder.Services.AddDefaultIdentity\u003cIdentityUser\u003e (options =\u003e { options.SignIn.RequireConfirmedAccount = true; options.Password.RequireDigit = false; options.Password.RequiredLength = 10; options.Password.RequireNonAlphanumeric = false; options.Password.RequireUppercase = true; options.Password.RequireLowercase = false; }).AddEntityFrameworkStores\u003cEventDbContext\u003e(); This code is dictating the settings for account creation. Right now, for a user to create an account, they have to have the following:\nThey have to click a link to confirm their account. Their password has to be more than 10 characters long. Their password has to include an uppercase letter(s). Their password does not have to include a number. Their password does not have to include a special character such as a question mark. Their password does not have to include lowercase letters. These are just some basic requirements that can be changed to suit the needs of your application. For a full list of the default settings for users’ passwords and how we can change those settings, check out the documentation .\nIn Program.cs, we can also configure cookie settings, password hashers, user validation requirements, sign in settings and more.\nAdditional Customizations As you learn more about what Identity can do, you may find yourself wanting to customize it more and more to suit your needs! Here are some examples of what you can do with it.\nCustomize user information Customize user roles Customize the UI Add new settings to user passwords Change the default settings around user sign-in Note If you want to customize user data, it is best to do so when initially scaffolding the app. IdentityUser has a number of properties that are important and relevant to storing user data. However, when you read through the requirements you may notice that you need additional properties, such as the user’s first and last name. If you want to add custom properties, check out this article from Microsoft.",
    "description": "With Identity in place, we can start to configure the settings of the library to meet our authentication requirements. The first place to start with configuring Identity to fit the needs of the project is in Program.cs.\nProgram.cs Now that we are getting to configure our user, let’s check out the code in Program.cs. Earlier you may have added the following:\n1 2 3 4 5 6 7 8 9 10 builder.",
    "tags": [],
    "title": "Configuring Identity",
    "uri": "/authentication/reading/configuring-identity/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST",
    "content": "The UI of a browser is designed to make simple GET requests for URLs entered into its address bar. This design works great for browsing sites, but falls short when working with APIs. Anything beyond a GET request is difficult to send via a browser address bar alone. Think about what is needed to create a new CodingEvent. This type of request contains a body. Our MVC application included a view to allow us to test inputs. Our API, however, is headless. It does not contain the client-side form. In order to test how it handles requests then, we need a way to interact with the API server without the browser. In this studio, we work with Postman to explore how APIs can be consumed.\nSetup Install Postman If you haven’t done so already, install Postman .\nFork and Clone the API Source Code With Postman installed, we’re ready to fork and clone the CodingEvents API . Although it is implemented differently from CodingEvents MVC, you will find that most of the features from the MVC application have been supported through endpoints in the API.\nNote Our focus in this course is on operations and as such we will not be going into the development of the API. However, feel free to explore the source code if you are curious about the similarities and differences between the .NET MVC and API implementations.\nLet’s begin by forking and cloning the repo onto our machine. In your Powershell or terminal window, move into a directory where you plan to save your local copy of the API codebase.\nNote Including a SQLite database in this project means you don’t need to have your MySQL server running to test the API. We won’t get into what this looks like and instead just concentrate on testing the API endpoints.\nStart the API Server We’ll start the API server from the terminal using the dotnet run command. Navigate to the CodingEventsAPI project folder within your coding-events-api solution. This is the folder that contains Controllers/ and so on, and is NOT the main project folder.\n# navigate and change into the coding-events-api solution cd coding-events-api # change to the CodingEventsAPI project directory cd CodingEventsAPI ```bash # run the project dotnet runinfo: Microsoft.Hosting.Lifetime[0] Now listening on: https://localhost:5001 info: Microsoft.Hosting.Lifetime[0] Now listening on: http://localhost:5000 info: Microsoft.Hosting.Lifetime[0] Application started. Press Ctrl+C to shut down. info: Microsoft.Hosting.Lifetime[0] Hosting environment: Development info: Microsoft.Hosting.Lifetime[0] Content root path: C:\\Users\\\u003cusername\u003e\\coding-events-api\\CodingEventsAPIIf you see something like this output above, then your API is running! You’ll note, we’re not using Visual Studio here to run the application but feel free to open the solution in VS and explore the source code.\nSwagger Documentation With the application running, go to the first location listed as: Now listening on: https://localhost:5001. Open https://localhost:5001 in your browser. You’ll see a page that looks nothing like any view we created in our other MVC applications. What you see running in the browser is not at all a client-side application, but rather, some documentation resources for the API itself.\nYou’ll see a list of those endpoints we asked you to describe for this lesson’s exercises:\nTwo endpoints at the CodingEvents entry-point path, /api/events, to interact with the collection as a whole:\nlist CodingEvents: GET /api/events -\u003e CodingEvent[] create a CodingEvent: POST /api/events (NewCodingEvent) -\u003e 201, CodingEvent And two that require a sub-path variable, /events/{codingEventId}, to interact with a single entity:\nfind single CodingEvent: GET /api/events/{codingEventId} -\u003e CodingEvent delete a CodingEvent: DELETE /api/events/{codingEventId} -\u003e 201, CodingEvent And below this list are two Schemas, or shapes, of resources the API handles.\nSwagger is a popular tool API developers use to include fast documentation for their API codebase. The page we’re looking at is generated by this tool and gives us a nice summary of the endpoints made available by the CodingEvents API we currently have running. But remember, we’ll test the API in Postman.\nMaking Requests to the Coding Events API List the Coding Events To create our first request using Postman, select the Create New button located within the “Start with something new” section.\nSelect the Create New button to create a new request\nNote The above screenshot is from the Home page on Postman. If you are on the Workshop page choose the New button on the top right of the My Workspace pane located on the left side.\nCreating a New Request With the Create New view open, select the HTTP Request option.\nThis will open the view to create a HTTP Request.\nConfiguring the Request Postman exposes an exhaustive set of tools for configuring every aspect of a request. Fortunately, this request is relatively simple.\nWe want to request the state of the CodingEvents collection, in shorthand:\nGET /api/events -\u003e CodingEvent[]\nIn Postman, we can make this request by configuring the following settings:\nthe URL of the endpoint: http://localhost:5000/api/events the HTTP method of the endpoint: GET the request header: (Accept: application/json) Note Though we view the Swagger docs from port 5001, we request the resources on port 5000.\nTo the left of the URL bar is a dropdown selector for HTTP methods. It will default to GET. In the following requests, you will need to select the appropriate method from this list.\nThe dropdown menu contains all of the HTTP request types available to send\nNext to the request method type, enter the request URL where the API request should be sent: http://localhost:5000/api/events.\nUnderneath the URL bar are tabs for other aspects of the request. Select the Headers tab to configure our header. The Accept header lets the API know that we accept responses that are formatted as JSON.\nNote In our context, the API only responds with JSON. However, some APIs offer multiple MIME types for their responses. It is a best practice to set this header explicitly to the content type the consuming application expects.\nYou can set multiple headers in this section. As you begin to type the name and value of headers, Postman will autocomplete them for you. After configuration, your request should look like this:\nThe request Accept header is given a value of “application/json”\nTo issue the request, you can select the blue Send button on the right of the window, or use the ctrl + enter keyboard shortcut.\nViewing the Response Below the request configuration, you will see the response section has been populated. From here, you see the response body along with the status code (on the right) and a tab for headers:\nThe initial CodingEvents collection state is empty\nSince this is our first time running the application, the database is empty. We expectedly received an empty JSON list [] which corresponds to the empty representation of the Coding Events collection.\nIf you select the Headers tab in the response pane, you see the API satisfied our Accept request header and provided the response in application/json format.\nThe response is returned as application/json\nNote If you get a connection refused error, it means you likely forgot to start the API server or mistyped the URL. Check both of these before attempting the request again.\nIf sending the request results in a connection error, check your setup and request settings\nCreate a CodingEvent For our next request, we will create a CodingEvent. Repeat the steps you performed in the previous request:\nClick on the New button in the top left corner of the Postman window to create a new request. Select the HTTP Request option. This request will change the state of the Coding Events collection by adding a new entity to it. Recall that the shorthand for this request is:\nPOST /api/events (NewCodingEvent) -\u003e 201, CodingEvent\nWe will need to set the following request settings:\nThe URL of the endpoint: http://localhost:5000/api/events The HTTP method of the endpoint: POST The request header: (Content-Type application/json) The request body: a JSON NewCodingEvent object Your request should look like the following image:\nAs a best practice, we explicitly define the Content-Type header. This header indicates that our request contains application/json data so that the API knows how to parse the incoming request body.\nConfigure the Request Body In addition to the configurations you are now familiar with setting, we will need to define the request body. For this task, select the Body tab that is next to Headers.\nThe body of the request must be in a raw JSON format. In the Body tab, you will need to select the data format. Select raw from the available options. Once this format is selected, enter the following JSON body:\n1 2 3 4 5 { \"Title\": \"Halloween Hackathon!\", \"Description\": \"A gathering of nerdy ghouls to work on GitHub Hacktoberfest contributions\", \"Date\": \"2020-10-31\" } Before sending the request, check that your configuration matches the following image:\nYou can write JSON directly into the request Body tab\nHit send and we’ll take a look at the result.\nAnalyzing the Response You can see in the response that the API reflected back the representation of the new CodingEvent entity. Notice that a unique id has been assigned to it by the API. Looking at the status code (201) and headers of the response, we can see the API conformed to the REST convention. Open the Headers tab in the response panel. The URL value of the Location header is: http://localhost:5000/api/events/1. (in my case the id was 2) This location can be can now be used to view the individual CodingEvent entity that was created by our request.\nSending a Bad Request To test the rejection of bad requests, let’s send one that violates the NewCodingEvent validation constraints. Send another request with the following JSON body:\n1 2 3 4 5 { \"Title\": \"too short\", \"Description\": \"A gathering of nerdy ghouls to work on GitHub Hacktoberfest contributions\", \"Date\": \"2020-10-31\" } You can see from the response that the API rejected the request. The response returns a bad request status of 400 which indicates a client-side error. The response body includes information about what needs to be corrected to issue a successful request:\n.. figure:: figures/create-coding-event-bad-request.png :alt: Postman response returned from CodingEvent creation request containing an invalid request body\nThe response body error message tells us we need to modify our CodingEvent title\nGet a Single Coding Event For this step, we will make a request for the state of a single entity. You can use the URL from the Location header of the previous request to complete this task. Remember to follow the steps you performed before, keeping in mind the shorthand for this request:\nGET /api/events/{codingEventId} -\u003e CodingEvent\nCreate a new request named: get a single coding event Add it to the existing coding events API collection Configure the URL of the endpoint: http://localhost:5000/api/events/1 Configure the HTTP method of the endpoint: GET Configure the request header: (Accept: application/json) You should get back the following JSON response body:\n1 2 3 4 5 6 { \"id\": 1, \"title\": \"Halloween Hackathon!\", \"description\": \"A gathering of nerdy ghouls to work on GitHub Hacktoberfest contributions\", \"date\": \"2020-10-31T00:00:00\" } Requesting a Non-Existent Entity Our REST API allows us to interact with the state of its resources. If we make a request for a resource that doesn’t exist in this state, we expect a 404 (not found) response.\nTry issuing the request again with a non-existent codingEventId of 100. You should get back the following response:\nWe got a 404 response when requesting a resource that cannot be found on the server\nDelete a Coding Event In this final step, we will issue a DELETE request. Before we make the request, let’s re-issue the request to list the collection of CodingEvents. Now that we have added an entity, we expect the state of the CodingEvents resource collection to have changed. Switch back to the GET request tab and re-issue the request for the endpoint http://localhost:5000/api/events. You should get a response of the collection’s list representation containing the single entity we have created.\n1 2 3 4 5 6 7 8 [ { \"id\": 1, \"title\": \"Halloween Hackathon!\", \"description\": \"A gathering of nerdy ghouls to work on GitHub Hacktoberfest contributions\", \"date\": \"2020-10-31T00:00:00\" } ] To delete this entity, and therefore change the state of our resources, we will need to issue the following shorthand request:\nDELETE /api/events/{codingEventId} -\u003e 204\nOnce again, go through the methodical process of setting up the request:\nCreate a new HTTP request Configure the URL of the endpoint: http://localhost:5000/api/events/1 Configure the HTTP method of the endpoint: DELETE Notice that for this request, we do not need to set any request headers. A DELETE request should send back an empty (no-content) response body with its 204 status code.\nDeleting a CodingEvent returns no body in the response\nAs a final confirmation, check the state of the CodingEvents collection by submitting a GET request to http://localhost:5000/api/events and notice that it has returned to its initial state. The representation of this state is shown in the empty list [] response body.\nBonus Missions If you complete this studio early and want some additional practice, consider the following bonus missions:\nExplore the API source code using your IDE debugger to step through the request and response process Try consuming the API from the command-line using the Bash curl program or the PowerShell Invoke-RestMethod cmdlet. ",
    "description": "The UI of a browser is designed to make simple GET requests for URLs entered into its address bar. This design works great for browsing sites, but falls short when working with APIs. Anything beyond a GET request is difficult to send via a browser address bar alone. Think about what is needed to create a new CodingEvent. This type of request contains a body. Our MVC application included a view to allow us to test inputs.",
    "tags": [],
    "title": "Studio: Consuming the Coding Events API With Postman",
    "uri": "/web-api-rest/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "Let’s set up a many-to-many relationship between Event and Tag.\nNote The following walkthrough is a continuation of Some Setup . If you have not completed the steps in the Some Setup walkthrough you can either revisit them or start with the following branch: Coding Events some-setup branch Join Tables To relate data in a many-to-many fashion in a relational database requires a new type of SQL table.\nOne-to-many relationships are established at the database level by the use of a foreign key column on one side of the relationship. Our Events table has a foreign key column: CategoryId.\nFor each Events row, the column CategoryId contains the Id of a Categories row. This is the primary key of the row in Categories that the Events row is related to. The Event/EventCategory relationship is many-to-one, so many event rows may have the same CategoryId value.\nUsing foreign and primary keys to create many-to-many relationships is a bit trickier. In order to relate rows in Events to rows in Tag, we need need a third table, known as a join table. A join table consists of two columns, each of which is a foreign key column to another table. Each row in a join table represents a relationship between one row in each of the two tables being joined. This technique enables many-to-many relationships.\nConsider some example data in our Events and Tags tables.\nSample Events Data Id Name CategoryId 13 WWDC 2 15 SpringOne Platform 2 17 Java Meetup 3 Sample Categories Data Id Name 2 Conference 3 Meetup Sample Tags Data Id Name 4 ios 5 spring 6 java A join table for these two tables would be called EventTags, and would have two columns, EventsId and TagsId. Each of these columns are foreign key columns into their respective tables.\nIf we want to relate the ios tag to the WWDC event, we create a new row in EventTags:\nJoin table with a single relationship EventId TagId 13 4 We can do this again and again to generate more relationships. Let’s revisit the many-to-many diagram from earlier in the chapter.\nThe join table representing these relationships looks like this:\nEventsId TagsId 13 4 15 5 15 6 17 7 Notice that join table doesn’t have an explicit primary key column. Values in both EventsId and TagsId may be duplicated in each column. Indeed, this is the exact property of a join table that allows many-to-many relationships. A join table makes use of a new type of primary key, called a composite primary key. A composite primary key is a combination of columns that is unique and functions as a primary key. So, for example, the primary key of the first row of the example just above is the pair (13, 4). This combination is unique, because the objects with the two IDs can be related to each other in only one way.\nIn order to enable many-to-many relationships with EF, we need a class to model a join table.\nMany to Many Relationship To model a join table for Event and Tag classes, we will provide a collection navigation property on both sides of the relationship.\nWithin the Event.cs class we add the following collection property of type Tags:\npublic ICollection\u003cTag\u003e? Tags { get; set; } 1 Tags = new List\u003cTag\u003e(); Within the Tag.cs class we add a collection property of type Events to the other side of the relationship:\npublic ICollection\u003cEvent\u003e? Events { get; set; }Events = new List\u003cEvent\u003e();Join Entity Type Configuration Since our join table will make use of a composite primary key, we need to add some additional configuration to EventDbContext.\n1 2 3 4 5 6 7 protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity\u003cEvent\u003e() .HasMany(e =\u003e e.Tags) .WithMany(e =\u003e e.Events) .UsingEntity(j =\u003e j.ToTable(\"EventTags\")); } The method OnModelCreating can be overridden from the base class, DbContext, in order to provide additional configuration for the data store. In this case, we add code that configures EventTag to have a composite primary key consisting of the properties/columns EventId and TagId.\nBefore proceeding, create and apply a database migration. Be sure to use a unique and descriptive migration name. After running the migration, verify that there is a new join table, EventTags.\nAdding a Tag to an Event Now that we have established a many-to-many relationship between Event and Tag, we can write controller and view code to allow users to add tags to events.\nFor a user to be able to add a tag to an event, they will need a view in which to do so. Our approach will be to create a view at the path /Tag/AddEvent/X, where X is a path parameter containing the ID of the event we want to add a tag to.\nThis new view will contain a form with a dropdown that will allow the user to select the tag to add to the event with ID X. To model this form data, we need a new ViewModel.\nViewModels/AddEventTagViewModel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 using System; using CodingEvents.Models; using Microsoft.AspNetCore.Mvc.Rendering; namespace CodingEvents.ViewModels { public class AddEventTagViewModel { public int EventId { get; set; } public Event? Event { get; set; } public List\u003cSelectListItem\u003e? Tags { get; set; } public int TagId { get; set; } public AddEventTagViewModel(Event theEvent, List\u003cTag\u003e possibleTags) { Tags = new List\u003cSelectListItem\u003e(); foreach (var tag in possibleTags) { Tags.Add(new SelectListItem { Value = tag.Id.ToString(), Text = tag.Name }); } Event = theEvent; } public AddEventTagViewModel() { } } } This class models the data that is needed to render and process our form. In order to add a tag to an event, our POST handler will need to know the IDs of the two objects in question. Therefore, our ViewModel has required EventId and TagId properties. It also contains an Event property, which we will use to display details (such as the event name) in the view.\nFinally, the ViewModel has a property List\u003cSelectListItem\u003e Tags. As with previous forms containing a dropdown, this property will be used to populate the select element containing the all of the tag options.\nThe constructor requires an Event object as well as a List\u003cTag\u003e object. The list will contain a collection of all tags pulled from the database when we call the constructor from within our controller.\nNow, let’s create the view template.\nViews/Tag/AddEvent.cshtml Our template needs a form with two inputs. The more obvious input will be the select element containing tag options. Since we also need to submit the event ID in our request, we’ll add a hidden input that holds the value of EventId from our ViewModel.\n1 2 3 4 5 6 7 8 9 10 11 12 13 @model CodingEvents.ViewModels.AddEventTagViewModel \u003ch1\u003eAdd Tag to Event: @Model.Event.Name\u003c/h1\u003e \u003cform asp-controller=\"Tag\" asp-action=\"AddEvent\" method=\"post\"\u003e \u003cinput type=\"hidden\" value=\"@Model.Event.Id\" name=\"EventId\" /\u003e \u003cdiv class=\"form-group\"\u003e \u003clabel asp-for=\"TagId\"\u003eTag\u003c/label\u003e \u003cselect asp-for=\"TagId\" asp-items=\"Model.Tags\"\u003e\u003c/select\u003e \u003cspan asp-validation-for=\"TagId\"\u003e\u003c/span\u003e \u003c/div\u003e \u003cinput type=\"submit\" value=\"Add Tag\" /\u003e \u003c/form\u003e GET and POST Handlers We’re now ready to add handler methods to TagController.\nThe GET method is simple since it just displays the form.\n1 2 3 4 5 6 7 8 9 10 // responds to URLs like /Tag/AddEvent/5 (where 5 is an event ID) public IActionResult AddEvent(int id) { Event theEvent = context.Events.Find(id); List\u003cTag\u003e possibleTags = context.Tags.ToList(); AddEventTagViewModel viewModel = new AddEventTagViewModel(theEvent, possibleTags); return View(viewModel); } This method creates an AddEventTagViewModel using the event specified by the id parameter and the list of all tags from the database. Then it renders the view.\nThe POST method is more complicated.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [HttpPost] public IActionResult AddEvent(AddEventTagViewModel viewModel) { if (ModelState.IsValid) { int eventId = viewModel.EventId; int tagId = viewModel.TagId; Event theEvent = context.Events.Include(e =\u003e e.Tags).Where(e =\u003e e.Id == eventId).First(); Tag theTag = context.Tags.Where(t =\u003e t.Id == tagId).First(); theEvent.Tags.Add(theTag); context.SaveChanges(); return Redirect(\"/Events/Detail/\" + eventId); } return View(viewModel); } This action method takes in a AddEventTagViewModel object which will be created via model binding. Assuming validation passes (that is, both EventId and TagId are not null) we create a new EventTag object and save it to the database. Then we redirect to the detail view for the given event.\nWith this code, we can now add a tag to an event. Start up the application and test it out. In order to verify that everything worked, you’ll need to look at the EventTag table in the database to verify a new row is created upon form submission.\nIn the next section, we’ll work to display tags in the view.\nDisplaying Tags in the Detail View Now that we have EventTags data in the database, let’s display the tags for a given event in the view.\nWe want an event’s tags to be displayed on its detail view, so let’s start in EventsController. The Detail method needs to pass in tag data for the given event. To do this, we must use another .Include() statement with a lambda expression for Tags.\n1 2 3 4 5 6 7 8 9 10 public IActionResult Detail(int id) { Event theEvent = context.Events .Include(e =\u003e e.Category) .Include(e =\u003e e.Tags) .Single(e =\u003e e.Id == id); EventDetailViewModel viewModel = new EventDetailViewModel(theEvent); return View(viewModel); } Now let’s move into EventDetailViewModel. Here, we add data related to an event’s tags to pass into the view.\nFirst, add a new string property named TagText. We will also create a List of Tags called evtTags.\n1 public string TagText { get; set; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public EventDetailViewModel(Event theEvent) { EventId = theEvent.Id; Name = theEvent.Name; Description = theEvent.Description; ContactEmail = theEvent.ContactEmail; CategoryName = theEvent.Category.Name; TagText = \"\"; List\u003cTag\u003e evtTags = theEvent.Tags.ToList(); for (var i = 0; i \u003c evtTags.Count; i++) { TagText += (\"#\" + evtTags[i].Name); if (i \u003c evtTags.Count - 1) { TagText += \", \"; } } } We build up the contents of TagText by looping over evtTags and appending tag names, separated by commas. For example, if an event has tags with names \"java\", \"csharp\", and \"object-oriented\", then the TagList will be \"#java, #csharp, #object-oriented\".\nDisplaying this data in the view is straightforward. In Views/Events/Detail.cshtml, add an additional row to the table.\n1 2 3 4 \u003ctr\u003e \u003cth\u003eTags\u003c/th\u003e \u003ctd\u003e@Model.TagText\u003c/td\u003e \u003c/tr\u003e Now, any tags associated with the given event will display nicely.\nTo make it easy for users to add a tag to an event, add the following link below the table.\n1 \u003ca asp-controller=\"Tag\" asp-action=\"AddEvent\" asp-route-id=\"@Model.EventId\"\u003eAdd Tag\u003c/a\u003e This creates a URL of the form /Tag/AddEvent/X, where X is the ID of the given event.\nDisplay Items With a Given Tag In addition to seeing which tags are on an event, we would also like to see all events with a specific tag.\nWe start by creating a Detail action in Controllers/TagController.cs. This action method should retrieve all Tags objects with a given TagId.\n1 2 3 4 5 6 public IActionResult Detail(int id) { Tag theTag = context.Tags.Include(e =\u003e e.Events).Where(t =\u003e t.Id == id).First(); return View(theTag); } This controller is accessible at the route /Tag/Detail/X where X is the ID of a specific tag.\nThe view is similar to other listings that we have created.\nViews/Tag/Detail.cshtml Create the Detail.cshtml file and add the below code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @model CodingEvents.Models.Tag @if (Model.Events.ToList().Count == 0) { \u003ch1\u003eNo elements with the given tag\u003c/h1\u003e } else { \u003ch1\u003eEvents Tagged: @Model.Name\u003c/h1\u003e \u003cul\u003e @foreach (var evtTag in Model.Events) { \u003cli\u003e@evtTag.Name\u003c/li\u003e } \u003c/ul\u003e } Finally, we add links to the name of each tag in our tag index.\nViews/Tag/Index.cshtml:\n1 2 3 4 \u003ctr\u003e \u003ctd\u003e@tag.Id\u003c/td\u003e \u003ctd\u003e\u003ca asp-controller=\"Tag\" asp-action=\"Detail\" asp-route-id=\"@tag.Id\"\u003e@tag.Name\u003c/a\u003e\u003c/td\u003e \u003c/tr\u003e Start the app up and test user behavior. Viewing the main tag listing should allow you to click on each tag name and view the events that have that tag.\nCheck Your Understanding Question The use of join tables enables (select all that apply):\nA database where you never need to run a JOIN query. Many-to-many relationships between tables. Many-to-many relationships between classes without creating a join class. Rainbows and butterflies to be stored in your database. Question True/False: A join table does not have a primary key.\nQuestion Which EventDbContext property allows you to access Tag objects that are related to an Event object?\nDbSet\u003cEvent\u003e Events DbSet\u003cTag\u003e Tags DbSet\u003cEventTag\u003e EventTags All of the above ",
    "description": "Let’s set up a many-to-many relationship between Event and Tag.\nNote The following walkthrough is a continuation of Some Setup . If you have not completed the steps in the Some Setup walkthrough you can either revisit them or start with the following branch: Coding Events some-setup branch Join Tables To relate data in a many-to-many fashion in a relational database requires a new type of SQL table.\nOne-to-many relationships are established at the database level by the use of a foreign key column on one side of the relationship.",
    "tags": [],
    "title": "Creating a Many-to-Many Relationship",
    "uri": "/relationships-or-mapping/reading/many-to-many/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 15: Viewmodels and Model Validation \u003e Reading",
    "content": "Welcome to the walkthrough for creating and using templates in your CodingEvents project.\nVideo Walkthrough This walkthrough starts with the code from the models branch.\nThe final code in the walkthrough can be found on the viewmodels branch.",
    "description": "Welcome to the walkthrough for creating and using templates in your CodingEvents project.\nVideo Walkthrough This walkthrough starts with the code from the models branch.\nThe final code in the walkthrough can be found on the viewmodels branch.",
    "tags": [],
    "title": "Walkthrough: Adding ViewModels and Validation to CodingEvents",
    "uri": "/viewmodels/reading/viewmodels-walkthrough/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views \u003e Reading",
    "content": "Welcome to the Walkthrough for creating and using templates in your HelloASPDotNET project.\nVideo Walkthrough This walkthrough starts with the code from the controllers and routes video . Starting code repo is using the controllers-and-routing branch.\nThe final code in the walkthrough can be found on the views branch.\nNote Congrats! You have completed the HelloASPNET project.\nIf you would like to continue this project, checkout out the Next Steps section for some coding challenges.",
    "description": "Welcome to the Walkthrough for creating and using templates in your HelloASPDotNET project.\nVideo Walkthrough This walkthrough starts with the code from the controllers and routes video . Starting code repo is using the controllers-and-routing branch.\nThe final code in the walkthrough can be found on the views branch.\nNote Congrats! You have completed the HelloASPNET project.\nIf you would like to continue this project, checkout out the Next Steps section for some coding challenges.",
    "tags": [],
    "title": "Walkthrough: Wrapping up HelloASPDotNET",
    "uri": "/razor-views/reading/views-walkthrough/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "Not sure you get the whole inheritance idea? Still not sure which fields and methods get inherited and which are overridden? Looking to test your understanding?\nKnowing what we know now about Unit Testing and Inheritance , we can test that our subclasses extend their base classes.\nWe can add a CatTests project to our Cats solution and write some code to ensure that HouseCat inherits what we expect it to.\n1 2 3 4 5 6 [TestMethod] public void InheritsBaseInFirstConstructor() { HouseCat keyboardCat = new HouseCat(\"Keyboard Cat\", 7); Assert.AreEqual(7, keyboardCat.Weight, .001); } Here, we’re testing that one of our HouseCat constructors will call the Cat constructor and appropriately assign the HouseCat object’s weight field. Remember, we don’t need to write unit tests for getters or setters unless they do something extra in addition to getting or setting the field. The purpose of this test, though, is less to test getting keyboardCat.Weight and more to validate that the subclass constructor has inherited the base class constructor.\nIt’s a good practice to test your subclasses to verify the items that they inherit or override.\nCheck Your Understanding Question Fill in the blank to test that the no-argument constructor of Cat is called when the second constructor on HouseCat is used?\nSecond HouseCat constructor:\n14 15 16 17 public HouseCat(string name) { Name = name; } 1 2 3 4 5 6 [TestMethod] public void InheritsDefaultCatInSecondConstructor() { HouseCat keyboardCat = new HouseCat(\"Keyboard Cat\"); // \u003cinsert assertion method here\u003e } Assert.AreEqual(13, keyboardCat.Weight); Assert.IsNotNull(keyboardCat.Weight); Assert.AreEqual(13, keyboardCat.Weight, .001); Assert.IsNotNull(keyboardCat.weight); Question What additional assert method can we add to this test to properly verify that HouseCat inherits Eat()?\n1 2 3 4 5 6 7 8 [TestMethod] public void IsNotInitiallyTired() { HouseCat keyboardCat = new HouseCat(\"Keyboard Cat\"); Assert.IsFalse(keyboardCat.Hungry); Assert.IsFalse(keyboardCat.Tired); keyboardCat.Eat(); } Assert.IsFalse(keyboardCat.Tired); Assert.IsTrue(keyboardCat.Tired); Assert.IsTrue(keyboardCat.Hungry); Assert.IsFalse(keyboardCat.tired); ",
    "description": "Not sure you get the whole inheritance idea? Still not sure which fields and methods get inherited and which are overridden? Looking to test your understanding?\nKnowing what we know now about Unit Testing and Inheritance , we can test that our subclasses extend their base classes.\nWe can add a CatTests project to our Cats solution and write some code to ensure that HouseCat inherits what we expect it to.",
    "tags": [],
    "title": "Testing Inheritance",
    "uri": "/inheritance/reading/testing-inheritance/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 3: Control Flow \u0026 Collections \u003e Reading",
    "content": "C# also provides us a structure to store data as key/value pairs. C# calls these objects dictionaries, and they are provided by the Dictionary class.\nConsidering the gradebook example, we can improve our program using a dictionary. We’ll store the students’ grades along with their names in the same data structure. The names will be the keys, and the grades will be the values.\nAs with the other collection structures, in C# we must specify the types of the objects we’ll be storing when we declare a variable or parameter to be a dictionary. This means specifying both key and value data types, which are allowed to be different types for a given dictionary.\nYou can find the DictionaryGradebook project in the csharp-web-dev-examples repository. Explore it, run it, and notice how it differs from the ListGradebook and the ArrayGradebook.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 Dictionary\u003cstring, double\u003e students = new Dictionary\u003cstring, double\u003e(); string newStudent; Console.WriteLine(\"Enter your students (or ENTER to finish):\"); // Get student names and grades do { Console.WriteLine(\"Student: \"); string input = Console.ReadLine(); newStudent = input; if (!Equals(newStudent, \"\")) { Console.WriteLine(\"Grade: \"); input = Console.ReadLine(); double newGrade = double.Parse(input); students.Add(newStudent, newGrade); // Read in the newline before looping back Console.ReadLine(); } } while(!Equals(newStudent, \"\")); // Print class roster Console.WriteLine(\"\\nClass roster:\"); double sum = 0.0; foreach (KeyValuePair\u003cstring, double\u003e student in students) { Console.WriteLine(student.Key + \" (\" + student.Value + \")\"); sum += student.Value; } double avg = sum / students.Count; Console.WriteLine(\"Average grade: \" + avg); Notice how a Dictionary called students is declared on line 2:\n2 Dictionary\u003cstring, double\u003e students = new Dictionary\u003cstring, double\u003e(); Here, \u003cstring, double\u003e defines the data types for this dictionary’s \u003ckey, value\u003e pairs.\nWe can add a new item with a .Add() method, specifying both key and value:\n18 students.Add(newStudent, newGrade); And while we don’t do so in this example, we may also access Dictionary elements using bracket notation. If we had a key/value pair of \"jesse\"/4.0 in the students dictionary, we could access the grade with:\ndouble jesseGrade = students[\"jesse\"];Variables may be used to access elements:\nstring name = \"jesse\"; double jesseGrade = students[name];Looping through a dictionary is slightly more complex than it is for ordered lists. Let’s look at the foreach loop from this example:\n30 31 32 33 for (KeyValuePair\u003cstring, double\u003e student in students) { Console.WriteLine(student.Key + \" (\" + student.Value + \")\"); sum += student.Value; } The iterator variable, student, is of type KeyValuePair\u003cstring, double\u003e. The class KeyValuePair\u003cT,T\u003e is specifically constructed to be used in this fashion, to represent key/value pairs within dictionaries. Each KeyValuePair object has a Key property and a Value property.\nIf you only need to access the key of each item, you can construct a simpler loop and use the Keys property of the Dictionary class:\nforeach (string studentName in students.Keys) { Console.WriteLine(studentName); }A similar structure applies if you only need the values, using students.Values:\nforeach (double grade in students.Values) { Console.WriteLine(grade); } Note We can declare and initialize a dictionary in one stroke like so:\nDictionary\u003cint, string\u003e groceries = new Dictionary\u003cint, string\u003e { {2, \"Apples\"}, {3, \"Oranges\"}, {1, \"Avocado\"} }; Dictionary Methods Let’s collect some Dictionary methods as we have for List. As we said about Lists, this is by no means a comprehensive catalog. For full details on all properties and methods available, see the documentation on the Dictionary class.\nFor the purposes of this table, we’ll create a dictionary to hold our solar system’s planets and the number of moons associated with each.\nDictionary\u003cstring, int\u003e moons = new Dictionary\u003cstring, int\u003e(); moons.Add(\"Mercury\", 0); moons.Add(\"Venus\", 0); moons.Add(\"Earth\", 1); moons.Add(\"Mars\", 2); moons.Add(\"Jupiter\", 79); moons.Add(\"Saturn\", 82); moons.Add(\"Uranus\", 27); moons.Add(\"Neptune\", 14);Dictionary Methods and Properties Count Returns the number of items in the dictionary, as an int.\nmoons.CountReturns 8.\nKeys Returns a collection containing all keys in the dictionary. This collection may be used in a foreach loop just as lists are, but the dictionary may not be modified within such a loop.\nmoons.KeysReturns {\"Earth\", \"Mars\", \"Neptune\", \"Jupiter\", \"Saturn\", \"Venus\", \"Uranus\", \"Mercury\"}\nValues Returns a collection containing all values in the dictionary. This collection may be used in a foreach loop just as lists are.\nmoons.ValuesReturns {1, 2, 14, 79, 82, 0, 27, 0}\nAdd() Add a key/value pair to a dictionary.\nmoons.Add(\"Pluto\", 5)adds \"Pluto\": 5 to the moons\nContainsKey() Returns a boolean indicating whether or not the dictionary contains a given key.\nmoons.ContainsKey(\"Earth\")Returns true\nContainsValue() Returns a boolean indicating whether or not the dictionary contains a given value.\nmoons.ContainsValue(79)Returns true\nWe have only brushed the surface of how arrays, Lists, and dictionaries work. We leave it to you to refer to the official documentation linked below for more details. You’ll certainly be using Lists and dictionaries in more ways than those covered in this lesson, but with the knowledge you have now, you should be able to use C# collections and learn new uses as you go.\nCheck Your Understanding Question Given our Dictionary,\n1 2 3 4 5 6 7 8 9 10 moons = { \"Mercury\" = 0, \"Venus\" = 0, \"Earth\" = 1, \"Mars\" = 2, \"Jupiter\" = 79, \"Saturn\" = 82, \"Uranus\" = 27, \"Neptune\" = 14 } What is the syntax to get the key names?\nDictionary.Keys(moons); moons.Keys(); moons.Keys; moons.KeySet(); Question Given our Dictionary,\n1 2 3 4 5 6 7 8 9 10 moons = { \"Mercury\" = 0, \"Venus\" = 0, \"Earth\" = 1, \"Mars\" = 2, \"Jupiter\" = 79, \"Saturn\" = 82, \"Uranus\" = 27, \"Neptune\" = 14 } What will moons[“Mars”]; return?\n2 {Mars: 2} 2.0 \"Mars\" ",
    "description": "C# also provides us a structure to store data as key/value pairs. C# calls these objects dictionaries, and they are provided by the Dictionary class.\nConsidering the gradebook example, we can improve our program using a dictionary. We’ll store the students’ grades along with their names in the same data structure. The names will be the keys, and the grades will be the values.\nAs with the other collection structures, in C# we must specify the types of the objects we’ll be storing when we declare a variable or parameter to be a dictionary.",
    "tags": [],
    "title": "Dictionary",
    "uri": "/flow-collections/reading/dictionary/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives After completing this chapter, you should be able to do the following:\nWrite unit tests to verify the behavior of methods. Identify proper behaviors for which a test should be written. Know the importance of testing in creating well-functioning code. Use test-driven development to define the behavior of code before writing it, and to ensure that code is properly tested. Using MSTest to create unit tests. Key Terminology As you work through this chapter, you should make note of the terms on the following pages:\nTesting in C# Automated Testing Unit Testing MSTest MSTest Refactor Test-driven Development TDD TestClass TestMethod Attributes Dependency Test Runner [TestInitialize] [TestCleanup] Content Links Reading Exercises Studio Next Steps ",
    "description": "Learning Objectives After completing this chapter, you should be able to do the following:\nWrite unit tests to verify the behavior of methods. Identify proper behaviors for which a test should be written. Know the importance of testing in creating well-functioning code. Use test-driven development to define the behavior of code before writing it, and to ensure that code is properly tested. Using MSTest to create unit tests. Key Terminology As you work through this chapter, you should make note of the terms on the following pages:",
    "tags": [],
    "title": "Chapter 6: Unit Testing",
    "uri": "/unit-testing/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 4: Classes \u003e Reading",
    "content": "As we wrap up our whirlwind tour of classes, we want you think a bit about how to go about building good classes. Doing so is more of an art than a science, and it will take you lots of practice and time. However, there are a few rules that we’ve pointed out to help guide you. Here’s one more.\nFrom Wikipedia :\nThe single responsibility principle states that every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.\nIt isn’t always clear what “responsibility over a single part of the functionality” means. However, it is often very clear what it doesn’t mean. For example, we wouldn’t think of adding functionality to the Student class that tracked all of the data for each of the student’s classes, such as catalog number, instructor, and so on. Those are clearly different areas of responsibility. One way to interpret the single responsibility principle is to say that “classes should be small.”\nAs you go forth and create classes, the main thing to keep in mind is that your skill and judgement in creating C# classes will improve over time. The best way to improve is to write lots of code, ask lots of questions, and continue learning.\nIf you are interested in learning more about the Single Responsibility Principle, you can check out the entry on Wikipedia .",
    "description": "As we wrap up our whirlwind tour of classes, we want you think a bit about how to go about building good classes. Doing so is more of an art than a science, and it will take you lots of practice and time. However, there are a few rules that we’ve pointed out to help guide you. Here’s one more.\nFrom Wikipedia :\nThe single responsibility principle states that every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.",
    "tags": [],
    "title": "Single Responsibility Principle",
    "uri": "/classes/reading/srp/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 2: TechJobs (Object-Oriented Edition)",
    "content": " Warning Due to the fact that this code is being auto-graded as you work through it, make sure that you use any and all names for classes, variables, methods, etc provided to you in these directions.\nTo display the data for a particular Job object, you need to implement a custom ToString() method. Rather than creating this method and then testing it, you will flip that process using TDD.\nCreate First Test for ToString() Before writing your first test, consider how we want the method to behave:\nWhen passed a Job object, it should return a string that contains a blank line before and after the job information. The string should contain a label for each field, followed by the data stored in that field. Each field should be on its own line. There should be a new line between each job listing.\n1 2 3 4 5 6 7 8 9 10 ID: _______ Name: _______ Employer: _______ Location: _______ Position Type: _______ Core Competency: _______ ID: _______ //... more job objects to follow If a field is empty, the method should add, “Data not available” after the label. We will need three tests to test our ToString method.\nTest 1: TestToStringStartsAndEndsWithNewLine In JobTests, add a new test called TestToStringStartsAndEndsWithNewLine to check the first requirement (item 1 in the above list), then run that test (it should fail).\nWarning Only run the unit tests in the JobTests class as you work through this Task.\nIf you were to run the auto-graded tests right now, you will not pass them even if your own unit tests pass. Once you have all 3 unit tests completed, we will ask you to run the auto-graded tests. Please make sure you are running the correct tests.\nCode ToString() to Pass Test 1 In the Job class, create a ToString() method that passes the first test. Since the test only checks if the returned string starts and ends with a blank line, make that happen.\nTip Do NOT add anything beyond what is needed to make the test pass. You will add the remaining behaviors for ToString() as you code each new test.\nTest 2: TestToStringContainsCorrectLabelsAndData Code a new test for the second required behavior, then run the tests to make sure the new one fails. Call this test TestToStringContainsCorrectLabelsAndData.\nModify ToString() to make the new test pass. Also, make sure that your updates still pass all of the old tests.\nContinue this test-refactor cycle until all of the behaviors we want for ToString() work. Remember to add only ONE new test at a time.\nTest 3: TestToStringHandlesEmptyField Code your final test for the last required behavior, then run the tests to make sure the new one fails. Call this test TestToStringHandlesEmptyField.\nModify ToString() to make the new test pass. Also, make sure that your updates still pass all the old tests.\nCool! Your Job class is now complete and operates as desired.\nRun TestTask5 tests Uncomment the tests inside the TestTask5class. Look for the TODOs to help you find the multi-line comments marks.\nRun your TestTask5 unit tests.\nRefactor your code as needed.\nDo not start Task 6 until you have passed all of Task 5’s auto-grading unit tests.\nTip Now would be a good time to save, commit, and push your work up to GitHub.\nOn to Task 6 .",
    "description": "Warning Due to the fact that this code is being auto-graded as you work through it, make sure that you use any and all names for classes, variables, methods, etc provided to you in these directions.\nTo display the data for a particular Job object, you need to implement a custom ToString() method. Rather than creating this method and then testing it, you will flip that process using TDD.",
    "tags": [],
    "title": "Task 5: Use TDD to Build The ToString() Method",
    "uri": "/assignments/tech-jobs-oo/task-5/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments",
    "content": "Next Steps After completing the assignments for this course, you will be ready to make your own project as part of the next unit. The next unit focuses on interviewing, resumes, and how you can expand upon the skills you learned throughout the first two units to build a personal project to share with potential employers.",
    "description": "Next Steps After completing the assignments for this course, you will be ready to make your own project as part of the next unit. The next unit focuses on interviewing, resumes, and how you can expand upon the skills you learned throughout the first two units to build a personal project to share with potential employers.",
    "tags": [],
    "title": "Next Steps",
    "uri": "/assignments/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 19: Authentication \u003e Reading",
    "content": "While this chapter is focused on authentication, you may find yourself wanting to use Identity to limit pages to logged-in users Authorization allows us to restrict access to pages by allowing only logged in users to see them. While this can be a very complex process, ASP.NET has two simple attributes that allow us to restrict access to pages to only logged in users.\n[Authorize] is an attribute that limits access to content to only logged in users. [Authorize] can be used for a specific method or a whole controller.\n[AllowAnonymous] is an attribute that allows any viewer to access content. This is the default state, so [AllowAnonymous] is oftentimes used in conjunction with [Authorize].\nIn CodingEvents, we may only want to allow logged-in users to add an event. We can add [Authorize] at the controller level to prevent any anonymous users from accessing those pages.\n1 2 3 4 5 [Authorize] public class EventsController : Controller { // Controller code here! } Why do this? Because giving all users the ability to add, edit, or delete events can cause trouble.\nHowever, we do want to give all users the ability to view the events. That is where [AllowAnonymous] comes in. We can update the controller so that the Index view is accessible to everyone like so:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [Authorize] public class EventsController : Controller { private EventDbContext context; public EventsController(EventDbContext dbContext) { context = dbContext; } [AllowAnonymous] // GET: /\u003ccontroller\u003e/ public IActionResult Index() { List\u003cEvent\u003e events = context.Events .Include(e =\u003e e.Category) .ToList(); return View(events); } // Other action methods here! } Now every user can see available events, but only logged-in users can add, edit, or delete events!",
    "description": "While this chapter is focused on authentication, you may find yourself wanting to use Identity to limit pages to logged-in users Authorization allows us to restrict access to pages by allowing only logged in users to see them. While this can be a very complex process, ASP.NET has two simple attributes that allow us to restrict access to pages to only logged in users.\n[Authorize] is an attribute that limits access to content to only logged in users.",
    "tags": [],
    "title": "Identity and Authorization",
    "uri": "/authentication/reading/identity-authorization/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping \u003e Reading",
    "content": "The following video walkthrough is all of the steps included in the many-to-many relationship section.\nThe many-to-many video uses the following github repository some-setup branch ",
    "description": "The following video walkthrough is all of the steps included in the many-to-many relationship section.\nThe many-to-many video uses the following github repository some-setup branch ",
    "tags": [],
    "title": "Walkthrough: Many-to-Many",
    "uri": "/relationships-or-mapping/reading/m2m-walkthrough/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views \u003e Reading",
    "content": "Already we have seen that templates allow us to build generic forms. Using templates, you can reuse the structure by rendering the same form, but with different labels and data. Thus, a single form can serve different purposes, saving you extra effort.\nWhenever possible, reuse existing templates!\nStarting a New Project: Coding Events You will build a new project so you can practice with templates and forms. If you have not done so, commit and push any unsaved work from your HelloASPDotNET project.\nYour new project will keep track of some coding events, such as meetups and conferences. To get started, follow the steps you took to create HelloASPDotNET, but call the project CodingEvents.\nCodingEvents Setup In the Controllers directory, create a new controller named EventsController.\nIn the new controller, create an Index action method for GET requests.\nWithin the action method, create an empty List and add a few event names to it. Example 13 14 15 16 17 18 19 20 [HttpGet] public IActionResult Index() { List\u003cstring\u003e Events = new List\u003cstring\u003e(); //Add some events to the List //...code continues } Add the List to ViewBag. Then return the corresponding view. Example 13 14 15 16 17 18 19 [HttpGet] public IActionResult Index() { //...code continues ViewBag.events = Events; return View(); } Within the Views directory, create a new directory named Events. Within this directory, create a new view named Index.cshtml.\nWithin the new template, loop over the List and display the name of each event. Example 8 9 10 11 12 13 \u003cul\u003e @foreach (string e in ViewBag.events) { \u003cli\u003e@e\u003c/li\u003e } \u003c/ul\u003e Create and Render a Form A Razor form can be made simply with a template that includes a \u003cform\u003e element. The method for the form should be of type post.\n1 2 3 4 5 6 7 8 \u003c!-- Other HTML --\u003e \u003cform method=\"post\"\u003e \u003cinput type=\"text\" name=\"inputName\"\u003e \u003cinput type=\"submit\" value=\"submitButtonText\"\u003e \u003c/form\u003e \u003c!-- Other HTML --\u003e You can include as many inputs as you need in the form, and these can be of different types (e.g. text, email, checkbox, etc.). However, each different piece of data you want to collect needs to have a unique name attribute.\nTo render the form in the view, add a method to the controller with an [HttpGet] annotation.\n1 2 3 4 5 6 7 [HttpGet] public IActionResult Add() { // Any additional method code here return View(); } Note If the action attribute in the \u003cform\u003e tag leads to the same route as the form is being rendered at, you do not have to include an action attribute.\nCreate Add Method and View to CodingEvents Create a new View for the EventsController called Add.\nInside the Add view, create a form that takes one input of type text, and has a name of “name”. Create a second input of type “submit” and with a value “Add Event”. Example 1 2 3 4 \u003cform method=\"post\"\u003e \u003cinput name=\"name\" type=\"text\" /\u003e \u003cinput type=\"submit\" value=\"Add Event\" /\u003e \u003c/form\u003e In the EventsController, create a new action method called Add. Example 1 2 3 4 5 [HttpGet] public IActionResult Add() { return View(); } Handling Form Submission In this application, we are storing the name of events inside a list. The Add view contains a form to capture events names, but the Add method only renders the form. It does not process the data.\nTo process a form after the user clicks the Submit button, you need to add a method to the controller using the [HttpPost] annotation. This method also needs a way to handle any data it captures.\nThe NewEvent Action Method In CodingEvents let’s create a new action method called NewEvent which will handle the data provided by a user. In this app, we are asking a user to provide a name of an event related to coding. After a user submits the form, the ideal outcome would be to see and updated list containing that new item. We need to return something other than a View for this.\nWe can Redirect the path back to the /Events view to see the new list item.\nWe could start creating our NewEvent method like this:",
    "description": "Already we have seen that templates allow us to build generic forms. Using templates, you can reuse the structure by rendering the same form, but with different labels and data. Thus, a single form can serve different purposes, saving you extra effort.\nWhenever possible, reuse existing templates!\nStarting a New Project: Coding Events You will build a new project so you can practice with templates and forms. If you have not done so, commit and push any unsaved work from your HelloASPDotNET project.",
    "tags": [],
    "title": "Razor Forms",
    "uri": "/razor-views/reading/razor-forms/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Major Concepts After completing this chapter, you should be able to do the following:\nUnderstand what inheritance is and how programmers can use it. Understand what abstract classes and methods are. Learn how to formally diagram classes and the relationships between classes. Key Terminology As you read through this chapter, look for the following key words.\nInheritance Inheritance Subclassing Inheritance in C# Extends Subclass Derived class Child class Superclass Base class Parent class A Tale of Two Cats base no-argument constructor no-arg constructor override method overriding Inheriting from Abstraction Abstraction abstract Abstract class Abstract method Casting Runtime exception Polymorphism Class Diagrams Class diagrams One-to-One Relationship One-to-Many Relationship Table of Contents Reading Exercises: Inheritance Studio: Fun With Quizzes Next Steps ",
    "description": "Major Concepts After completing this chapter, you should be able to do the following:\nUnderstand what inheritance is and how programmers can use it. Understand what abstract classes and methods are. Learn how to formally diagram classes and the relationships between classes. Key Terminology As you read through this chapter, look for the following key words.\nInheritance Inheritance Subclassing Inheritance in C# Extends Subclass Derived class Child class Superclass Base class Parent class A Tale of Two Cats base no-argument constructor no-arg constructor override method overriding Inheriting from Abstraction Abstraction abstract Abstract class Abstract method Casting Runtime exception Polymorphism Class Diagrams Class diagrams One-to-One Relationship One-to-Many Relationship Table of Contents Reading Exercises: Inheritance Studio: Fun With Quizzes Next Steps ",
    "tags": [],
    "title": "Chapter 7: Inheritance",
    "uri": "/inheritance/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 7: Inheritance \u003e Reading",
    "content": "We have mentioned a few times the importance of designing your classes before starting to write code. It’s important to think about the fields, properties, and methods of your classes, as well as the relationship of your various classes to each other. Doing so will not only result in better code, but will also mean that you’re less likely to have to rewrite your code due to lack of foresight.\nClass diagrams are informal tools for sketching out class design. They are often discussed in the context of the Unified Modeling Language , but most programmers use them much less formally. This will be our approach as well.\nWe’ll introduce you to a few accepted conventions used when drawing class diagrams. These guidelines are by no means comprehensive, and they should not be thought of as rigid rules. There’s no compiler to yell at you for not drawing a class diagram properly! Instead, we encourage you to use class diagrams as planning and communication tools. Use whichever of the conventions you choose, based on your needs.\nClass diagrams can be created within some IDEs (including Visual Studio) and with specialized software. However, most of the time you’ll be drawing them by hand, so that’s what we’ll do here.\nNote Describing how to install and use software to create class diagrams is beyond the scope of this book. That said, drawing class diagrams by hand is still quick and immensely satisfying!\nDiagramming a Single Class In diagramming a single class, we create a box and divide it into three sections:\nTop: Class name Middle: Fields Bottom: Properties and Methods For fields and properties, we can specify additional useful information, such as access level and data type. For methods, we can similarly specify access level, return type, and input parameter types. We will often use “+” as shorthand for public, and “-” as shorthand for private. If we want to indicate that some methods or fields are omitted, we can use ellipses “…”.\nDiagramming Class Relationships What’s even more useful than just diagramming a single class is diagramming the relationships between the classes within our programs.\nSuppose we are designing a program to track students and the classes that they have taken. We might think about three classes:\nStudent: Represents an individual student Transcript: Represents a student’s transcript, including classes that they have taken CourseRecord: Represents an individual course that a student has completed, along with the grade achieved. We can represent these three classes and their relationships to each other in the following diagram:\nSince, in this situation, we’re only concerned with their relationships, we’ve omitted the fields and methods of these classes. The lines between each are different, and convey different information.\nA plain, solid line between two classes indicates a one-to-one relationship. For each Student, there is one Transcript, and a Transcript can be owned by only one Student.\nA line with an open diamond on the end indicates a one-to-many relationship. Each Transcript has many CourseRecord objects.\nAnother type of relationship that we have recently encountered is the is-a relationship of inheritance. This can be expressed via a class diagram by using an arrow, directed from the subclass to the base class.\nThere are many more ways to express relationships in class diagrams, and you’ll even see slight variations in usage of lines and the decorators used to specify the type of relationship.\nFor most purposes, your main concern should be visually communicating information about your program design. To that end, if you are going to share your diagram with somebody else, it is always helpful to use a key to indicate the specific meaning you have attached to each symbol used.\nIf you’d like to learn a bit more about informal class diagrams, we’ve collected some short, relevant videos .\nCheck Your Understanding Question With pen and paper, write a class diagram that depicts the relationship between a class Rocket, that extends a SpaceCraft and has a LaunchPad and several Engine objects. Include some fields and methods.\nTrue/False: You drew a class diagram by hand.\nQuestion True/False: When making class diagrams, the main idea is to get the design rules just right so that you won’t need to update your classes in the future.",
    "description": "We have mentioned a few times the importance of designing your classes before starting to write code. It’s important to think about the fields, properties, and methods of your classes, as well as the relationship of your various classes to each other. Doing so will not only result in better code, but will also mean that you’re less likely to have to rewrite your code due to lack of foresight.",
    "tags": [],
    "title": "Class Diagrams",
    "uri": "/inheritance/reading/class-diagrams/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 3: Control Flow \u0026 Collections",
    "content": "Control Flow and Collections You will be working in the csharp-web-dev-exercises repository. Each section will provide you with the project you will need.\nArray Practice Using the Arrays project in the Exercises repo complete the following:\nCreate and initialize an array with the following values in a single line:\n1, 1, 2, 3, 5, 8 Loop through the array and print out each value.\nCheck your solution foreach(int num in numberArray) { Console.WriteLine(num); }Remember: this is not the only way to loop through an array.\nModify the loop to only print the odd numbers from the array.\nString Practice Using the Strings project in the Exercises repo complete the following:\nFor this exercise, create a string for the value:\nI would not, could not, in a box. I would not, could not with a fox. I will not eat them in a house. I will not eat them with a mouse. Use the Split method to divide the string at each space and store the individual words in an array. If you need to review the method syntax, look back at the string methods table.\nPrint the array of words to verify that your code works. The syntax is:\nConsole.WriteLine(string.Join(\",\", arrayName)); Check your solution string sentence = \"I would not, could not, in a box. I would not, could not with a fox. I will not eat them in a house. I will not eat them with a mouse.\"; string[] words = sentence.Split(\" \"); Console.WriteLine(string.Join(\",\", words)); Repeat steps 2 and 3, but change the delimiter to split the string into separate sentences.\nList Practice Using the Lists project in the Exercises repo complete the following:\nWrite a static method to find the sum of all the even numbers in a List.\nCheck your solution static int sumEven(List\u003cint\u003e arr) { int total = 0; foreach (int integer in arr) { if (integer % 2 == 0) { total += integer; } } return total; } Create a list with at least 10 integers and call your method on the list.\nWrite a static method to print out each word in a list that has exactly 5 letters.\nCheck your solution static void printFiveLetterWords(List\u003cstring\u003e wordlist) { foreach (string word in wordlist) { if (word.Length == 5) { Console.WriteLine(word); } } } Modify your code to prompt the user to enter the word length for the search.\nCheck your solution Console.WriteLine(\"Enter a word length: \"); string numInput = Console.ReadLine(); int numChars = int.Parse(numInput); // Call the method to print out list words of the chosen length: printXLetterWords(wordList, numChars); static void printXLetterWords(List\u003cstring\u003e wordlist, int length) { foreach (string word in wordlist) { if (word.Length == length) { Console.WriteLine(word); } } } Dictionary Practice Using the Dictionaries project in the Exercises repo complete the following:\nMake a program similar to GradebookDictionary that does the following:\nIt takes in student names and ID numbers (as integers) instead of names and grades. Check your solution Console.WriteLine(\"Enter your students' names and ID numbers (or ENTER to finish):\"); Console.WriteLine(\"Student Name: \"); newStudent = Console.ReadLine(); if (newStudent!= \"\") { Console.WriteLine(\"ID: \"); int newID = int.Parse(Console.ReadLine()); students.Add(newID, newStudent); } The keys should be the IDs and the values should be the names. Check your solution Console.WriteLine(\"\\nClass roster:\"); foreach (KeyValuePair\u003cint, string\u003e student in students) { Console.WriteLine(student.Value + \"'s ID: \" + student.Key); } Console.WriteLine(\"Number of students in roster: \" + students.Count);Review the Array and List Gradebooks to see how they used loops\nModify the roster printing code accordingly.\nBonus Mission Update your solution from the List Practice section above to use the string from the String Practice section. Search “C# convert string to list” online to see how to split a string into the more flexible List collection.",
    "description": "Control Flow and Collections You will be working in the csharp-web-dev-exercises repository. Each section will provide you with the project you will need.\nArray Practice Using the Arrays project in the Exercises repo complete the following:\nCreate and initialize an array with the following values in a single line:\n1, 1, 2, 3, 5, 8 Loop through the array and print out each value.\nCheck your solution foreach(int num in numberArray) { Console.",
    "tags": [],
    "title": "Exercises",
    "uri": "/flow-collections/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 2: TechJobs (Object-Oriented Edition)",
    "content": " Warning Due to the fact that this code is being auto-graded as you work through it, make sure that you use any and all names for classes, variables, methods, etc provided to you in these directions.\nReview the code in the Employer, Location, CoreCompetency, and PositionType classes. What similarities do you see?\nThere is a fair amount of repetition between the classes. As a good coder, anytime you find yourself adding identical code in multiple locations you should consider how to streamline the process. DRY = “Don’t Repeat Yourself”.\nCreate a Base Class Let’s move all of the repeated code into a separate class. We will then have Employer, Location, CoreCompetency, and PositionType inherit this common code.\nCreate a new class called JobField. Consider the following questions to help you decide what code to put in the JobField class: What fields do ALL FOUR of the classes have in common? Which constructors are the same in ALL FOUR classes? Which custom methods are identical in ALL of the classes? In JobField, declare each of the common class members. Code the constructors. Add in any inherited method overrides. Finally, to prevent the creation of a JobField object, make this class abstract. Extend JobField into Employer Now that you have the common code located in the JobField file, we can modify the other classes to reference this shared code. Let’s begin with Employer.\nModify line 4 to extend the JobField class into Employer. Next, remove any code in Employer that matches code from JobField (e.g. the Id and Value properties and the nextId field are shared). Remove any of the methods that are identical. The empty constructor is shared, but not the second. Replace the two constructors with the following: ",
    "description": "Warning Due to the fact that this code is being auto-graded as you work through it, make sure that you use any and all names for classes, variables, methods, etc provided to you in these directions.\nReview the code in the Employer, Location, CoreCompetency, and PositionType classes. What similarities do you see?\nThere is a fair amount of repetition between the classes. As a good coder, anytime you find yourself adding identical code in multiple locations you should consider how to streamline the process.",
    "tags": [],
    "title": "Task 6: Refactor to DRY the Support Classes",
    "uri": "/assignments/tech-jobs-oo/task-6/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views \u003e Reading",
    "content": "Earlier in the lesson , we touched upon the role of _Layout.cshtml. When we set Layout to null, the header, footer, and Bootstrap disappear from our site and we are left with static HTML. _Layout is in the Shared directory of the Views directory. Files inside this Shared directory are used sitewide and can be accessed by the templates we create when we are working with our controllers. These files help us DRY our code.\nLayout pages Whenever we create a new project, we get one layout page, _Layout.cshtml, and this file contains links to Bootstrap. Layout pages in ASP.NET MVC focus on the header and footer of the site. The header and footer of our site when we first create it contains links to important info like a privacy statement. As you work on your application, you may want your header and footer for each page to include your own privacy statement or a contact page. When you make updates to _Layout, every template in the application using _Layout reflects the updates you have made.\nPartial Views If you want to create repeatable elements of your webpage that are contained within the main body of the page, you can use a partial view. Partial views are blocks of HTML elements that we want to use across multiple templates.\nMaking a Partial View Let’s assume that you want to add the same set of links to multiple pages within your web project.\n1 2 3 \u003ca href = \"https://www.launchcode.org\"\u003eLaunchCode\u003c/a\u003e \u003cbr/\u003e \u003ca href = \"https://www.lego.com\"\u003ePlay Well\u003c/a\u003e \u003cbr/\u003e \u003ca href = \"https://www.webelements.com\"\u003eOther Building Blocks\u003c/a\u003e Instead of pasting this code into every template, we will store the HTML in a separate file.\nCreate a new view inside the Shared folder and give it a clear name, such as _LinkListPartial.cshtml. Tip If the partial view you are creating is only going to be used for the views for one controller, you can put the partial view in the controller’s folder in the Views directory.\nAdd the code to your file and save!\nWe can now pull our partial view into any template in our project.\n\u003cpartial\u003e This tag helper does just what the name implies—it replaces the tag that contains it with the selected partial view.\nNow let’s see how to pull a partial view into a template:\n1 2 3 4 5 \u003c!-- template code --\u003e \u003cpartial name=\"/Views/Shared/_LinkListPartial.cshtml\" /\u003e \u003c!-- more template code --\u003e When the code runs, the name attribute in the \u003cpartial\u003e tag helper gives the path to the partial view. In the example above, the partial view is named _LinkListPartial.cshtml and is in the Shared folder in the Views directory. The code inside the partial view is then rendered as part of the HTML page.\nCheck Your Understanding Question Given our code in _LinkListPartial.cshtml, which is stored in the Events directory:\n1 2 3 \u003ca href = \"https://www.launchcode.org\"\u003eLaunchCode\u003c/a\u003e \u003cbr/\u003e \u003ca href = \"https://www.lego.com\"\u003ePlay Well\u003c/a\u003e \u003cbr/\u003e \u003ca href = \"https://www.webelements.com\"\u003eOther Building Blocks\u003c/a\u003e Which of the following would place the partial view inside a \u003cdiv\u003e element in the template?\n\u003cdiv name=\"Views/Events/_LinkListPartial.cshtml\"\u003e\u003c/div\u003e \u003cdiv\u003e\u003cpartial\u003eViews/Events/_LinkListPartial\u003c/div\u003e \u003cdiv\u003e\u003cpartial name=\"/Views/Events/_LinkListPartial.cshtml\" /\u003e\u003c/div\u003e \u003cp\u003e\u003cdiv partial=\"/Views/Events/_LinkListPartial.cshtml\"\u003e\u003c/div\u003e\u003c/p\u003e ",
    "description": "Earlier in the lesson , we touched upon the role of _Layout.cshtml. When we set Layout to null, the header, footer, and Bootstrap disappear from our site and we are left with static HTML. _Layout is in the Shared directory of the Views directory. Files inside this Shared directory are used sitewide and can be accessed by the templates we create when we are working with our controllers. These files help us DRY our code.",
    "tags": [],
    "title": "The Shared Directory",
    "uri": "/razor-views/reading/shared-directory/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives After completing this chapter, you should be able to do the following:\nUnderstand how polymorphism is enabled by interfaces and inheritance. Understand and use interfaces to create more flexible code. Key Terminology As you read through this chapter, you should make note of the following terms in the each section.\nIntroduction polymorphism Interfaces interfaces method signature default methods Content Links Reading Exercises Studio: Spinning Discs Next Steps ",
    "description": "Learning Objectives After completing this chapter, you should be able to do the following:\nUnderstand how polymorphism is enabled by interfaces and inheritance. Understand and use interfaces to create more flexible code. Key Terminology As you read through this chapter, you should make note of the following terms in the each section.\nIntroduction polymorphism Interfaces interfaces method signature default methods Content Links Reading Exercises Studio: Spinning Discs Next Steps ",
    "tags": [],
    "title": "Chapter 8: Interfaces and Polymorphism",
    "uri": "/interfaces-and-polymorphism/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 7: Inheritance",
    "content": "Work on these exercises in a new Visual Studio .NET Core console app. Name your solution Technology and make a project inside of it with the same name.\nClass Design Create three classes inside your solution: Computer, Laptop, and SmartPhone\nBefore you start coding anything inside these classes, diagram how the three classes are going to be related to each other. You can start with the diagram below. Be sure to show how the base class extends each subclass.\nclassDiagram Computer -- Smartphone Computer -- Laptop Check your solution The Computer class extends Laptop and Smartphone.\nArrows should point towards Computer class.\nRemember to add properties and methods to your diagram.\nFor a parent class: add 3 fields, 2 methods, and a constructor.\nCheck your solution The fields and methods selected for these examples can differ from your fields and methods.\npublic class Computer { public double Ram { get; set; } public double Storage { get; set; } public readonly bool hasKeyboard; public Computer(double ram, double storage, bool hasKeyboard) { Ram = ram; Storage = storage; this.hasKeyboard = hasKeyboard; } public double IncreaseRam(double extraRam) { return Ram += extraRam; } public double IncreaseStorage(double extraStorage) { return Storage += extraStorage; } } For a child class: add at least 1 additional field and 1 additional method.\nCheck your solution Here is a possible Laptop class.\npublic class Laptop : Computer { public double Weight { get; set; } public Laptop(double ram, double storage, bool hasKeyboard, double weight) : base(ram, storage, hasKeyboard) { Weight = weight; } public bool IsClunky() { if (Weight \u003e 5.0) { return true; } else { return false; } } } Check your solution Here is a possible Smartphone class.\npublic class SmartPhone : Computer { public int NumberOfSelfies { get; set; } public SmartPhone(int ram, int storage, bool hasKeyboard, int numberOfSelfies) : base(ram, storage, hasKeyboard) { NumberOfSelfies = numberOfSelfies; } public void TakeSelfie() { NumberOfSelfies++; } } At least one of your fields should be either static, readonly, or a const.\nCheck your solution ",
    "description": "Work on these exercises in a new Visual Studio .NET Core console app. Name your solution Technology and make a project inside of it with the same name.\nClass Design Create three classes inside your solution: Computer, Laptop, and SmartPhone\nBefore you start coding anything inside these classes, diagram how the three classes are going to be related to each other. You can start with the diagram below. Be sure to show how the base class extends each subclass.",
    "tags": [],
    "title": "Exercises: Inheritance",
    "uri": "/inheritance/exercises/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 3: Control Flow \u0026 Collections",
    "content": "Counting Characters In this studio, you will write a program to count the number of times each character occurs in a string and then print the results to the console\nGetting Started Create your own project from scratch. Review Creating a C# Project if you need to.\nSome Items to Ponder Before Coding There are multiple ways to approach this task, but one way involves the following steps:\nLoop through the string one character at a time, Store and/or update the count for a given character using an appropriate data structure. Loop through the data structure to print the results (one character and its count per line). Which type of data structure (List, Array, or Dictionary) should you use to store character counts? Any of these options would work, but using one of these data structures will optimize your code’s efficiency.\nYou’ll need to initialize the counts for the characters in some fashion. It’s probably better to do this as you go through the string instead of doing so before you loop through it. (WHY?)\nIf you need to review how to create a new class, revisit the Hello Methods program.\nDon’t forget to check out the Bonus Missions below.\nTip Remember, you can turn a string object into an array of characters using:\nchar[] charactersInString = myString.ToCharArray(); Sample Input Feel free to prompt the user for a string. However, for the sake of simplicity, you might want to start by hard-coding some text and storing it in a variable. For your convenience, here is some lorem ipsum text:\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc accumsan sem ut ligula scelerisque sollicitudin. Ut at sagittis augue. Praesent quis rhoncus justo. Aliquam erat volutpat. Donec sit amet suscipit metus, non lobortis massa. Vestibulum augue ex, dapibus ac suscipit vel, volutpat eget massa. Donec nec velit non ligula efficitur luctus.Sample Output For the example string above, your output should look something like:\nL: 1 o: 15 r: 9 e: 26 m: 11 : 50 i: 27 p: 7 s: 29 u: 28 d: 4 l: 17 t: 29 a: 22 ,: 4 c: 17 n: 14 g: 7 .: 8 N: 1 q: 3 U: 1 P: 1 h: 1 j: 1 A: 1 v: 4 D: 2 b: 3 V: 1 x: 1 f: 2Bonus Missions Try these modifications on your code:\nPrompt the user to enter the string in the command line. Make the character counts case-insensitive. Exclude non-alphabetic characters. Super Bonus Read the string in from a file.\nNote This is a hard one. We won’t talk about reading from files in C# in this course, so be ready for a tough challenge if you accept this mission.",
    "description": "Counting Characters In this studio, you will write a program to count the number of times each character occurs in a string and then print the results to the console\nGetting Started Create your own project from scratch. Review Creating a C# Project if you need to.\nSome Items to Ponder Before Coding There are multiple ways to approach this task, but one way involves the following steps:\nLoop through the string one character at a time, Store and/or update the count for a given character using an appropriate data structure.",
    "tags": [],
    "title": "Studio",
    "uri": "/flow-collections/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Assignments \u003e Assignment 2: TechJobs (Object-Oriented Edition)",
    "content": "Sanity Check Once you finish all of the tasks outlined above, all that remains is to check the console display.\nSally has provided some commented-out code in RunTechJobs.cs that prints out a small list of Job objects. Go ahead and activate this code and run it. Properly done, your output should look something like the following:\nID: 1 Name: Product tester Employer: ACME Location: Desert Position Type: Quality control Core Competency: Persistence ID: 2 Name: Web Developer Employer: LaunchCode Location: St. Louis Position Type: Front-end developer Core Competency: JavaScript ID: 3 Name: Ice cream tester Employer: Data not available Location: Home Position Type: UX Core Competency: Tasting abilityExcellent! You successfully shifted the old console app into a more useful object-oriented configuration.\nNow that the new structure is ready, another team member can refactor the import and display methods from the previous assignment to use the new classes. Once these are ready, our team will refine the search features and move the app online to provide a better user interface.\nHow to Submit Stage, Commit, and Push to GitHub Classroom.\nVerify the results of your submission. Continue to work on your code until you pass all of the tests.\nCongrats! You have successfully completed C# Graded Assignment 2: Tech Jobs Object-Oriented Edition!",
    "description": "Sanity Check Once you finish all of the tasks outlined above, all that remains is to check the console display.\nSally has provided some commented-out code in RunTechJobs.cs that prints out a small list of Job objects. Go ahead and activate this code and run it. Properly done, your output should look something like the following:\nID: 1 Name: Product tester Employer: ACME Location: Desert Position Type: Quality control Core Competency: Persistence ID: 2 Name: Web Developer Employer: LaunchCode Location: St.",
    "tags": [],
    "title": "Final Steps",
    "uri": "/assignments/tech-jobs-oo/final-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views \u003e Reading",
    "content": "Previously, we briefly saw that when adding a view, we inherited some CSS from the _Layout.cshtml file in the Shared directory. While every view we add for our action methods in the controllers inherits from this template, we can also add additional static resources, such as images, scripts, and styles.\nAdding Custom Styles In large applications, we may find more CSS files than just site.css. To add styles that only apply to the view we are currently working on, we can use the same \u003clink\u003e tag we normally do for a static HTML page.\nTwo things to keep in mind before we start adding our own CSS:\nWe need to take into account any CSS in site.css. This file contains the site-wide CSS and is included in _Layout. If we want to modify something for the whole site CSS-wise, this is a good place to start.\nWe need to organize and store our CSS files in the appropriate location, just as we need to do with other files in ASP.NET Core MVC. In our application, we have a wwwroot directory. Inside that directory, we can add CSS files to the css subdirectory. The wwwroot directory is the default location for static files so when the application is served, ASP.NET Core MVC can easily locate these files.\nNote Let’s say we add a custom CSS file to our application called custom.css and store this file in the css subdirectory in wwwroot. If we want to link to this file to use it for a view, we would use the following line of HTML.\n\u003clink rel=\"stylesheet\" type=\"text/css\" href=\"~/css/custom.css\"\u003eBecause we added our file to the css subdirectory inside the wwwroot directory, our link is simply \"~/css/custom.css\".\nAdd Custom Scripts We can also add custom JavaScript files the same way we add our CSS files. Inside the wwwroot directory, we can add JavaScript files to the js subdirectory.\nWhen adding custom scripts, we want to keep the same things in mind as when we adding custom CSS files. Our application includes site-wide JavaScript in site.js. If we want to override site-wide scripts, that is where we should start. If we want to add an additional script, we can add it in the js subdirectory inside wwwroot.\nExample We added an additional JavaScript script called custom.js and stored this file in the js subdirectory inside the wwwroot directory. To add this file to a view, we can use the following HTML.\n\u003cscript src=\"~/js/custom.js\"\u003e\u003c/script\u003e Adding Images to the Site We can also add images that we want to use to the wwwroot directory. To start, we need to create a new subdirectory called images. If we add an image called testimage.png to images, we can reference it in our view with the \u003cimg\u003e tag:\n\u003cimg src=\"~/images/testimage.png\"\u003e Question If we add an image called fluffy.jpg to the images directory inside of wwwroot, what is the path we could use for the src attribute in the \u003cimg\u003e tag?\n\"/Views/images/fluffy.jpg\" \"~/images/fluffy.jpg\" \"~/img/fluffy.jpg\" \"wwwroot/fluffy.jpg\" ",
    "description": "Previously, we briefly saw that when adding a view, we inherited some CSS from the _Layout.cshtml file in the Shared directory. While every view we add for our action methods in the controllers inherits from this template, we can also add additional static resources, such as images, scripts, and styles.\nAdding Custom Styles In large applications, we may find more CSS files than just site.css. To add styles that only apply to the view we are currently working on, we can use the same \u003clink\u003e tag we normally do for a static HTML page.",
    "tags": [],
    "title": "Static Resources",
    "uri": "/razor-views/reading/static-resources/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 7: Inheritance",
    "content": "For this studio, you will design and build a console program that allows the user to take a quiz. This means you will have to create some questions and get some input from the user.\nFirst, the questions. We want to be able to handle multiple types of questions:\nMultiple choice: A question with a fixed set of possible answers. A user can only select one answer and only one answer is correct.\nCheckbox: A question with a fixed set of possible answers. A user can select any number of answers and there is one correct combination of choices.\nTrue/False: A question that has a true/false answer.\nDesign In order to design your program, consider:\nWhat do these types of questions have in common? What makes these question types different? First, design a base class (called Question) that contains the common features, and design subclasses for each of the question types. For each question type be sure to include:\nClass name Fields and properties with access modifiers Methods with access modifiers Any inheritance relationship Should any of the classes be abstract? If so, should any of its methods be abstract?\nMake sure that there is functionality included to display the questions, to display the possible answers, and to check to see if the answer(s) is correct.\nThen design the Quiz class. A quiz has a list of questions, and we should be able to:\nAdd questions Run or carry out the quiz Grade the quiz Implementation Create a new Visual Studio console project and implement the design that you created. If you are unsure about your design, get some feedback by talking through it with a classmate before you start coding.\nPutting It All Together In Program.cs, the project should create several questions, present them to the user, accept the user’s responses, and then tell them whether their answers were correct or incorrect.\nCommit Your Work Push up your work to a new Github repository.\nBonus Missions Add a short answer question type that includes validation behavior to only allow the user to enter text with less than 80 characters.\nAdd a couple of more question types to your program:\nLinear scale: a question that allows the user to provide a numeric response within an integer scale, which may vary from question to question. For instance, it could be 1-3 for one linear scale question, and 1-5 for another.\nParagraph: Similar to a short answer, allows for responses of up to 500 characters.\nTest your non-abstract classes with a new MSTest project.",
    "description": "For this studio, you will design and build a console program that allows the user to take a quiz. This means you will have to create some questions and get some input from the user.\nFirst, the questions. We want to be able to handle multiple types of questions:\nMultiple choice: A question with a fixed set of possible answers. A user can only select one answer and only one answer is correct.",
    "tags": [],
    "title": "Studio: Fun With Quizzes",
    "uri": "/inheritance/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views \u003e Reading",
    "content": "Bootstrap is a commonly-used style library. It allows users to quickly apply its CSS style rules with class selectors. Style updates can add features or improve the usability of an application. For example, Bootstrap, and other styling libraries for that matter, use a standardized color scheme for items like clickable buttons. As the user of the helper library, you can apply the btn btn-primary classes to a button on your page and Bootstrap works behind the CSS scenes to render a blue button with white text in a legible font. For more customization, you could also choose which color you want all of the buttons labelled with btn-primary on your web page to be.\nStraight out of the box, Bootstrap helps developers to get their web apps well-styled without needing to spend much time writing custom CSS rules. The library also does some of the work of applying user-experience best-practices. The button class btn-danger for example, is defaulted to appear red, a color most associated with danger.\nImage of standard HTML buttons without CSS:\nSame buttons with Bootstrap:\nBootstrap is already included in the given _Layout.cshtml, which means that as long as your view is using that layout, you can access Bootstrap styling.\nBootstrap Layout Much of what makes Bootstrap a powerfully helpful and time-saving style library is the layout logic it contains. In brief, Bootstrap uses a grid system of elements labelled containers and rows that respond dynamically to the state of a web page. Grid elements are given a size label that dictates when an item will shift or change how it is rendered. Broadly speaking, the grid system helps developers write applications that work well on screens of various sizes. Once you play around with it, you’ll find that the grid layout can help you write apps that respond to more than just changes in window size.\nBootstrap Tables Bootstrap gives us some table styling that we can use to display events in CodingEvents. Some table styling is customizable, so read around Bootstrap’s site and explore adding different options to your table.\nBootstrap Forms Bootstrap offers a number of classes meant to decorate form elements . form-group helps organize items within a form so that inputs and corresponding labels stay visually connected. form-control can be applied to any type of form input to give it the Bootstrap style and look.\nCheck Your Understanding Question True/False: Style updates are considered refactoring, since they add no new features to a project, only make it look better.",
    "description": "Bootstrap is a commonly-used style library. It allows users to quickly apply its CSS style rules with class selectors. Style updates can add features or improve the usability of an application. For example, Bootstrap, and other styling libraries for that matter, use a standardized color scheme for items like clickable buttons. As the user of the helper library, you can apply the btn btn-primary classes to a button on your page and Bootstrap works behind the CSS scenes to render a blue button with white text in a legible font.",
    "tags": [],
    "title": "Bootstrap",
    "uri": "/razor-views/reading/bootstrap/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Major Concepts Learn about the Model-View-Controller (MVC) design pattern. Understand what ASP.NET Core is. How to initialize an MVC project using Visual Studio and ASP.NET Core. How to handle routing and write controllers in ASP.NET Core. Key Terminology Design Patterns, MVC, and ASP.NET, Oh My! Design patterns Model-View-Controller (MVC) Model View Controller ASP.NET ASP.NET Core Content Links Reading Next Steps ",
    "description": "Major Concepts Learn about the Model-View-Controller (MVC) design pattern. Understand what ASP.NET Core is. How to initialize an MVC project using Visual Studio and ASP.NET Core. How to handle routing and write controllers in ASP.NET Core. Key Terminology Design Patterns, MVC, and ASP.NET, Oh My! Design patterns Model-View-Controller (MVC) Model View Controller ASP.NET ASP.NET Core Content Links Reading Next Steps ",
    "tags": [],
    "title": "Chapter 9: Introduction to ASP.NET",
    "uri": "/asp-net-intro/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives Understand the basic architecture of an MVC web application Build an ASP.NET application that can handle various types of requests Key Terminology Simple Controllers route Controllers endpoint routing conventional routing attribute routing action method attribute [HttpGet] [HttpPost] [Route(\"path\")] IActionResult Controllers with Parameters query string Cleaning Up Your Controllers attribute routing attributes Content Links Reading Exercises Studio Next Steps ",
    "description": "Learning Objectives Understand the basic architecture of an MVC web application Build an ASP.NET application that can handle various types of requests Key Terminology Simple Controllers route Controllers endpoint routing conventional routing attribute routing action method attribute [HttpGet] [HttpPost] [Route(\"path\")] IActionResult Controllers with Parameters query string Cleaning Up Your Controllers attribute routing attributes Content Links Reading Exercises Studio Next Steps ",
    "tags": [],
    "title": "Chapter 10: Controllers and Routing",
    "uri": "/aspdotnet-controllers-and-routes/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 3: Control Flow \u0026 Collections",
    "content": "Next Steps This was just an introduction to conditionals, loop, and collections in C#. If you would like an additional review on this topic before starting the next chapter, check out the following articles and tutorials.\nCollections (C#) To Do List - C# Beginner Project by The Coders Cat is a great little project to practice working with conditionals. Rock Paper Scissors - C# Beginner Project by The Coders Cat is a great project to work with switch and break statements. ",
    "description": "Next Steps This was just an introduction to conditionals, loop, and collections in C#. If you would like an additional review on this topic before starting the next chapter, check out the following articles and tutorials.\nCollections (C#) To Do List - C# Beginner Project by The Coders Cat is a great little project to practice working with conditionals. Rock Paper Scissors - C# Beginner Project by The Coders Cat is a great project to work with switch and break statements.",
    "tags": [],
    "title": "Next Steps",
    "uri": "/flow-collections/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 13: Razor Views \u003e Reading",
    "content": "Welcome to the Walkthrough for creating and using templates in your CodingEvents project.\nVideo Walkthrough Starting code repo can be found on the main branch. This is an empty MVC project.\nFinal code repo can be found on the views branch.\nNote This is the beginning of this project. You will continue adding to this project for the rest of the course.",
    "description": "Welcome to the Walkthrough for creating and using templates in your CodingEvents project.\nVideo Walkthrough Starting code repo can be found on the main branch. This is an empty MVC project.\nFinal code repo can be found on the views branch.\nNote This is the beginning of this project. You will continue adding to this project for the rest of the course.",
    "tags": [],
    "title": "Walkthrough: Begin CodingEvents",
    "uri": "/razor-views/reading/view-form-walkthrough/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives After completing this chapter, you should understand:\nHow to handle an exception in C# Common exceptions in C# Key Terminology Introduction to Exceptions Exceptions, Null pointer Handling Exceptions Exception swallowing Handling Exceptions Checked exceptions, Unchecked exceptions, try/catch/finally Content Links Reading Exercises: Exceptions Next Steps ",
    "description": "Learning Objectives After completing this chapter, you should understand:\nHow to handle an exception in C# Common exceptions in C# Key Terminology Introduction to Exceptions Exceptions, Null pointer Handling Exceptions Exception swallowing Handling Exceptions Checked exceptions, Unchecked exceptions, try/catch/finally Content Links Reading Exercises: Exceptions Next Steps ",
    "tags": [],
    "title": "Chapter 11: Exceptions",
    "uri": "/exceptions/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 7: Inheritance",
    "content": "Next Steps This was just an introduction to inheritance in C#. If you would like an additional review on this topic before starting the next chapter, check out the following articles.\nC# Inheritance Inheritance in C# and .NET How Inheritance Works in C# – with Code Examples ",
    "description": "Next Steps This was just an introduction to inheritance in C#. If you would like an additional review on this topic before starting the next chapter, check out the following articles.\nC# Inheritance Inheritance in C# and .NET How Inheritance Works in C# – with Code Examples ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/inheritance/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives Understand the role of Visual Studio build tools in C#/.NET projects\nKey Terminology MSBuild MSBuild Automated build tool XML Extensible Markup Language MSBuild tasks MSBuild targets MSBuild properties MSBuild items NuGet NuGet Content Links Reading Studio: If It Ain't Broke, Add a Breakpoint! Next Steps ",
    "description": "Learning Objectives Understand the role of Visual Studio build tools in C#/.NET projects\nKey Terminology MSBuild MSBuild Automated build tool XML Extensible Markup Language MSBuild tasks MSBuild targets MSBuild properties MSBuild items NuGet NuGet Content Links Reading Studio: If It Ain't Broke, Add a Breakpoint! Next Steps ",
    "tags": [],
    "title": "Chapter 12: Tools in Visual Studio",
    "uri": "/vstools/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives By the end of this chapter, you should understand:\nThe benefits of using templates How to create a template using a Razor View in an MVC application How to add iteration, conditionals, and forms to a template How to link a template to static resources like CSS stylesheets, scripts, images, etc. How to render a template using ASP.NET controllers Key Terminology Creating a Template Razor templates @ View() method Using a Template ViewBag The Shared Directory Partial View Content Links Reading Exercises: Razor Views Studio: Spa Day! Next Steps ",
    "description": "Learning Objectives By the end of this chapter, you should understand:\nThe benefits of using templates How to create a template using a Razor View in an MVC application How to add iteration, conditionals, and forms to a template How to link a template to static resources like CSS stylesheets, scripts, images, etc. How to render a template using ASP.NET controllers Key Terminology Creating a Template Razor templates @ View() method Using a Template ViewBag The Shared Directory Partial View Content Links Reading Exercises: Razor Views Studio: Spa Day!",
    "tags": [],
    "title": "Chapter 13: Razor Views",
    "uri": "/razor-views/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives After completing everything in this chapter, you should be able to do the following:\nUnderstand the role of models in MVC applications Use model binding to efficiently create objects during form processing Key Terminology On each page of the reading, make note of the following key terms and their definitions.\nModels in MVC model business logic Creating a Model Class POCO Models and Data uid unique identifier get-only auto-implemented property readonly data layer Model-Binding model binding [FromForm] Content Links Reading Exercises: Edit Model Classes Studio: Spa User Signup Next Steps ",
    "description": "Learning Objectives After completing everything in this chapter, you should be able to do the following:\nUnderstand the role of models in MVC applications Use model binding to efficiently create objects during form processing Key Terminology On each page of the reading, make note of the following key terms and their definitions.\nModels in MVC model business logic Creating a Model Class POCO Models and Data uid unique identifier get-only auto-implemented property readonly data layer Model-Binding model binding [FromForm] Content Links Reading Exercises: Edit Model Classes Studio: Spa User Signup Next Steps ",
    "tags": [],
    "title": "Chapter 14: Models and Model Binding",
    "uri": "/aspdotnet-model-classes/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Major Concepts By the end of this chapter, you should understand:\nWhat ViewModels are and why we should use them. How and why to validate model data in ASP.NET. How to use C# validation attributes. How to employ good error handling when bad data is entered. Key Terminology ViewModels and Passing Data Between Views ViewModel Server-Side Validation Validation Client-Side Validation Server-Side Validation Validation and Views Unobtrusive Validation Content Links Reading Exercises Studio: Spa User Validation Next Steps ",
    "description": "Major Concepts By the end of this chapter, you should understand:\nWhat ViewModels are and why we should use them. How and why to validate model data in ASP.NET. How to use C# validation attributes. How to employ good error handling when bad data is entered. Key Terminology ViewModels and Passing Data Between Views ViewModel Server-Side Validation Validation Client-Side Validation Server-Side Validation Validation and Views Unobtrusive Validation Content Links Reading Exercises Studio: Spa User Validation Next Steps ",
    "tags": [],
    "title": "Chapter 15: Viewmodels and Model Validation",
    "uri": "/viewmodels/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives Once you have completed everything in the chapter, you should be able to do the following:\nUse enum types to represent categories of related objects Key Terminology As you read through this chapter, make note of the following key terms and their definitions:\nIntro enumeration types enums select log level Content Links Reading Next Steps ",
    "description": "Learning Objectives Once you have completed everything in the chapter, you should be able to do the following:\nUse enum types to represent categories of related objects Key Terminology As you read through this chapter, make note of the following key terms and their definitions:\nIntro enumeration types enums select log level Content Links Reading Next Steps ",
    "tags": [],
    "title": "Chapter 16: Enums",
    "uri": "/enums/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Major Concepts By the end of this chapter, you should understand:\nWhat object-relational mapping is and why developers use it. How to connect an ASP.NET Core MVC application to a MySQL database. How to create a new migration and update the database. How to create a DbContext and why developer use it. Key Terminology Object-Relational Mapping Object-Relational Mapping (ORM) object-relational mapper Entity Framework Core Data Layers Environment Variables Accessing Data Data Store In-Memory Data Store Persistent Data Store DbContext Database Migration Working With Data Stores Dependency Injection Transient Objects Content Links Reading Exercises: OMG the ORM! Studio: OMG more ORM! Next Steps ",
    "description": "Major Concepts By the end of this chapter, you should understand:\nWhat object-relational mapping is and why developers use it. How to connect an ASP.NET Core MVC application to a MySQL database. How to create a new migration and update the database. How to create a DbContext and why developer use it. Key Terminology Object-Relational Mapping Object-Relational Mapping (ORM) object-relational mapper Entity Framework Core Data Layers Environment Variables Accessing Data Data Store In-Memory Data Store Persistent Data Store DbContext Database Migration Working With Data Stores Dependency Injection Transient Objects Content Links Reading Exercises: OMG the ORM!",
    "tags": [],
    "title": "Chapter 17: Introduction to Object-Relational Mapping",
    "uri": "/orm-part-1/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Major Concepts The learning objectives for this chapter are:\nThis chapter introduces the tools needed to create meaningful relationships using ORM. Let’s consider the different types of relationships at a conceptual level. In later sections, we will learn how to implement these relationships using EntityFrameworkCore.\nKey Terminology One-to-Many Many-to-Many Lambda Expressions Join Tables Composite Primary Key Join Class Lazy Loading Eager Loading Content Links Reading Exercises Next Steps ",
    "description": "Major Concepts The learning objectives for this chapter are:\nThis chapter introduces the tools needed to create meaningful relationships using ORM. Let’s consider the different types of relationships at a conceptual level. In later sections, we will learn how to implement these relationships using EntityFrameworkCore.\nKey Terminology One-to-Many Many-to-Many Lambda Expressions Join Tables Composite Primary Key Join Class Lazy Loading Eager Loading Content Links Reading Exercises Next Steps ",
    "tags": [],
    "title": "Chapter 18: Relationships in Object-Relational Mapping",
    "uri": "/relationships-or-mapping/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives After completing this chapter, you should be able to do the following:\nScaffold Identity into an existing project Authenticate users that visit your application Attach permissions to users of your application Major Concepts \u0026 Key Terminology Authentication Authorization Sessions Cookies Identity Hashing Content Links Reading Studio: TechJobs Authentication Next Steps ",
    "description": "Learning Objectives After completing this chapter, you should be able to do the following:\nScaffold Identity into an existing project Authenticate users that visit your application Attach permissions to users of your application Major Concepts \u0026 Key Terminology Authentication Authorization Sessions Cookies Identity Hashing Content Links Reading Studio: TechJobs Authentication Next Steps ",
    "tags": [],
    "title": "Chapter 19: Authentication",
    "uri": "/authentication/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 19: Authentication",
    "content": "For this studio, you’ll be tasked with adding simple user authentication to your TechJobs application. The steps to do this will match what you have already done in CodingEvents. You should refer back to the tutorial starting here .\nScaffolding Configuration Authorization The Starter Code Fork and clone the starter code for TechJobsAuthentication .\nYou will need to do some work to ensure that the user, and database password match your own local MySQL setup.\nOpen Program.cs and update the following code:\nvar connectionString = \"server=localhost;user=your_username;password=your_password;database=techjobs_auth\"; Before getting started with setting up Identity, run a new migration to make sure that all of the database info is correct.\ndotnet ef migrations add new-migrationdotnet ef database update Note We’ve greatly reduced the functionality of the app so you can focus on the work to set up authentication. Running the application now gives you a familiar-looking navbar with one menu option, Add Jobs. You can add jobs right away and an astute observer of the starter code and schema tables will notice that the fields on Job are only strings, not complex objects.\nScaffolding In the project you have cloned, scaffold Identity onto the codebase.\nUse the same files as the chapter content and JobDbContext. Update Program.cs and JobDbContext as necessary.\nAdd the LoginPartial partial view to the navbar.\nRun a new migration and test the application.\nConfiguration Use the appropriate methods to set the following validation conditions on the password:\nThe password must be at a minimum of 8 characters. The password does NOT need to contain an uppercase letter. Complete any additional necessary configuration steps in Program.cs.\nAuthorization Add the necessary attributes so only logged-in users can add jobs, but all visitors to the application can see the listing of jobs. Note You will need to implement the using Microsoft.AspNetCore.Authorization; inside of your Controller class in order for the [Authorize] and [AllowAnonymous] to work properly.\nThat’s it, that’s all. You’re done. Go forth and test the auth flow by visiting the home page, registering for a new account, and logging into and out of an existing account. Then add this to any other ASP.NET project you’re working on!",
    "description": "For this studio, you’ll be tasked with adding simple user authentication to your TechJobs application. The steps to do this will match what you have already done in CodingEvents. You should refer back to the tutorial starting here .\nScaffolding Configuration Authorization The Starter Code Fork and clone the starter code for TechJobsAuthentication .\nYou will need to do some work to ensure that the user, and database password match your own local MySQL setup.",
    "tags": [],
    "title": "Studio: TechJobs Authentication",
    "uri": "/authentication/studio/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Learning Objectives After completing this chapter, you should be able to do the following:\nSubmit HTTP requests using Postman to an API and receive the expected response GET POST DELETE Submit a bad HTTP request, understand the response and how to fix it You should also have an understanding of the following:\nHTTP methods Endpoints Status Codes Headers API design Major Concepts \u0026 Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page:\nWeb APIs API Web API Server-side rendering Client-side rendering data presentation data representation state What is REST REST RESTful web services Representational state transfer JSON serioalization JSON deserialization resource resource entity resource collection REST: Practical Fundamentals Shape Endpoint Content Links Reading Exercises: Web APIs and REST Studio: Consuming the Coding Events API With Postman Next Steps ",
    "description": "Learning Objectives After completing this chapter, you should be able to do the following:\nSubmit HTTP requests using Postman to an API and receive the expected response GET POST DELETE Submit a bad HTTP request, understand the response and how to fix it You should also have an understanding of the following:\nHTTP methods Endpoints Status Codes Headers API design Major Concepts \u0026 Key Terminology Throughout this lesson you should make note of the following terms and their definitions as you read the content on the page:",
    "tags": [],
    "title": "Chapter 20: Introduction to Web APIs \u0026 REST",
    "uri": "/web-api-rest/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Appendices",
    "content": "When exploring and testing a web API, it is invaluable to have an interactive environment that allows you to fine-tune requests. For example, you may need to configure the HTTP method, headers, or body of the request – all of which the browser does not allow you to do. Instead of testing in a browser, we can use tools made specifically for interacting with APIs. One of the most popular API tools in the industry is Postman. Postman is a cross-platform tool that puts you in full control of configuring and executing API requests.\nInstalling Postman is easy thanks to its cross-platform nature. You can download the installer on their downloads page .\nMac Users Select the version that matches the type of chip your Mac has. If you are unsure if you have an Intel chip or the Apple chip, click on the apple in the upper left corner of your screen. Select About This Mac. Under Processor on the Overview tab, you will see the chip manufaturer. After installation, you can open the app. Postman will first prompt you to make an account, but if you are uncomfortable doing so, at the bottom of the screen is the option to sign up for an account later. The main view of Postman is the launchpad view.\nYou are ready to go!\nWindows Users Select the Windows x64 installer download then run the installer: Windows user should select the Windows 64-bit download option\nAfter installation, if Postman does not open automatically, locate the download and open it manually. Making an account can be useful, but if you do not want to create one, select the link in grey at the bottom of the splash screen that reads: “Skip signing in and take me straight to the to the app”: Note Windows Users: Once installed, you can right-click the Postman icon and pin it to your taskbar for easy access in the future:\nPinning the Postman application to your Windows taskbar could make your life easier\nYou can leave the launchpad view open for now. We will explore Postman after setting up our API server. Now that Postman is installed, there are a lot of features of the software to explore",
    "description": "When exploring and testing a web API, it is invaluable to have an interactive environment that allows you to fine-tune requests. For example, you may need to configure the HTTP method, headers, or body of the request – all of which the browser does not allow you to do. Instead of testing in a browser, we can use tools made specifically for interacting with APIs. One of the most popular API tools in the industry is Postman.",
    "tags": [],
    "title": "Installing Postman",
    "uri": "/appendices/install-postman/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 18: Relationships in Object-Relational Mapping",
    "content": "Next Steps As you continue to learn about Entity Framework and types of relationships visit the following articles for further review and understanding.\nMicrosoft Docs on Relationships Learn Entity Framework Entity Framework Tutorial ",
    "description": "Next Steps As you continue to learn about Entity Framework and types of relationships visit the following articles for further review and understanding.\nMicrosoft Docs on Relationships Learn Entity Framework Entity Framework Tutorial ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/relationships-or-mapping/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "Content Links Installing Postman ",
    "description": "Content Links Installing Postman ",
    "tags": [],
    "title": "Appendices",
    "uri": "/appendices/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "What is a Graded Assignment? Graded Assignments will count towards your final grade in the course. Each assignment is graded pass-fail. While Assignment 0 is more of a tutorial to get you used to autograding in C#, you have to get a passing grade on the four TechJobs assignments in order for you to continue on to the next unit. Each assignment builds on concepts introduced over multiple lessons, so we encourage you to begin reviewing the assignment and working on the different tasks as soon as the assignment becomes available in Canvas.\nContent Links Assignment 0: Hello, World! Assignment 1: Tech Jobs Console Assignment 2: TechJobs (Object-Oriented Edition) Assignment 3: TechJobs MVC Assignment 4: Tech Jobs Persistent Next Steps ",
    "description": "What is a Graded Assignment? Graded Assignments will count towards your final grade in the course. Each assignment is graded pass-fail. While Assignment 0 is more of a tutorial to get you used to autograding in C#, you have to get a passing grade on the four TechJobs assignments in order for you to continue on to the next unit. Each assignment builds on concepts introduced over multiple lessons, so we encourage you to begin reviewing the assignment and working on the different tasks as soon as the assignment becomes available in Canvas.",
    "tags": [],
    "title": "Assignments",
    "uri": "/assignments/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 19: Authentication",
    "content": "Next Steps Now that you have successfuly scaffolding Identity into an existing project and impleneted authentication you can further explore the topics below:\nFor further review you can visit Introduction to Identity Visit the following documentation for information on Identity model customization in ASP.NET Core Microsoft Identity Platform . Microsoft Identity Platform allows users of your application to sign in using their Microsoft Identities or social accounts. Several components that allow this to work are OAuth 2.0 and OpenID . ",
    "description": "Next Steps Now that you have successfuly scaffolding Identity into an existing project and impleneted authentication you can further explore the topics below:\nFor further review you can visit Introduction to Identity Visit the following documentation for information on Identity model customization in ASP.NET Core Microsoft Identity Platform . Microsoft Identity Platform allows users of your application to sign in using their Microsoft Identities or social accounts. Several components that allow this to work are OAuth 2.",
    "tags": [],
    "title": "Next Steps",
    "uri": "/authentication/next-steps/index.html"
  },
  {
    "breadcrumb": "C# Web Development \u003e Chapter 20: Introduction to Web APIs \u0026 REST",
    "content": "We have covered the fundamental aspects of the RESTful mental model and practical usage. However, RESTful design is a deep topic that even extends beyond the web and use of HTTP!\nIf you want to learn more, the following links are a good start:\nPractical Understanding Craig Dennis: APIs for beginners (YouTube) REST sub-collections, relationships and links OpenAPI specification \u0026 Swagger REST tools The GitHub API and Stripe (payment processing) API are excellent examples of RESTful design (and fantastic documentation) Deep Understanding the REST constraints The Richardson REST maturity model the original REST doctoral thesis by Roy Fielding ",
    "description": "We have covered the fundamental aspects of the RESTful mental model and practical usage. However, RESTful design is a deep topic that even extends beyond the web and use of HTTP!\nIf you want to learn more, the following links are a good start:\nPractical Understanding Craig Dennis: APIs for beginners (YouTube) REST sub-collections, relationships and links OpenAPI specification \u0026 Swagger REST tools The GitHub API and Stripe (payment processing) API are excellent examples of RESTful design (and fantastic documentation) Deep Understanding the REST constraints The Richardson REST maturity model the original REST doctoral thesis by Roy Fielding ",
    "tags": [],
    "title": "Next Steps",
    "uri": "/web-api-rest/next-steps/index.html"
  },
  {
    "breadcrumb": "",
    "content": "C# Web Development Course Summary This course is an introduction to C# and the .NET framework. C# is a programming language developed by Microsoft and used in almost all of its products.\nThis course is designed for learners who are already familiar with at least one programming language. Thus, we’ll move quickly through the syntax rules and procedural basics of the language, i.e., how does one write a for loop in C# or a conditional statement?\nAs you’ve likely heard before, once you grasp the fundamentals of programming in one language, learning another becomes much easier. Professional software developers often work in environments involving several programming languages so it’s wise to start learning new ones early on in your career.\nBeyond the basics of programming in C#, you’ll learn some key object oriented concepts to enhance the capabilities of your programs. You’ll also download a program called Visual Studio IDE to get familiar with the tools of the C# developer. In the final lessons of this course, you will use a C# framework called ASP.NET Core MVC. This framework gives us the scaffolding necessary to create MVC programs (another concept we’ll cover) effectively and efficiently.\nWhere this Course Leads Upon completion of the content within this course you will be capable of building a web application with ASP.NET Core MVC that can store data in a local database. You will also be ready to start reviewing the Liftoff materials, which focus on career-readiness and building a personal project.\nWhile you are entering a new career in technology, we hope you use the tools you learned in this program to learn new skills. You may find yourself wanting to learn more about the cloud, advanced testing tools, or building bigger and better APIs. Whatever it is, now that you have conquered the foundations of computer programming, we know you are ready for the challenge!\nChapters Chapter 1: Introduction and Setup Chapter 2: Data Types Chapter 3: Control Flow \u0026 Collections Chapter 4: Classes Chapter 5: Classes Part 2 Chapter 6: Unit Testing Chapter 7: Inheritance Chapter 8: Interfaces and Polymorphism Chapter 9: Introduction to ASP.NET Chapter 10: Controllers and Routing Chapter 11: Exceptions Chapter 12: Tools in Visual Studio Chapter 13: Razor Views Chapter 14: Models and Model Binding Chapter 15: Viewmodels and Model Validation Chapter 16: Enums Chapter 17: Introduction to Object-Relational Mapping Chapter 18: Relationships in Object-Relational Mapping Chapter 19: Authentication Chapter 20: Introduction to Web APIs \u0026 REST Appendices Assignments Pre-Course Requirements You should already have completed Unit 1 of our Web Development program, Introduction to Professional Web Development in JavaScript.\nThe first steps you will take in programming in C# is setting up your programming environment.",
    "description": "C# Web Development Course Summary This course is an introduction to C# and the .NET framework. C# is a programming language developed by Microsoft and used in almost all of its products.\nThis course is designed for learners who are already familiar with at least one programming language. Thus, we’ll move quickly through the syntax rules and procedural basics of the language, i.e., how does one write a for loop in C# or a conditional statement?",
    "tags": [],
    "title": "C# Web Development",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "C# Web Development",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
