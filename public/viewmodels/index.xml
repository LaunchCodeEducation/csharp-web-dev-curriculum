<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chapter 15: Viewmodels and Model Validation :: C# Web Development</title>
    <link>http://localhost:1313/viewmodels/index.html</link>
    <description>Major Concepts By the end of this chapter, you should understand:&#xA;What ViewModels are and why we should use them. How and why to validate model data in ASP.NET. How to use C# validation attributes. How to employ good error handling when bad data is entered. Key Terminology ViewModels and Passing Data Between Views ViewModel Server-Side Validation Validation Client-Side Validation Server-Side Validation Validation and Views Unobtrusive Validation Content Links Reading Exercises Studio: Spa User Validation Next Steps </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Feb 2023 08:57:18 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/viewmodels/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reading</title>
      <link>http://localhost:1313/viewmodels/reading/index.html</link>
      <pubDate>Wed, 25 Jan 2023 13:23:58 -0601</pubDate>
      <guid>http://localhost:1313/viewmodels/reading/index.html</guid>
      <description>Content Links ViewModels and Passing Data Between Views Server-Side Validation Validation Attributes Validating Models in a Controller Validation and Views Walkthrough: Adding ViewModels and Validation to CodingEvents </description>
    </item>
    <item>
      <title>Exercises</title>
      <link>http://localhost:1313/viewmodels/exercises/index.html</link>
      <pubDate>Fri, 24 Feb 2023 08:57:18 -0600</pubDate>
      <guid>http://localhost:1313/viewmodels/exercises/index.html</guid>
      <description>Let’s practice adding more properties to our event objects and validating them. Create a new branch from the viewmodels .&#xA;Below, we describe some new properties for you to add to the Event class. For each property, consider the following factors:&#xA;What will you call your property? What type of input should be added to capture the field’s information from the user? Refer to the chapter content to find appropriate attributes to fit the necessary constraints.</description>
    </item>
    <item>
      <title>Studio: Spa User Validation</title>
      <link>http://localhost:1313/viewmodels/studio/index.html</link>
      <pubDate>Fri, 24 Feb 2023 08:57:18 -0600</pubDate>
      <guid>http://localhost:1313/viewmodels/studio/index.html</guid>
      <description>We’ll build on the user-signup-starter studio from last class, adding in model validation.&#xA;Getting Started Open up your SpaDay application and checkout the user-validation branch.&#xA;Creating a New ViewModel To get started with adding validation to our application, we need to first make a ViewModel. After adding a folder for storing our ViewModels, create a new ViewModel for working with form submission called AddUserViewModel. Add properties for the user’s username, password, and email.</description>
    </item>
    <item>
      <title>Next Steps</title>
      <link>http://localhost:1313/viewmodels/next-steps/index.html</link>
      <pubDate>Fri, 24 Feb 2023 08:57:18 -0600</pubDate>
      <guid>http://localhost:1313/viewmodels/next-steps/index.html</guid>
      <description>Next Steps This lesson covered the basics of ViewModels, validation attributes, and side-server validation.&#xA;Check out these resources if you want a deeper learning journey on these topics.&#xA;Part 3: Views and ViewModels Use ViewModels to manage data &amp; organize code in ASP.NET MVC applications Tag Helpers in forms in ASP.NET Core Model validation in ASP.NET Core MVC and Razor Pages How validation works Strongly Typed Models and the @model Keyword Adding Validation Rules to the Movie Model </description>
    </item>
  </channel>
</rss>