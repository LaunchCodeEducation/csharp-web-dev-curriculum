<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading :: C# Web Development</title>
    <link>http://localhost:1313/web-api-rest/reading/index.html</link>
    <description>Content Links Web APIs What is REST REST: Practical Fundamentals </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Dec 2022 09:16:07 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/web-api-rest/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web APIs</title>
      <link>http://localhost:1313/web-api-rest/reading/web-api/index.html</link>
      <pubDate>Thu, 15 Dec 2022 09:16:07 -0600</pubDate>
      <guid>http://localhost:1313/web-api-rest/reading/web-api/index.html</guid>
      <description>An API, or application programming interface, is a set of rules that allow one application to communicate with another application.&#xA;Web APIs are how applications communicate with other applications over a network. Throughout the remainder of this chapter, we will explore web APIs and a pattern for organizing them called REST.&#xA;REST is an application design pattern, not unlike MVC.&#xA;REST, however, relies on an abstract concept called application state that we’ll cover in more detail on the following pages.</description>
    </item>
    <item>
      <title>What is REST</title>
      <link>http://localhost:1313/web-api-rest/reading/what-is-rest/index.html</link>
      <pubDate>Thu, 15 Dec 2022 09:16:07 -0600</pubDate>
      <guid>http://localhost:1313/web-api-rest/reading/what-is-rest/index.html</guid>
      <description>REST is an acronym that stands for REpresentational State Transfer. RESTful web services refer to web technologies that use this design pattern. REST, as we’ve mentioned, is an architectural pattern that provides uniformity and predictability to any API that adheres to it.&#xA;The same benefits are experienced by the API consumer. REST is a set of guiding principles for supporting the organization of an API’s core responsibilities – managing and transferring data.</description>
    </item>
    <item>
      <title>REST: Practical Fundamentals</title>
      <link>http://localhost:1313/web-api-rest/reading/rest-fundamentals/index.html</link>
      <pubDate>Thu, 15 Dec 2022 09:16:07 -0600</pubDate>
      <guid>http://localhost:1313/web-api-rest/reading/rest-fundamentals/index.html</guid>
      <description>Here’s a takeaway of the abstract ideas we covered on the last page:&#xA;State: data that can change (transition) through interactions between an API and its client&#xA;Representation: the convertible format that enables state to be transferred and used by the client and API&#xA;Resource: the representation of a type of state (as an entity or collection) that the API exposes to its client for interaction&#xA;Now that you have an understanding of these concepts, let’s turn our attention to the practical details of working with REST APIs.</description>
    </item>
  </channel>
</rss>