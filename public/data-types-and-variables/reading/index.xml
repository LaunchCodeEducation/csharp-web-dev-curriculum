<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading :: C# Web Development</title>
    <link>http://localhost:1313/data-types-and-variables/reading/index.html</link>
    <description> Data Types Some C# Practice Strings, Characters, and Arrays Objects and Methods, a Primer </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Jan 2023 16:28:22 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/data-types-and-variables/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Types</title>
      <link>http://localhost:1313/data-types-and-variables/reading/data-types/index.html</link>
      <pubDate>Tue, 17 Jan 2023 16:28:22 -0600</pubDate>
      <guid>http://localhost:1313/data-types-and-variables/reading/data-types/index.html</guid>
      <description>Static vs. Dynamic Typing In a dynamically typed programming language (like JavaScript or Python), a variable or parameter can refer to a value of any data type (string, number, object, etc.) at any time. When the variable is used, the interpreter figures out what type it is and behaves accordingly.&#xA;C# is a statically typed language. When a variable or parameter is declared in a statically typed language, the data type for the value must be specified.</description>
    </item>
    <item>
      <title>Some C# Practice</title>
      <link>http://localhost:1313/data-types-and-variables/reading/some-csharp-practice/index.html</link>
      <pubDate>Tue, 17 Jan 2023 16:28:22 -0600</pubDate>
      <guid>http://localhost:1313/data-types-and-variables/reading/some-csharp-practice/index.html</guid>
      <description>Let’s move beyond our “Hello, World” example from the introduction and explore a simple temperature conversion program. We want our function to convert a Fahrenheit temperature to Celsius.&#xA;To get started, fork and clone the csharp-web-dev-examples repository . This repo includes examples you should review as you read for the first 7 or so lessons.&#xA;Temperature Conversion Open the TempConverter project in your csharp-web-development-examples solution in Visual Studio.&#xA;Here’s what the file should look like.</description>
    </item>
    <item>
      <title>Strings, Characters, and Arrays</title>
      <link>http://localhost:1313/data-types-and-variables/reading/strings-chars-and-arrays/index.html</link>
      <pubDate>Tue, 17 Jan 2023 16:28:22 -0600</pubDate>
      <guid>http://localhost:1313/data-types-and-variables/reading/strings-chars-and-arrays/index.html</guid>
      <description>Strings and Characters Immutability Strings in C# are immutable, which means that the characters within a string cannot be changed.&#xA;Single vs. Double Quotation Marks C# syntax requires double quotation marks when declaring strings.&#xA;C# has another variable type, char, which is used for a single character. char uses single quotation marks. The single character can be a letter, digit, punctuation, or whitespace like tab (&#39;\t&#39;).&#xA;string staticVariable = &#34;dog&#34;; char charVariable = &#39;d&#39;;String Manipulation The table below summarizes some of the most common string methods available in C#.</description>
    </item>
    <item>
      <title>Objects and Methods, a Primer</title>
      <link>http://localhost:1313/data-types-and-variables/reading/objects-primer/index.html</link>
      <pubDate>Tue, 17 Jan 2023 16:28:22 -0600</pubDate>
      <guid>http://localhost:1313/data-types-and-variables/reading/objects-primer/index.html</guid>
      <description>There is a lot to say about objects in C# that we’ll cover in due time. Here, we highlight some introductory concepts of how C# works as an object-oriented programming language.&#xA;Objects In C#, objects are structures that have a state and a set of behaviors. The state of an object includes properties/data that the coder can define and modify. Behaviors are actions that run when requested, and they can be used to evaluate, manipulate, or return data.</description>
    </item>
  </channel>
</rss>